<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KubernetesClient.Models</name>
    </assembly>
    <members>
        <member name="T:k8s.Models.ContainerMetrics">
            <summary>
            Describes the resource usage metrics of a container pull from metrics server API.
            </summary>
        </member>
        <member name="P:k8s.Models.ContainerMetrics.Name">
            <summary>
            Defines container name corresponding to the one from pod.spec.containers.
            </summary>
        </member>
        <member name="P:k8s.Models.ContainerMetrics.Usage">
            <summary>
            The resource usage.
            </summary>
        </member>
        <member name="T:k8s.Models.IntstrIntOrString">
            <summary>
            IntOrString is a type that can hold an int32 or a string.  When used in JSON or
            YAML marshalling and unmarshalling, it produces or consumes the inner type. 
            This allows you to have, for example, a JSON field that can accept a name or
            number.
            </summary>
        </member>
        <member name="M:k8s.Models.IntstrIntOrString.#ctor">
            <summary>
            Initializes a new instance of the IntstrIntOrString class.
            </summary>
        </member>
        <member name="M:k8s.Models.IntstrIntOrString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IntstrIntOrString class.
            </summary>
            <param name="value">
            
            </param>
        </member>
        <member name="P:k8s.Models.IntstrIntOrString.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.IntstrIntOrString.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.KubernetesEntityAttribute">
            <summary>
            Describes object type in Kubernetes
            </summary>
        </member>
        <member name="P:k8s.Models.KubernetesEntityAttribute.Kind">
            <summary>
            The Kubernetes named schema this object is based on.
            </summary>
        </member>
        <member name="P:k8s.Models.KubernetesEntityAttribute.Group">
            <summary>
            The Group this Kubernetes type belongs to.
            </summary>
        </member>
        <member name="P:k8s.Models.KubernetesEntityAttribute.ApiVersion">
            <summary>
            The API Version this Kubernetes type belongs to.
            </summary>
        </member>
        <member name="P:k8s.Models.KubernetesEntityAttribute.PluralName">
            <summary>
            The plural name of the entity.
            </summary>
        </member>
        <member name="P:k8s.Models.KubernetesList`1.ApiVersion">
            <summary>
            Gets or sets aPIVersion defines the versioned schema of this
            representation of an object. Servers should convert recognized
            schemas to the latest internal value, and may reject unrecognized
            values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.KubernetesList`1.Kind">
            <summary>
            Gets or sets kind is a string value representing the REST resource
            this object represents. Servers may infer this from the endpoint
            the client submits requests to. Cannot be updated. In CamelCase.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.KubernetesList`1.Metadata">
            <summary>
            Gets or sets standard object's metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.KubernetesList`1.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.ModelExtensions">
            <summary>Adds convenient extensions for Kubernetes objects.</summary>
        </member>
        <member name="M:k8s.Models.ModelExtensions.AddFinalizer(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.String)">
            <summary>Adds the given finalizer to a Kubernetes object if it doesn't already exist.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="finalizer">the finalizer</param>
            <returns>Returns true if the finalizer was added and false if it already existed.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.ApiGroup(k8s.IKubernetesObject)">
            <summary>Extracts the Kubernetes API group from the <see cref="P:k8s.IKubernetesObject.ApiVersion"/>.</summary>
            <param name="obj">the kubernetes client <see cref="T:k8s.IKubernetesObject"/></param>
            <returns>api group from server</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.ApiGroupVersion(k8s.IKubernetesObject)">
            <summary>Extracts the Kubernetes API version (excluding the group) from the <see cref="P:k8s.IKubernetesObject.ApiVersion"/>.</summary>
            <param name="obj">the kubernetes client <see cref="T:k8s.IKubernetesObject"/></param>
            <returns>api group version from server</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.ApiGroupAndVersion(k8s.IKubernetesObject)">
            <summary>Splits the Kubernetes API version into the group and version.</summary>
            <param name="obj">the kubernetes client <see cref="T:k8s.IKubernetesObject"/></param>
            <returns>api group and version from server</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.GetApiGroupAndVersion(k8s.IKubernetesObject,System.String@,System.String@)">
            <summary>Splits the Kubernetes API version into the group and version.</summary>
            <param name="obj">the kubernetes client <see cref="T:k8s.IKubernetesObject"/></param>
            <param name="group">api group output var</param>
            <param name="version">api group version output var</param>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Continue(k8s.IMetadata{k8s.Models.V1ListMeta})">
            <summary>
            Gets the continuation token version of a Kubernetes list.
            </summary>
            <param name="list">Kubernetes list</param>
            <returns>continuation token </returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.EnsureMetadata(k8s.IMetadata{k8s.Models.V1ListMeta})">
            <summary>Ensures that the <see cref="T:k8s.Models.V1ListMeta"/> metadata field is set, and returns it.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the metadata <see cref="T:k8s.Models.V1ListMeta"/> </returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.ResourceVersion(k8s.IMetadata{k8s.Models.V1ListMeta})">
            <summary>Gets the resource version of a Kubernetes list.</summary>
            <param name="list">the object meta list<see cref="T:k8s.Models.V1ListMeta"/></param>
            <returns>resource version</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.AddOwnerReference(k8s.IMetadata{k8s.Models.V1ObjectMeta},k8s.Models.V1OwnerReference)">
            <summary>Adds an owner reference to the object. No attempt is made to ensure the reference is correct or fits with the
            other references.
            </summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="ownerRef">the owner reference to the object</param>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Annotations(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the annotations of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>a dictionary of the annotations</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.CreationTimestamp(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the creation time of a Kubernetes object, or null if it hasn't been created yet.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>creation time of a Kubernetes object, null if it hasn't been created yet.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.DeletionTimestamp(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the deletion time of a Kubernetes object, or null if it hasn't been scheduled for deletion.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the deletion time of a Kubernetes object, or null if it hasn't been scheduled for deletion.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.EnsureMetadata(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Ensures that the <see cref="T:k8s.Models.V1ObjectMeta"/> metadata field is set, and returns it.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the  metadata field <see cref="T:k8s.Models.V1ObjectMeta"/></returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Finalizers(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the <see cref="P:k8s.Models.V1ObjectMeta.Finalizers"/> of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>Metadata.Finalizers of <see cref="T:k8s.Models.V1ObjectMeta"/></returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.FindOwnerReference(k8s.IMetadata{k8s.Models.V1ObjectMeta},k8s.IKubernetesObject{k8s.Models.V1ObjectMeta})">
            <summary>Gets the index of the <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object, or -1 if no such
            reference could be found.
            </summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="owner">the owner of the object<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the index of the <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object, or -1 if no such
            reference could be found.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.FindOwnerReference(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.Predicate{k8s.Models.V1OwnerReference})">
            <summary>Gets the index of the <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given predicate, or -1 if no such
            reference could be found.
            </summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="predicate">a <see cref="!:Predicate"/> to test owner reference</param>
            <returns>the index of the <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object, or -1 if no such
            reference could be found.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Generation(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the generation a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the Metadata.Generation of object meta<see cref="T:k8s.Models.V1ObjectMeta"/></returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.GetAnnotation(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.String)">
            <summary>Returns the given annotation from a Kubernetes object or null if the annotation was not found.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="key">the key of the annotation</param>
            <returns>the content of the annotation</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.GetController(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the <see cref="T:k8s.Models.V1OwnerReference"/> for the controller of this object, or null if it couldn't be found.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the <see cref="T:k8s.Models.V1OwnerReference"/> for the controller of this object, or null if it couldn't be found.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.GetLabel(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.String)">
            <summary>Returns the given label from a Kubernetes object or null if the label was not found.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="key">the key of the label</param>
            <returns>content of the label</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.GetOwnerReference(k8s.IMetadata{k8s.Models.V1ObjectMeta},k8s.IKubernetesObject{k8s.Models.V1ObjectMeta})">
            <summary>Gets <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object, or null if no matching reference exists.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="owner">the owner of the object<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object, or null if no matching reference exists.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.GetOwnerReference(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.Predicate{k8s.Models.V1OwnerReference})">
            <summary>Gets the <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given predicate, or null if no matching reference exists.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="predicate">a <see cref="!:Predicate"/> to test owner reference</param>
            <returns>the <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object, or null if no matching reference exists.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.HasFinalizer(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.String)">
            <summary>Determines whether the Kubernetes object has the given finalizer.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="finalizer">the finalizer</param>
            <returns>true if object has the finalizer</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.IsOwnedBy(k8s.IMetadata{k8s.Models.V1ObjectMeta},k8s.IKubernetesObject{k8s.Models.V1ObjectMeta})">
            <summary>Determines whether one object is owned by another.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="owner">the owner of the object<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>true if owned by obj</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Labels(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the labels of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>labels of the object in a Dictionary</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Name(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the name of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the name of the Kubernetes object</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Namespace(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the namespace of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the namespace of the Kubernetes object</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.OwnerReferences(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the owner references of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>all owner reference in a list of the Kubernetes object</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.RemoveFinalizer(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.String)">
            <summary>Removes the given finalizer from a Kubernetes object if it exists.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="finalizer">the finalizer</param>
            <returns>Returns true if the finalizer was removed and false if it didn't exist.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.RemoveOwnerReference(k8s.IMetadata{k8s.Models.V1ObjectMeta},k8s.IKubernetesObject{k8s.Models.V1ObjectMeta})">
            <summary>Removes the first <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object and returns it, or returns null if no
            matching reference could be found.
            </summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="owner">the owner of the object<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the first <see cref="T:k8s.Models.V1OwnerReference"/> that matches the given object</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.RemoveOwnerReferences(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.Predicate{k8s.Models.V1OwnerReference})">
            <summary>Removes all <see cref="T:k8s.Models.V1OwnerReference">owner references</see> that match the given predicate, and returns true if
            any were removed.
            </summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="predicate">a <see cref="!:Predicate"/> to test owner reference</param>
            <returns>true if any were removed</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.RemoveOwnerReferences(k8s.IMetadata{k8s.Models.V1ObjectMeta},k8s.IKubernetesObject{k8s.Models.V1ObjectMeta})">
            <summary>Removes all <see cref="T:k8s.Models.V1OwnerReference">owner references</see> that match the given object, and returns true if
            any were removed.
            </summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="owner">the owner of the object<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>true if any were removed</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.ResourceVersion(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the resource version of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the resource version of a Kubernetes object</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.SetAnnotation(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.String,System.String)">
            <summary>Sets or removes an annotation on a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="key">the key of the annotation<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="value">the value of the annotation, null to remove it<see cref="T:k8s.Models.V1ObjectMeta"/></param>
        </member>
        <member name="M:k8s.Models.ModelExtensions.SetLabel(k8s.IMetadata{k8s.Models.V1ObjectMeta},System.String,System.String)">
            <summary>Sets or removes a label on a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="key">the key of the label<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="value">the value of the label, null to remove it<see cref="T:k8s.Models.V1ObjectMeta"/></param>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Uid(k8s.IMetadata{k8s.Models.V1ObjectMeta})">
            <summary>Gets the unique ID of a Kubernetes object.</summary>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns> the unique ID of a Kubernetes object</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.EnsureAnnotations(k8s.Models.V1ObjectMeta)">
            <summary>Ensures that the <see cref="P:k8s.Models.V1ObjectMeta.Annotations"/> field is not null, and returns it.</summary>
            <param name="meta">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the annotations in a Dictionary</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.EnsureFinalizers(k8s.Models.V1ObjectMeta)">
            <summary>Ensures that the <see cref="P:k8s.Models.V1ObjectMeta.Finalizers"/> field is not null, and returns it.</summary>
            <param name="meta">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the list of finalizers</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.EnsureLabels(k8s.Models.V1ObjectMeta)">
            <summary>Ensures that the <see cref="P:k8s.Models.V1ObjectMeta.Labels"/> field is not null, and returns it.</summary>
            <param name="meta">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the dictionary of labels</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Namespace(k8s.Models.V1ObjectMeta)">
            <summary>Gets the namespace from Kubernetes metadata.</summary>
            <param name="meta">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>the namespace from Kubernetes metadata</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.SetNamespace(k8s.Models.V1ObjectMeta,System.String)">
            <summary>Sets the namespace from Kubernetes metadata.</summary>
            <param name="meta">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <param name="ns">the namespace</param>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Matches(k8s.Models.V1ObjectReference,k8s.IKubernetesObject{k8s.Models.V1ObjectMeta})">
            <summary>Determines whether an object reference references the given object.</summary>
            <param name="objref">the object reference<see cref="T:k8s.Models.V1ObjectReference"/></param>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>true if the object reference references the given object.</returns>
        </member>
        <member name="M:k8s.Models.ModelExtensions.Matches(k8s.Models.V1OwnerReference,k8s.IKubernetesObject{k8s.Models.V1ObjectMeta})">
            <summary>Determines whether an owner reference references the given object.</summary>
            <param name="owner">the object reference<see cref="T:k8s.Models.V1ObjectReference"/></param>
            <param name="obj">the object meta<see cref="T:k8s.Models.V1ObjectMeta"/></param>
            <returns>true if the owner reference references the given object</returns>
        </member>
        <member name="T:k8s.Models.NodeMetrics">
            <summary>
            Describes the resource usage metrics of a node pull from metrics server API.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetrics.Metadata">
            <summary>
            The kubernetes standard object's metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetrics.Timestamp">
            <summary>
            The timestamp when metrics were collected.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetrics.Window">
            <summary>
            The interval from which metrics were collected.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetrics.Usage">
            <summary>
            The resource usage.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetricsList.ApiVersion">
            <summary>
            Defines the versioned schema of this representation of an object.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetricsList.Kind">
            <summary>
            Defines the REST resource this object represents.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetricsList.Metadata">
            <summary>
            The kubernetes standard object's metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.NodeMetricsList.Items">
            <summary>
            The list of node metrics.
            </summary>
        </member>
        <member name="T:k8s.Models.PodMetrics">
            <summary>
            Describes the resource usage metrics of a pod pull from metrics server API.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetrics.Metadata">
            <summary>
            The kubernetes standard object's metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetrics.Timestamp">
            <summary>
            The timestamp when metrics were collected.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetrics.Window">
            <summary>
            The interval from which metrics were collected.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetrics.Containers">
            <summary>
            The list of containers metrics.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetricsList.ApiVersion">
            <summary>
            Defines the versioned schema of this representation of an object.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetricsList.Kind">
            <summary>
            Defines the REST resource this object represents.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetricsList.Metadata">
            <summary>
            The kubernetes standard object's metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.PodMetricsList.Items">
            <summary>
            The list of pod metrics.
            </summary>
        </member>
        <member name="T:k8s.Models.ResourceQuantity">
            <summary>
                port https://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go to c#
                Quantity is a fixed-point representation of a number.
                It provides convenient marshaling/unmarshaling in JSON and YAML,
                in addition to String() and Int64() accessors.
                The serialization format is:
                quantity        ::= signedNumber suffix
                (Note that suffix may be empty, from the "" case in decimalSI.)
                digit           ::= 0 | 1 | ... | 9
                digits          ::= digit | digitdigits
                number          ::= digits | digits.digits | digits. | .digits
                sign            ::= "+" | "-"
                signedNumber    ::= number | signnumber
                suffix          ::= binarySI | decimalExponent | decimalSI
                binarySI        ::= Ki | Mi | Gi | Ti | Pi | Ei
                (International System of units; See: http:///physics.nist.gov/cuu/Units/binary.html)
                decimalSI       ::= m | "" | k | M | G | T | P | E
                (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                decimalExponent ::= "e" signedNumber | "E" signedNumber
                No matter which of the three exponent forms is used, no quantity may represent
                a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
                places. Numbers larger or more precise will be capped or rounded up.
                (E.g.: 0.1m will rounded up to 1m.)
                This may be extended in the future if we require larger or smaller quantities.
                When a Quantity is parsed from a string, it will remember the type of suffix
                it had, and will use the same type again when it is serialized.
                Before serializing, Quantity will be put in "canonical form".
                This means that Exponent/suffix will be adjusted up or down (with a
                corresponding increase or decrease in Mantissa) such that:
                a. No precision is lost
                b. No fractional digits will be emitted
                c. The exponent (or suffix) is as large as possible.
                The sign will be omitted unless the number is negative.
                Examples:
                1.5 will be serialized as "1500m"
                1.5Gi will be serialized as "1536Mi"
                NOTE: We reserve the right to amend this canonical format, perhaps to
                allow 1.5 to be canonical.
                TODO: Remove above disclaimer after all bikeshedding about format is over,
                or after March 2015.
                Note that the quantity will NEVER be internally represented by a
                floating point number. That is the whole point of this exercise.
                Non-canonical values will still parse as long as they are well formed,
                but will be re-emitted in their canonical form. (So always use canonical
                form, or don't diff.)
                This format is intended to make it difficult to use these numbers without
                writing some sort of special handling code in the hopes that that will
                cause implementors to also use a fixed point implementation.
            </summary>
            <summary>
            Quantity is a fixed-point representation of a number. It provides convenient
            marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64()
            accessors.
            
            The serialization format is:
            
            ``` &lt;quantity&gt;        ::= &lt;signedNumber&gt;&lt;suffix&gt;
            
            (Note that &lt;suffix&gt; may be empty, from the &quot;&quot; case in &lt;decimalSI&gt;.)
            
            &lt;digit&gt;           ::= 0 | 1 | ... | 9 &lt;digits&gt;          ::= &lt;digit&gt; |
            &lt;digit&gt;&lt;digits&gt; &lt;number&gt;          ::= &lt;digits&gt; | &lt;digits&gt;.&lt;digits&gt; | &lt;digits&gt;. |
            .&lt;digits&gt; &lt;sign&gt;            ::= &quot;+&quot; | &quot;-&quot; &lt;signedNumber&gt;    ::= &lt;number&gt; |
            &lt;sign&gt;&lt;number&gt; &lt;suffix&gt;          ::= &lt;binarySI&gt; | &lt;decimalExponent&gt; |
            &lt;decimalSI&gt; &lt;binarySI&gt;        ::= Ki | Mi | Gi | Ti | Pi | Ei
            
            (International System of units; See:
            http://physics.nist.gov/cuu/Units/binary.html)
            
            &lt;decimalSI&gt;       ::= m | &quot;&quot; | k | M | G | T | P | E
            
            (Note that 1024 = 1Ki but 1000 = 1k; I didn&apos;t choose the capitalization.)
            
            &lt;decimalExponent&gt; ::= &quot;e&quot; &lt;signedNumber&gt; | &quot;E&quot; &lt;signedNumber&gt; ```
            
            No matter which of the three exponent forms is used, no quantity may represent a
            number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
            places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m
            will rounded up to 1m.) This may be extended in the future if we require larger
            or smaller quantities.
            
            When a Quantity is parsed from a string, it will remember the type of suffix it
            had, and will use the same type again when it is serialized.
            
            Before serializing, Quantity will be put in &quot;canonical form&quot;. This means that
            Exponent/suffix will be adjusted up or down (with a corresponding increase or
            decrease in Mantissa) such that:
            
            - No precision is lost - No fractional digits will be emitted - The exponent (or
            suffix) is as large as possible.
            
            The sign will be omitted unless the number is negative.
            
            Examples:
            
            - 1.5 will be serialized as &quot;1500m&quot; - 1.5Gi will be serialized as &quot;1536Mi&quot;
            
            Note that the quantity will NEVER be internally represented by a floating point
            number. That is the whole point of this exercise.
            
            Non-canonical values will still parse as long as they are well formed, but will
            be re-emitted in their canonical form. (So always use canonical form, or don&apos;t
            diff.)
            
            This format is intended to make it difficult to use these numbers without
            writing some sort of special handling code in the hopes that that will cause
            implementors to also use a fixed point implementation.
            </summary>
        </member>
        <member name="F:k8s.Models.ResourceQuantity.SuffixFormat.DecimalExponent">
            <summary>
            e.g., 12e6
            </summary>
        </member>
        <member name="F:k8s.Models.ResourceQuantity.SuffixFormat.BinarySI">
            <summary>
            e.g., 12Mi (12 * 2^20)
            </summary>
        </member>
        <member name="F:k8s.Models.ResourceQuantity.SuffixFormat.DecimalSI">
            <summary>
            e.g., 12M  (12 * 10^6)
            </summary>
        </member>
        <member name="M:k8s.Models.ResourceQuantity.#ctor">
            <summary>
            Initializes a new instance of the ResourceQuantity class.
            </summary>
        </member>
        <member name="M:k8s.Models.ResourceQuantity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResourceQuantity class.
            </summary>
            <param name="value">
            
            </param>
        </member>
        <member name="M:k8s.Models.ResourceQuantity.CustomInit">
            <summary>
            An initialization method that performs custom operations like setting defaults
            </summary>
        </member>
        <member name="P:k8s.Models.ResourceQuantity.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.ResourceQuantity.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Patch">
            <summary>
            Patch is provided to give a concrete name and type to the Kubernetes PATCH
            request body.
            </summary>
        </member>
        <member name="F:k8s.Models.V1Patch.PatchType.Unknown">
            <summary>
            not set, this is not allowed
            </summary>
        </member>
        <member name="F:k8s.Models.V1Patch.PatchType.JsonPatch">
            <summary>
            content type application/json-patch+json
            </summary>
        </member>
        <member name="F:k8s.Models.V1Patch.PatchType.MergePatch">
            <summary>
            content type application/merge-patch+json
            </summary>
        </member>
        <member name="F:k8s.Models.V1Patch.PatchType.StrategicMergePatch">
            <summary>
            content type application/strategic-merge-patch+json
            </summary>
        </member>
        <member name="F:k8s.Models.V1Patch.PatchType.ApplyPatch">
            <summary>
            content type application/apply-patch+yaml
            </summary>
        </member>
        <member name="M:k8s.Models.V1Patch.#ctor">
            <summary>
            Initializes a new instance of the V1Patch class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Patch.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the V1Patch class.
            </summary>
            <param name="content">
            
            </param>
        </member>
        <member name="M:k8s.Models.V1Patch.CustomInit">
            <summary>
            An initialization method that performs custom operations like setting defaults
            </summary>
        </member>
        <member name="P:k8s.Models.V1Patch.Content">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1Patch.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodTemplateSpec">
            <summary>
            Partial implementation of the IMetadata interface
            to open this class up to ModelExtensions methods
            </summary>
            <summary>
            PodTemplateSpec describes the data a pod should have when created from a
            template
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplateSpec.#ctor">
            <summary>
            Initializes a new instance of the V1PodTemplateSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplateSpec.#ctor(k8s.Models.V1ObjectMeta,k8s.Models.V1PodSpec)">
            <summary>
            Initializes a new instance of the V1PodTemplateSpec class.
            </summary>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Specification of the desired behavior of the pod. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1PodTemplateSpec.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodTemplateSpec.Spec">
            <summary>
            Specification of the desired behavior of the pod. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplateSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Status">
            <summary>
            Status is a return value for calls that don&apos;t return other objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Status.ToString">
            <summary>Converts a <see cref="T:k8s.Models.V1Status"/> object into a short description of the status.</summary>
            <returns>string description of the status</returns>
        </member>
        <member name="M:k8s.Models.V1Status.#ctor">
            <summary>
            Initializes a new instance of the V1Status class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Status.#ctor(System.String,System.Nullable{System.Int32},k8s.Models.V1StatusDetails,System.String,System.String,k8s.Models.V1ListMeta,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1Status class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="code">
            Suggested HTTP return code for this status, 0 if not set.
            </param>
            <param name="details">
            Extended data associated with the reason.  Each reason may define its own
            extended details. This field is optional and the data returned is not guaranteed
            to conform to any schema except that defined by the reason type.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="message">
            A human-readable description of the status of this operation.
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="reason">
            A machine-readable description of why this operation is in the &quot;Failure&quot; status.
            If this value is empty there is no information available. A Reason clarifies an
            HTTP status code but does not override it.
            </param>
            <param name="status">
            Status of the operation. One of: &quot;Success&quot; or &quot;Failure&quot;. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Status.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Status.Code">
            <summary>
            Suggested HTTP return code for this status, 0 if not set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Status.Details">
            <summary>
            Extended data associated with the reason.  Each reason may define its own
            extended details. This field is optional and the data returned is not guaranteed
            to conform to any schema except that defined by the reason type.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Status.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Status.Message">
            <summary>
            A human-readable description of the status of this operation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Status.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Status.Reason">
            <summary>
            A machine-readable description of why this operation is in the &quot;Failure&quot; status.
            If this value is empty there is no information available. A Reason clarifies an
            HTTP status code but does not override it.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Status.Status">
            <summary>
            Status of the operation. One of: &quot;Success&quot; or &quot;Failure&quot;. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Status.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1MatchCondition">
            <summary>
            MatchCondition represents a condition which must by fulfilled for a request to
            be sent to a webhook.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MatchCondition.#ctor">
            <summary>
            Initializes a new instance of the V1MatchCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MatchCondition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1MatchCondition class.
            </summary>
            <param name="expression">
            Expression represents the expression which will be evaluated by CEL. Must
            evaluate to bool. CEL expressions have access to the contents of the
            AdmissionRequest and Authorizer, organized into CEL variables:
            
            &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. &apos;request&apos; - Attributes of the admission
            request(/pkg/apis/admission/types.go#AdmissionRequest). &apos;authorizer&apos; - A CEL
            Authorizer. May be used to perform authorization checks for the principal (user
            or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
            
            Required.
            </param>
            <param name="name">
            Name is an identifier for this match condition, used for strategic merging of
            MatchConditions, as well as providing an identifier for logging purposes. A good
            name should be descriptive of the associated expression. Name must be a
            qualified name consisting of alphanumeric characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;, and must
            start and end with an alphanumeric character (e.g. &apos;MyName&apos;,  or &apos;my.name&apos;,  or
            &apos;123-abc&apos;, regex used for validation is
            &apos;([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]&apos;) with an optional DNS subdomain
            prefix and &apos;/&apos; (e.g. &apos;example.com/MyName&apos;)
            
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1MatchCondition.Expression">
            <summary>
            Expression represents the expression which will be evaluated by CEL. Must
            evaluate to bool. CEL expressions have access to the contents of the
            AdmissionRequest and Authorizer, organized into CEL variables:
            
            &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. &apos;request&apos; - Attributes of the admission
            request(/pkg/apis/admission/types.go#AdmissionRequest). &apos;authorizer&apos; - A CEL
            Authorizer. May be used to perform authorization checks for the principal (user
            or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
            
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MatchCondition.Name">
            <summary>
            Name is an identifier for this match condition, used for strategic merging of
            MatchConditions, as well as providing an identifier for logging purposes. A good
            name should be descriptive of the associated expression. Name must be a
            qualified name consisting of alphanumeric characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;, and must
            start and end with an alphanumeric character (e.g. &apos;MyName&apos;,  or &apos;my.name&apos;,  or
            &apos;123-abc&apos;, regex used for validation is
            &apos;([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]&apos;) with an optional DNS subdomain
            prefix and &apos;/&apos; (e.g. &apos;example.com/MyName&apos;)
            
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MatchCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1MutatingWebhook">
            <summary>
            MutatingWebhook describes an admission webhook and the resources and operations
            it applies to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhook.#ctor">
            <summary>
            Initializes a new instance of the V1MutatingWebhook class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhook.#ctor(System.Collections.Generic.IList{System.String},k8s.Models.Admissionregistrationv1WebhookClientConfig,System.String,System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1MatchCondition},System.String,k8s.Models.V1LabelSelector,k8s.Models.V1LabelSelector,System.String,System.Collections.Generic.IList{k8s.Models.V1RuleWithOperations},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1MutatingWebhook class.
            </summary>
            <param name="admissionReviewVersions">
            AdmissionReviewVersions is an ordered list of preferred `AdmissionReview`
            versions the Webhook expects. API server will try to use first version in the
            list which it supports. If none of the versions specified in this list supported
            by API server, validation will fail for this object. If a persisted webhook
            configuration specifies allowed versions and does not include any versions known
            to the API Server, calls to the webhook will fail and be subject to the failure
            policy.
            </param>
            <param name="clientConfig">
            ClientConfig defines how to communicate with the hook. Required
            </param>
            <param name="name">
            The name of the admission webhook. Name should be fully qualified, e.g.,
            imagepolicy.kubernetes.io, where &quot;imagepolicy&quot; is the name of the webhook, and
            kubernetes.io is the name of the organization. Required.
            </param>
            <param name="sideEffects">
            SideEffects states whether this webhook has side effects. Acceptable values are:
            None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or
            Unknown). Webhooks with side effects MUST implement a reconciliation system,
            since a request may be rejected by a future step in the admission chain and the
            side effects therefore need to be undone. Requests with the dryRun attribute
            will be auto-rejected if they match a webhook with sideEffects == Unknown or
            Some.
            </param>
            <param name="failurePolicy">
            FailurePolicy defines how unrecognized errors from the admission endpoint are
            handled - allowed values are Ignore or Fail. Defaults to Fail.
            </param>
            <param name="matchConditions">
            MatchConditions is a list of conditions that must be met for a request to be
            sent to this webhook. Match conditions filter requests that have already been
            matched by the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
            2. If ALL matchConditions evaluate to TRUE, the webhook is called.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
            
            This is a beta feature and managed by the AdmissionWebhookMatchConditions
            feature gate.
            </param>
            <param name="matchPolicy">
            matchPolicy defines how the &quot;rules&quot; list is used to match incoming requests.
            Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the webhook.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the webhook.
            
            Defaults to &quot;Equivalent&quot;
            </param>
            <param name="namespaceSelector">
            NamespaceSelector decides whether to run the webhook on an object based on
            whether the namespace for that object matches the selector. If the object itself
            is a namespace, the matching is performed on object.metadata.labels. If the
            object is another cluster scoped resource, it never skips the webhook.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the webhook on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            for more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </param>
            <param name="objectSelector">
            ObjectSelector decides whether to run the webhook based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the webhook, and is considered to match if
            either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </param>
            <param name="reinvocationPolicy">
            reinvocationPolicy indicates whether this webhook should be called multiple
            times as part of a single admission evaluation. Allowed values are &quot;Never&quot; and
            &quot;IfNeeded&quot;.
            
            Never: the webhook will not be called more than once in a single admission
            evaluation.
            
            IfNeeded: the webhook will be called at least one additional time as part of the
            admission evaluation if the object being admitted is modified by other admission
            plugins after the initial webhook call. Webhooks that specify this option *must*
            be idempotent, able to process objects they previously admitted. Note: * the
            number of additional invocations is not guaranteed to be exactly one. * if
            additional invocations result in further modifications to the object, webhooks
            are not guaranteed to be invoked again. * webhooks that use this option may be
            reordered to minimize the number of additional invocations. * to validate an
            object after all mutations are guaranteed complete, use a validating admission
            webhook instead.
            
            Defaults to &quot;Never&quot;.
            </param>
            <param name="rules">
            Rules describes what operations on what resources/subresources the webhook cares
            about. The webhook cares about an operation if it matches _any_ Rule. However,
            in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks
            from putting the cluster in a state which cannot be recovered from without
            completely disabling the plugin, ValidatingAdmissionWebhooks and
            MutatingAdmissionWebhooks are never called on admission requests for
            ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
            </param>
            <param name="timeoutSeconds">
            TimeoutSeconds specifies the timeout for this webhook. After the timeout passes,
            the webhook call will be ignored or the API call will fail based on the failure
            policy. The timeout value must be between 1 and 30 seconds. Default to 10
            seconds.
            </param>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.AdmissionReviewVersions">
            <summary>
            AdmissionReviewVersions is an ordered list of preferred `AdmissionReview`
            versions the Webhook expects. API server will try to use first version in the
            list which it supports. If none of the versions specified in this list supported
            by API server, validation will fail for this object. If a persisted webhook
            configuration specifies allowed versions and does not include any versions known
            to the API Server, calls to the webhook will fail and be subject to the failure
            policy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.ClientConfig">
            <summary>
            ClientConfig defines how to communicate with the hook. Required
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.FailurePolicy">
            <summary>
            FailurePolicy defines how unrecognized errors from the admission endpoint are
            handled - allowed values are Ignore or Fail. Defaults to Fail.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.MatchConditions">
            <summary>
            MatchConditions is a list of conditions that must be met for a request to be
            sent to this webhook. Match conditions filter requests that have already been
            matched by the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
            2. If ALL matchConditions evaluate to TRUE, the webhook is called.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
            
            This is a beta feature and managed by the AdmissionWebhookMatchConditions
            feature gate.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.MatchPolicy">
            <summary>
            matchPolicy defines how the &quot;rules&quot; list is used to match incoming requests.
            Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the webhook.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the webhook.
            
            Defaults to &quot;Equivalent&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.Name">
            <summary>
            The name of the admission webhook. Name should be fully qualified, e.g.,
            imagepolicy.kubernetes.io, where &quot;imagepolicy&quot; is the name of the webhook, and
            kubernetes.io is the name of the organization. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.NamespaceSelector">
            <summary>
            NamespaceSelector decides whether to run the webhook on an object based on
            whether the namespace for that object matches the selector. If the object itself
            is a namespace, the matching is performed on object.metadata.labels. If the
            object is another cluster scoped resource, it never skips the webhook.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the webhook on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            for more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.ObjectSelector">
            <summary>
            ObjectSelector decides whether to run the webhook based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the webhook, and is considered to match if
            either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.ReinvocationPolicy">
            <summary>
            reinvocationPolicy indicates whether this webhook should be called multiple
            times as part of a single admission evaluation. Allowed values are &quot;Never&quot; and
            &quot;IfNeeded&quot;.
            
            Never: the webhook will not be called more than once in a single admission
            evaluation.
            
            IfNeeded: the webhook will be called at least one additional time as part of the
            admission evaluation if the object being admitted is modified by other admission
            plugins after the initial webhook call. Webhooks that specify this option *must*
            be idempotent, able to process objects they previously admitted. Note: * the
            number of additional invocations is not guaranteed to be exactly one. * if
            additional invocations result in further modifications to the object, webhooks
            are not guaranteed to be invoked again. * webhooks that use this option may be
            reordered to minimize the number of additional invocations. * to validate an
            object after all mutations are guaranteed complete, use a validating admission
            webhook instead.
            
            Defaults to &quot;Never&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.Rules">
            <summary>
            Rules describes what operations on what resources/subresources the webhook cares
            about. The webhook cares about an operation if it matches _any_ Rule. However,
            in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks
            from putting the cluster in a state which cannot be recovered from without
            completely disabling the plugin, ValidatingAdmissionWebhooks and
            MutatingAdmissionWebhooks are never called on admission requests for
            ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.SideEffects">
            <summary>
            SideEffects states whether this webhook has side effects. Acceptable values are:
            None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or
            Unknown). Webhooks with side effects MUST implement a reconciliation system,
            since a request may be rejected by a future step in the admission chain and the
            side effects therefore need to be undone. Requests with the dryRun attribute
            will be auto-rejected if they match a webhook with sideEffects == Unknown or
            Some.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhook.TimeoutSeconds">
            <summary>
            TimeoutSeconds specifies the timeout for this webhook. After the timeout passes,
            the webhook call will be ignored or the API call will fail based on the failure
            policy. The timeout value must be between 1 and 30 seconds. Default to 10
            seconds.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhook.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1MutatingWebhookConfiguration">
            <summary>
            MutatingWebhookConfiguration describes the configuration of and admission
            webhook that accept or reject and may change the object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhookConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1MutatingWebhookConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhookConfiguration.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1MutatingWebhook})">
            <summary>
            Initializes a new instance of the V1MutatingWebhookConfiguration class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </param>
            <param name="webhooks">
            Webhooks is a list of webhooks and the affected resources and operations.
            </param>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfiguration.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfiguration.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfiguration.Metadata">
            <summary>
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfiguration.Webhooks">
            <summary>
            Webhooks is a list of webhooks and the affected resources and operations.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhookConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1MutatingWebhookConfigurationList">
            <summary>
            MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhookConfigurationList.#ctor">
            <summary>
            Initializes a new instance of the V1MutatingWebhookConfigurationList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhookConfigurationList.#ctor(System.Collections.Generic.IList{k8s.Models.V1MutatingWebhookConfiguration},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1MutatingWebhookConfigurationList class.
            </summary>
            <param name="items">
            List of MutatingWebhookConfiguration.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfigurationList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfigurationList.Items">
            <summary>
            List of MutatingWebhookConfiguration.
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfigurationList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1MutatingWebhookConfigurationList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1MutatingWebhookConfigurationList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RuleWithOperations">
            <summary>
            RuleWithOperations is a tuple of Operations and Resources. It is recommended to
            make sure that all the tuple expansions are valid.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuleWithOperations.#ctor">
            <summary>
            Initializes a new instance of the V1RuleWithOperations class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuleWithOperations.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1RuleWithOperations class.
            </summary>
            <param name="apiGroups">
            APIGroups is the API groups the resources belong to. &apos;*&apos; is all groups. If &apos;*&apos;
            is present, the length of the slice must be one. Required.
            </param>
            <param name="apiVersions">
            APIVersions is the API versions the resources belong to. &apos;*&apos; is all versions. If
            &apos;*&apos; is present, the length of the slice must be one. Required.
            </param>
            <param name="operations">
            Operations is the operations the admission hook cares about - CREATE, UPDATE,
            DELETE, CONNECT or * for all of those operations and any future admission
            operations that are added. If &apos;*&apos; is present, the length of the slice must be
            one. Required.
            </param>
            <param name="resources">
            Resources is a list of resources this rule applies to.
            
            For example: &apos;pods&apos; means pods. &apos;pods/log&apos; means the log subresource of pods.
            &apos;*&apos; means all resources, but not subresources. &apos;pods/*&apos; means all subresources
            of pods. &apos;*/scale&apos; means all scale subresources. &apos;*/*&apos; means all resources and
            their subresources.
            
            If wildcard is present, the validation rule will ensure resources do not overlap
            with each other.
            
            Depending on the enclosing object, subresources might not be allowed. Required.
            </param>
            <param name="scope">
            scope specifies the scope of this rule. Valid values are &quot;Cluster&quot;,
            &quot;Namespaced&quot;, and &quot;*&quot; &quot;Cluster&quot; means that only cluster-scoped resources will
            match this rule. Namespace API objects are cluster-scoped. &quot;Namespaced&quot; means
            that only namespaced resources will match this rule. &quot;*&quot; means that there are no
            scope restrictions. Subresources match the scope of their parent resource.
            Default is &quot;*&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1RuleWithOperations.ApiGroups">
            <summary>
            APIGroups is the API groups the resources belong to. &apos;*&apos; is all groups. If &apos;*&apos;
            is present, the length of the slice must be one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuleWithOperations.ApiVersions">
            <summary>
            APIVersions is the API versions the resources belong to. &apos;*&apos; is all versions. If
            &apos;*&apos; is present, the length of the slice must be one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuleWithOperations.Operations">
            <summary>
            Operations is the operations the admission hook cares about - CREATE, UPDATE,
            DELETE, CONNECT or * for all of those operations and any future admission
            operations that are added. If &apos;*&apos; is present, the length of the slice must be
            one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuleWithOperations.Resources">
            <summary>
            Resources is a list of resources this rule applies to.
            
            For example: &apos;pods&apos; means pods. &apos;pods/log&apos; means the log subresource of pods.
            &apos;*&apos; means all resources, but not subresources. &apos;pods/*&apos; means all subresources
            of pods. &apos;*/scale&apos; means all scale subresources. &apos;*/*&apos; means all resources and
            their subresources.
            
            If wildcard is present, the validation rule will ensure resources do not overlap
            with each other.
            
            Depending on the enclosing object, subresources might not be allowed. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuleWithOperations.Scope">
            <summary>
            scope specifies the scope of this rule. Valid values are &quot;Cluster&quot;,
            &quot;Namespaced&quot;, and &quot;*&quot; &quot;Cluster&quot; means that only cluster-scoped resources will
            match this rule. Namespace API objects are cluster-scoped. &quot;Namespaced&quot; means
            that only namespaced resources will match this rule. &quot;*&quot; means that there are no
            scope restrictions. Subresources match the scope of their parent resource.
            Default is &quot;*&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuleWithOperations.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Admissionregistrationv1ServiceReference">
            <summary>
            ServiceReference holds a reference to Service.legacy.k8s.io
            </summary>
        </member>
        <member name="M:k8s.Models.Admissionregistrationv1ServiceReference.#ctor">
            <summary>
            Initializes a new instance of the Admissionregistrationv1ServiceReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.Admissionregistrationv1ServiceReference.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the Admissionregistrationv1ServiceReference class.
            </summary>
            <param name="name">
            `name` is the name of the service. Required
            </param>
            <param name="namespaceProperty">
            `namespace` is the namespace of the service. Required
            </param>
            <param name="path">
            `path` is an optional URL path which will be sent in any request to this
            service.
            </param>
            <param name="port">
            If specified, the port on the service that hosting webhook. Default to 443 for
            backward compatibility. `port` should be a valid port number (1-65535,
            inclusive).
            </param>
        </member>
        <member name="P:k8s.Models.Admissionregistrationv1ServiceReference.Name">
            <summary>
            `name` is the name of the service. Required
            </summary>
        </member>
        <member name="P:k8s.Models.Admissionregistrationv1ServiceReference.NamespaceProperty">
            <summary>
            `namespace` is the namespace of the service. Required
            </summary>
        </member>
        <member name="P:k8s.Models.Admissionregistrationv1ServiceReference.Path">
            <summary>
            `path` is an optional URL path which will be sent in any request to this
            service.
            </summary>
        </member>
        <member name="P:k8s.Models.Admissionregistrationv1ServiceReference.Port">
            <summary>
            If specified, the port on the service that hosting webhook. Default to 443 for
            backward compatibility. `port` should be a valid port number (1-65535,
            inclusive).
            </summary>
        </member>
        <member name="M:k8s.Models.Admissionregistrationv1ServiceReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ValidatingWebhook">
            <summary>
            ValidatingWebhook describes an admission webhook and the resources and
            operations it applies to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhook.#ctor">
            <summary>
            Initializes a new instance of the V1ValidatingWebhook class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhook.#ctor(System.Collections.Generic.IList{System.String},k8s.Models.Admissionregistrationv1WebhookClientConfig,System.String,System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1MatchCondition},System.String,k8s.Models.V1LabelSelector,k8s.Models.V1LabelSelector,System.Collections.Generic.IList{k8s.Models.V1RuleWithOperations},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1ValidatingWebhook class.
            </summary>
            <param name="admissionReviewVersions">
            AdmissionReviewVersions is an ordered list of preferred `AdmissionReview`
            versions the Webhook expects. API server will try to use first version in the
            list which it supports. If none of the versions specified in this list supported
            by API server, validation will fail for this object. If a persisted webhook
            configuration specifies allowed versions and does not include any versions known
            to the API Server, calls to the webhook will fail and be subject to the failure
            policy.
            </param>
            <param name="clientConfig">
            ClientConfig defines how to communicate with the hook. Required
            </param>
            <param name="name">
            The name of the admission webhook. Name should be fully qualified, e.g.,
            imagepolicy.kubernetes.io, where &quot;imagepolicy&quot; is the name of the webhook, and
            kubernetes.io is the name of the organization. Required.
            </param>
            <param name="sideEffects">
            SideEffects states whether this webhook has side effects. Acceptable values are:
            None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or
            Unknown). Webhooks with side effects MUST implement a reconciliation system,
            since a request may be rejected by a future step in the admission chain and the
            side effects therefore need to be undone. Requests with the dryRun attribute
            will be auto-rejected if they match a webhook with sideEffects == Unknown or
            Some.
            </param>
            <param name="failurePolicy">
            FailurePolicy defines how unrecognized errors from the admission endpoint are
            handled - allowed values are Ignore or Fail. Defaults to Fail.
            </param>
            <param name="matchConditions">
            MatchConditions is a list of conditions that must be met for a request to be
            sent to this webhook. Match conditions filter requests that have already been
            matched by the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
            2. If ALL matchConditions evaluate to TRUE, the webhook is called.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
            
            This is a beta feature and managed by the AdmissionWebhookMatchConditions
            feature gate.
            </param>
            <param name="matchPolicy">
            matchPolicy defines how the &quot;rules&quot; list is used to match incoming requests.
            Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the webhook.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the webhook.
            
            Defaults to &quot;Equivalent&quot;
            </param>
            <param name="namespaceSelector">
            NamespaceSelector decides whether to run the webhook on an object based on
            whether the namespace for that object matches the selector. If the object itself
            is a namespace, the matching is performed on object.metadata.labels. If the
            object is another cluster scoped resource, it never skips the webhook.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the webhook on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for
            more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </param>
            <param name="objectSelector">
            ObjectSelector decides whether to run the webhook based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the webhook, and is considered to match if
            either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </param>
            <param name="rules">
            Rules describes what operations on what resources/subresources the webhook cares
            about. The webhook cares about an operation if it matches _any_ Rule. However,
            in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks
            from putting the cluster in a state which cannot be recovered from without
            completely disabling the plugin, ValidatingAdmissionWebhooks and
            MutatingAdmissionWebhooks are never called on admission requests for
            ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
            </param>
            <param name="timeoutSeconds">
            TimeoutSeconds specifies the timeout for this webhook. After the timeout passes,
            the webhook call will be ignored or the API call will fail based on the failure
            policy. The timeout value must be between 1 and 30 seconds. Default to 10
            seconds.
            </param>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.AdmissionReviewVersions">
            <summary>
            AdmissionReviewVersions is an ordered list of preferred `AdmissionReview`
            versions the Webhook expects. API server will try to use first version in the
            list which it supports. If none of the versions specified in this list supported
            by API server, validation will fail for this object. If a persisted webhook
            configuration specifies allowed versions and does not include any versions known
            to the API Server, calls to the webhook will fail and be subject to the failure
            policy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.ClientConfig">
            <summary>
            ClientConfig defines how to communicate with the hook. Required
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.FailurePolicy">
            <summary>
            FailurePolicy defines how unrecognized errors from the admission endpoint are
            handled - allowed values are Ignore or Fail. Defaults to Fail.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.MatchConditions">
            <summary>
            MatchConditions is a list of conditions that must be met for a request to be
            sent to this webhook. Match conditions filter requests that have already been
            matched by the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
            2. If ALL matchConditions evaluate to TRUE, the webhook is called.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
            
            This is a beta feature and managed by the AdmissionWebhookMatchConditions
            feature gate.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.MatchPolicy">
            <summary>
            matchPolicy defines how the &quot;rules&quot; list is used to match incoming requests.
            Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the webhook.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the webhook.
            
            Defaults to &quot;Equivalent&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.Name">
            <summary>
            The name of the admission webhook. Name should be fully qualified, e.g.,
            imagepolicy.kubernetes.io, where &quot;imagepolicy&quot; is the name of the webhook, and
            kubernetes.io is the name of the organization. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.NamespaceSelector">
            <summary>
            NamespaceSelector decides whether to run the webhook on an object based on
            whether the namespace for that object matches the selector. If the object itself
            is a namespace, the matching is performed on object.metadata.labels. If the
            object is another cluster scoped resource, it never skips the webhook.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the webhook on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for
            more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.ObjectSelector">
            <summary>
            ObjectSelector decides whether to run the webhook based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the webhook, and is considered to match if
            either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.Rules">
            <summary>
            Rules describes what operations on what resources/subresources the webhook cares
            about. The webhook cares about an operation if it matches _any_ Rule. However,
            in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks
            from putting the cluster in a state which cannot be recovered from without
            completely disabling the plugin, ValidatingAdmissionWebhooks and
            MutatingAdmissionWebhooks are never called on admission requests for
            ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.SideEffects">
            <summary>
            SideEffects states whether this webhook has side effects. Acceptable values are:
            None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or
            Unknown). Webhooks with side effects MUST implement a reconciliation system,
            since a request may be rejected by a future step in the admission chain and the
            side effects therefore need to be undone. Requests with the dryRun attribute
            will be auto-rejected if they match a webhook with sideEffects == Unknown or
            Some.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhook.TimeoutSeconds">
            <summary>
            TimeoutSeconds specifies the timeout for this webhook. After the timeout passes,
            the webhook call will be ignored or the API call will fail based on the failure
            policy. The timeout value must be between 1 and 30 seconds. Default to 10
            seconds.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhook.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ValidatingWebhookConfiguration">
            <summary>
            ValidatingWebhookConfiguration describes the configuration of and admission
            webhook that accept or reject and object without changing it.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhookConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1ValidatingWebhookConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhookConfiguration.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1ValidatingWebhook})">
            <summary>
            Initializes a new instance of the V1ValidatingWebhookConfiguration class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </param>
            <param name="webhooks">
            Webhooks is a list of webhooks and the affected resources and operations.
            </param>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfiguration.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfiguration.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfiguration.Metadata">
            <summary>
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfiguration.Webhooks">
            <summary>
            Webhooks is a list of webhooks and the affected resources and operations.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhookConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ValidatingWebhookConfigurationList">
            <summary>
            ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhookConfigurationList.#ctor">
            <summary>
            Initializes a new instance of the V1ValidatingWebhookConfigurationList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhookConfigurationList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ValidatingWebhookConfiguration},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ValidatingWebhookConfigurationList class.
            </summary>
            <param name="items">
            List of ValidatingWebhookConfiguration.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfigurationList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfigurationList.Items">
            <summary>
            List of ValidatingWebhookConfiguration.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfigurationList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidatingWebhookConfigurationList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidatingWebhookConfigurationList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Admissionregistrationv1WebhookClientConfig">
            <summary>
            WebhookClientConfig contains the information to make a TLS connection with the
            webhook
            </summary>
        </member>
        <member name="M:k8s.Models.Admissionregistrationv1WebhookClientConfig.#ctor">
            <summary>
            Initializes a new instance of the Admissionregistrationv1WebhookClientConfig class.
            </summary>
        </member>
        <member name="M:k8s.Models.Admissionregistrationv1WebhookClientConfig.#ctor(System.Byte[],k8s.Models.Admissionregistrationv1ServiceReference,System.String)">
            <summary>
            Initializes a new instance of the Admissionregistrationv1WebhookClientConfig class.
            </summary>
            <param name="caBundle">
            `caBundle` is a PEM encoded CA bundle which will be used to validate the
            webhook&apos;s server certificate. If unspecified, system trust roots on the
            apiserver are used.
            </param>
            <param name="service">
            `service` is a reference to the service for this webhook. Either `service` or
            `url` must be specified.
            
            If the webhook is running within the cluster, then you should use `service`.
            </param>
            <param name="url">
            `url` gives the location of the webhook, in standard URL form
            (`scheme://host:port/path`). Exactly one of `url` or `service` must be
            specified.
            
            The `host` should not refer to a service running in the cluster; use the
            `service` field instead. The host might be resolved via external DNS in some
            apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would
            be a layering violation). `host` may also be an IP address.
            
            Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless
            you take great care to run this webhook on all hosts which run an apiserver
            which might need to make calls to this webhook. Such installs are likely to be
            non-portable, i.e., not easy to turn up in a new cluster.
            
            The scheme must be &quot;https&quot;; the URL must begin with &quot;https://&quot;.
            
            A path is optional, and if present may be any string permissible in a URL. You
            may use the path to pass an arbitrary string to the webhook, for example, a
            cluster identifier.
            
            Attempting to use a user or basic auth e.g. &quot;user:password@&quot; is not allowed.
            Fragments (&quot;#...&quot;) and query parameters (&quot;?...&quot;) are not allowed, either.
            </param>
        </member>
        <member name="P:k8s.Models.Admissionregistrationv1WebhookClientConfig.CaBundle">
            <summary>
            `caBundle` is a PEM encoded CA bundle which will be used to validate the
            webhook&apos;s server certificate. If unspecified, system trust roots on the
            apiserver are used.
            </summary>
        </member>
        <member name="P:k8s.Models.Admissionregistrationv1WebhookClientConfig.Service">
            <summary>
            `service` is a reference to the service for this webhook. Either `service` or
            `url` must be specified.
            
            If the webhook is running within the cluster, then you should use `service`.
            </summary>
        </member>
        <member name="P:k8s.Models.Admissionregistrationv1WebhookClientConfig.Url">
            <summary>
            `url` gives the location of the webhook, in standard URL form
            (`scheme://host:port/path`). Exactly one of `url` or `service` must be
            specified.
            
            The `host` should not refer to a service running in the cluster; use the
            `service` field instead. The host might be resolved via external DNS in some
            apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would
            be a layering violation). `host` may also be an IP address.
            
            Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless
            you take great care to run this webhook on all hosts which run an apiserver
            which might need to make calls to this webhook. Such installs are likely to be
            non-portable, i.e., not easy to turn up in a new cluster.
            
            The scheme must be &quot;https&quot;; the URL must begin with &quot;https://&quot;.
            
            A path is optional, and if present may be any string permissible in a URL. You
            may use the path to pass an arbitrary string to the webhook, for example, a
            cluster identifier.
            
            Attempting to use a user or basic auth e.g. &quot;user:password@&quot; is not allowed.
            Fragments (&quot;#...&quot;) and query parameters (&quot;?...&quot;) are not allowed, either.
            </summary>
        </member>
        <member name="M:k8s.Models.Admissionregistrationv1WebhookClientConfig.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1AuditAnnotation">
            <summary>
            AuditAnnotation describes how to produce an audit annotation for an API request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1AuditAnnotation.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1AuditAnnotation class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1AuditAnnotation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1AuditAnnotation class.
            </summary>
            <param name="key">
            key specifies the audit annotation key. The audit annotation keys of a
            ValidatingAdmissionPolicy must be unique. The key must be a qualified name
            ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
            
            The key is combined with the resource name of the ValidatingAdmissionPolicy to
            construct an audit annotation key: &quot;{ValidatingAdmissionPolicy name}/{key}&quot;.
            
            If an admission webhook uses the same resource name as this
            ValidatingAdmissionPolicy and the same audit annotation key, the annotation key
            will be identical. In this case, the first annotation written with the key will
            be included in the audit event and all subsequent annotations with the same key
            will be discarded.
            
            Required.
            </param>
            <param name="valueExpression">
            valueExpression represents the expression which is evaluated by CEL to produce
            an audit annotation value. The expression must evaluate to either a string or
            null value. If the expression evaluates to a string, the audit annotation is
            included with the string value. If the expression evaluates to null or empty
            string the audit annotation will be omitted. The valueExpression may be no
            longer than 5kb in length. If the result of the valueExpression is more than
            10kb in length, it will be truncated to 10kb.
            
            If multiple ValidatingAdmissionPolicyBinding resources match an API request,
            then the valueExpression will be evaluated for each binding. All unique values
            produced by the valueExpressions will be joined together in a comma-separated
            list.
            
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1AuditAnnotation.Key">
            <summary>
            key specifies the audit annotation key. The audit annotation keys of a
            ValidatingAdmissionPolicy must be unique. The key must be a qualified name
            ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
            
            The key is combined with the resource name of the ValidatingAdmissionPolicy to
            construct an audit annotation key: &quot;{ValidatingAdmissionPolicy name}/{key}&quot;.
            
            If an admission webhook uses the same resource name as this
            ValidatingAdmissionPolicy and the same audit annotation key, the annotation key
            will be identical. In this case, the first annotation written with the key will
            be included in the audit event and all subsequent annotations with the same key
            will be discarded.
            
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1AuditAnnotation.ValueExpression">
            <summary>
            valueExpression represents the expression which is evaluated by CEL to produce
            an audit annotation value. The expression must evaluate to either a string or
            null value. If the expression evaluates to a string, the audit annotation is
            included with the string value. If the expression evaluates to null or empty
            string the audit annotation will be omitted. The valueExpression may be no
            longer than 5kb in length. If the result of the valueExpression is more than
            10kb in length, it will be truncated to 10kb.
            
            If multiple ValidatingAdmissionPolicyBinding resources match an API request,
            then the valueExpression will be evaluated for each binding. All unique values
            produced by the valueExpressions will be joined together in a comma-separated
            list.
            
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1AuditAnnotation.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ExpressionWarning">
            <summary>
            ExpressionWarning is a warning information that targets a specific expression.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ExpressionWarning.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ExpressionWarning class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ExpressionWarning.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1ExpressionWarning class.
            </summary>
            <param name="fieldRef">
            The path to the field that refers the expression. For example, the reference to
            the expression of the first item of validations is
            &quot;spec.validations[0].expression&quot;
            </param>
            <param name="warning">
            The content of type checking information in a human-readable form. Each line of
            the warning contains the type that the expression is checked against, followed
            by the type check error from the compiler.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ExpressionWarning.FieldRef">
            <summary>
            The path to the field that refers the expression. For example, the reference to
            the expression of the first item of validations is
            &quot;spec.validations[0].expression&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ExpressionWarning.Warning">
            <summary>
            The content of type checking information in a human-readable form. Each line of
            the warning contains the type that the expression is checked against, followed
            by the type check error from the compiler.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ExpressionWarning.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1MatchCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1MatchCondition.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1MatchCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1MatchCondition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1MatchCondition class.
            </summary>
            <param name="expression">
            Expression represents the expression which will be evaluated by CEL. Must
            evaluate to bool. CEL expressions have access to the contents of the
            AdmissionRequest and Authorizer, organized into CEL variables:
            
            &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. &apos;request&apos; - Attributes of the admission
            request(/pkg/apis/admission/types.go#AdmissionRequest). &apos;authorizer&apos; - A CEL
            Authorizer. May be used to perform authorization checks for the principal (user
            or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
            
            Required.
            </param>
            <param name="name">
            Name is an identifier for this match condition, used for strategic merging of
            MatchConditions, as well as providing an identifier for logging purposes. A good
            name should be descriptive of the associated expression. Name must be a
            qualified name consisting of alphanumeric characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;, and must
            start and end with an alphanumeric character (e.g. &apos;MyName&apos;,  or &apos;my.name&apos;,  or
            &apos;123-abc&apos;, regex used for validation is
            &apos;([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]&apos;) with an optional DNS subdomain
            prefix and &apos;/&apos; (e.g. &apos;example.com/MyName&apos;)
            
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1MatchCondition.Expression">
            <summary>
            Expression represents the expression which will be evaluated by CEL. Must
            evaluate to bool. CEL expressions have access to the contents of the
            AdmissionRequest and Authorizer, organized into CEL variables:
            
            &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. &apos;request&apos; - Attributes of the admission
            request(/pkg/apis/admission/types.go#AdmissionRequest). &apos;authorizer&apos; - A CEL
            Authorizer. May be used to perform authorization checks for the principal (user
            or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
            
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1MatchCondition.Name">
            <summary>
            Name is an identifier for this match condition, used for strategic merging of
            MatchConditions, as well as providing an identifier for logging purposes. A good
            name should be descriptive of the associated expression. Name must be a
            qualified name consisting of alphanumeric characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;, and must
            start and end with an alphanumeric character (e.g. &apos;MyName&apos;,  or &apos;my.name&apos;,  or
            &apos;123-abc&apos;, regex used for validation is
            &apos;([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]&apos;) with an optional DNS subdomain
            prefix and &apos;/&apos; (e.g. &apos;example.com/MyName&apos;)
            
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1MatchCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1MatchResources">
            <summary>
            MatchResources decides whether to run the admission control policy on an object
            based on whether it meets the match criteria. The exclude rules take precedence
            over include rules (if a resource matches both, it is excluded)
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1MatchResources.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1MatchResources class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1MatchResources.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha1NamedRuleWithOperations},System.String,k8s.Models.V1LabelSelector,k8s.Models.V1LabelSelector,System.Collections.Generic.IList{k8s.Models.V1alpha1NamedRuleWithOperations})">
            <summary>
            Initializes a new instance of the V1alpha1MatchResources class.
            </summary>
            <param name="excludeResourceRules">
            ExcludeResourceRules describes what operations on what resources/subresources
            the ValidatingAdmissionPolicy should not care about. The exclude rules take
            precedence over include rules (if a resource matches both, it is excluded)
            </param>
            <param name="matchPolicy">
            matchPolicy defines how the &quot;MatchResources&quot; list is used to match incoming
            requests. Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the ValidatingAdmissionPolicy.
            
            Defaults to &quot;Equivalent&quot;
            </param>
            <param name="namespaceSelector">
            NamespaceSelector decides whether to run the admission control policy on an
            object based on whether the namespace for that object matches the selector. If
            the object itself is a namespace, the matching is performed on
            object.metadata.labels. If the object is another cluster scoped resource, it
            never skips the policy.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the policy on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            for more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </param>
            <param name="objectSelector">
            ObjectSelector decides whether to run the validation based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the cel validation, and is considered to match
            if either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </param>
            <param name="resourceRules">
            ResourceRules describes what operations on what resources/subresources the
            ValidatingAdmissionPolicy matches. The policy cares about an operation if it
            matches _any_ Rule.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1MatchResources.ExcludeResourceRules">
            <summary>
            ExcludeResourceRules describes what operations on what resources/subresources
            the ValidatingAdmissionPolicy should not care about. The exclude rules take
            precedence over include rules (if a resource matches both, it is excluded)
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1MatchResources.MatchPolicy">
            <summary>
            matchPolicy defines how the &quot;MatchResources&quot; list is used to match incoming
            requests. Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the ValidatingAdmissionPolicy.
            
            Defaults to &quot;Equivalent&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1MatchResources.NamespaceSelector">
            <summary>
            NamespaceSelector decides whether to run the admission control policy on an
            object based on whether the namespace for that object matches the selector. If
            the object itself is a namespace, the matching is performed on
            object.metadata.labels. If the object is another cluster scoped resource, it
            never skips the policy.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the policy on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            for more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1MatchResources.ObjectSelector">
            <summary>
            ObjectSelector decides whether to run the validation based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the cel validation, and is considered to match
            if either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1MatchResources.ResourceRules">
            <summary>
            ResourceRules describes what operations on what resources/subresources the
            ValidatingAdmissionPolicy matches. The policy cares about an operation if it
            matches _any_ Rule.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1MatchResources.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1NamedRuleWithOperations">
            <summary>
            NamedRuleWithOperations is a tuple of Operations and Resources with
            ResourceNames.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1NamedRuleWithOperations.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1NamedRuleWithOperations class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1NamedRuleWithOperations.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1alpha1NamedRuleWithOperations class.
            </summary>
            <param name="apiGroups">
            APIGroups is the API groups the resources belong to. &apos;*&apos; is all groups. If &apos;*&apos;
            is present, the length of the slice must be one. Required.
            </param>
            <param name="apiVersions">
            APIVersions is the API versions the resources belong to. &apos;*&apos; is all versions. If
            &apos;*&apos; is present, the length of the slice must be one. Required.
            </param>
            <param name="operations">
            Operations is the operations the admission hook cares about - CREATE, UPDATE,
            DELETE, CONNECT or * for all of those operations and any future admission
            operations that are added. If &apos;*&apos; is present, the length of the slice must be
            one. Required.
            </param>
            <param name="resourceNames">
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.
            </param>
            <param name="resources">
            Resources is a list of resources this rule applies to.
            
            For example: &apos;pods&apos; means pods. &apos;pods/log&apos; means the log subresource of pods.
            &apos;*&apos; means all resources, but not subresources. &apos;pods/*&apos; means all subresources
            of pods. &apos;*/scale&apos; means all scale subresources. &apos;*/*&apos; means all resources and
            their subresources.
            
            If wildcard is present, the validation rule will ensure resources do not overlap
            with each other.
            
            Depending on the enclosing object, subresources might not be allowed. Required.
            </param>
            <param name="scope">
            scope specifies the scope of this rule. Valid values are &quot;Cluster&quot;,
            &quot;Namespaced&quot;, and &quot;*&quot; &quot;Cluster&quot; means that only cluster-scoped resources will
            match this rule. Namespace API objects are cluster-scoped. &quot;Namespaced&quot; means
            that only namespaced resources will match this rule. &quot;*&quot; means that there are no
            scope restrictions. Subresources match the scope of their parent resource.
            Default is &quot;*&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1NamedRuleWithOperations.ApiGroups">
            <summary>
            APIGroups is the API groups the resources belong to. &apos;*&apos; is all groups. If &apos;*&apos;
            is present, the length of the slice must be one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1NamedRuleWithOperations.ApiVersions">
            <summary>
            APIVersions is the API versions the resources belong to. &apos;*&apos; is all versions. If
            &apos;*&apos; is present, the length of the slice must be one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1NamedRuleWithOperations.Operations">
            <summary>
            Operations is the operations the admission hook cares about - CREATE, UPDATE,
            DELETE, CONNECT or * for all of those operations and any future admission
            operations that are added. If &apos;*&apos; is present, the length of the slice must be
            one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1NamedRuleWithOperations.ResourceNames">
            <summary>
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1NamedRuleWithOperations.Resources">
            <summary>
            Resources is a list of resources this rule applies to.
            
            For example: &apos;pods&apos; means pods. &apos;pods/log&apos; means the log subresource of pods.
            &apos;*&apos; means all resources, but not subresources. &apos;pods/*&apos; means all subresources
            of pods. &apos;*/scale&apos; means all scale subresources. &apos;*/*&apos; means all resources and
            their subresources.
            
            If wildcard is present, the validation rule will ensure resources do not overlap
            with each other.
            
            Depending on the enclosing object, subresources might not be allowed. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1NamedRuleWithOperations.Scope">
            <summary>
            scope specifies the scope of this rule. Valid values are &quot;Cluster&quot;,
            &quot;Namespaced&quot;, and &quot;*&quot; &quot;Cluster&quot; means that only cluster-scoped resources will
            match this rule. Namespace API objects are cluster-scoped. &quot;Namespaced&quot; means
            that only namespaced resources will match this rule. &quot;*&quot; means that there are no
            scope restrictions. Subresources match the scope of their parent resource.
            Default is &quot;*&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1NamedRuleWithOperations.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ParamKind">
            <summary>
            ParamKind is a tuple of Group Kind and Version.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParamKind.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ParamKind class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParamKind.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1ParamKind class.
            </summary>
            <param name="apiVersion">
            APIVersion is the API group version the resources belong to. In format of
            &quot;group/version&quot;. Required.
            </param>
            <param name="kind">
            Kind is the API kind the resources belong to. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ParamKind.ApiVersion">
            <summary>
            APIVersion is the API group version the resources belong to. In format of
            &quot;group/version&quot;. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParamKind.Kind">
            <summary>
            Kind is the API kind the resources belong to. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParamKind.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ParamRef">
            <summary>
            ParamRef describes how to locate the params to be used as input to expressions
            of rules applied by a policy binding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParamRef.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ParamRef class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParamRef.#ctor(System.String,System.String,System.String,k8s.Models.V1LabelSelector)">
            <summary>
            Initializes a new instance of the V1alpha1ParamRef class.
            </summary>
            <param name="name">
            `name` is the name of the resource being referenced.
            
            `name` and `selector` are mutually exclusive properties. If one is set, the
            other must be unset.
            </param>
            <param name="namespaceProperty">
            namespace is the namespace of the referenced resource. Allows limiting the
            search for params to a specific namespace. Applies to both `name` and `selector`
            fields.
            
            A per-namespace parameter may be used by specifying a namespace-scoped
            `paramKind` in the policy and leaving this field empty.
            
            - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field
            results in a configuration error.
            
            - If `paramKind` is namespace-scoped, the namespace of the object being
            evaluated for admission will be used when this field is left unset. Take care
            that if this is left empty the binding must not match any cluster-scoped
            resources, which will result in an error.
            </param>
            <param name="parameterNotFoundAction">
            `parameterNotFoundAction` controls the behavior of the binding when the resource
            exists, and name or selector is valid, but there are no parameters matched by
            the binding. If the value is set to `Allow`, then no matched parameters will be
            treated as successful validation by the binding. If set to `Deny`, then no
            matched parameters will be subject to the `failurePolicy` of the policy.
            
            Allowed values are `Allow` or `Deny` Default to `Deny`
            </param>
            <param name="selector">
            selector can be used to match multiple param objects based on their labels.
            Supply selector: {} to match all resources of the ParamKind.
            
            If multiple params are found, they are all evaluated with the policy expressions
            and the results are ANDed together.
            
            One of `name` or `selector` must be set, but `name` and `selector` are mutually
            exclusive properties. If one is set, the other must be unset.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ParamRef.Name">
            <summary>
            `name` is the name of the resource being referenced.
            
            `name` and `selector` are mutually exclusive properties. If one is set, the
            other must be unset.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParamRef.NamespaceProperty">
            <summary>
            namespace is the namespace of the referenced resource. Allows limiting the
            search for params to a specific namespace. Applies to both `name` and `selector`
            fields.
            
            A per-namespace parameter may be used by specifying a namespace-scoped
            `paramKind` in the policy and leaving this field empty.
            
            - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field
            results in a configuration error.
            
            - If `paramKind` is namespace-scoped, the namespace of the object being
            evaluated for admission will be used when this field is left unset. Take care
            that if this is left empty the binding must not match any cluster-scoped
            resources, which will result in an error.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParamRef.ParameterNotFoundAction">
            <summary>
            `parameterNotFoundAction` controls the behavior of the binding when the resource
            exists, and name or selector is valid, but there are no parameters matched by
            the binding. If the value is set to `Allow`, then no matched parameters will be
            treated as successful validation by the binding. If set to `Deny`, then no
            matched parameters will be subject to the `failurePolicy` of the policy.
            
            Allowed values are `Allow` or `Deny` Default to `Deny`
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParamRef.Selector">
            <summary>
            selector can be used to match multiple param objects based on their labels.
            Supply selector: {} to match all resources of the ParamKind.
            
            If multiple params are found, they are all evaluated with the policy expressions
            and the results are ANDed together.
            
            One of `name` or `selector` must be set, but `name` and `selector` are mutually
            exclusive properties. If one is set, the other must be unset.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParamRef.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1TypeChecking">
            <summary>
            TypeChecking contains results of type checking the expressions in the
            ValidatingAdmissionPolicy
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1TypeChecking.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1TypeChecking class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1TypeChecking.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha1ExpressionWarning})">
            <summary>
            Initializes a new instance of the V1alpha1TypeChecking class.
            </summary>
            <param name="expressionWarnings">
            The type checking warnings for each expression.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1TypeChecking.ExpressionWarnings">
            <summary>
            The type checking warnings for each expression.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1TypeChecking.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ValidatingAdmissionPolicy">
            <summary>
            ValidatingAdmissionPolicy describes the definition of an admission validation
            policy that accepts or rejects an object without changing it.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicy.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicy.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha1ValidatingAdmissionPolicySpec,k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus)">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicy class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </param>
            <param name="spec">
            Specification of the desired behavior of the ValidatingAdmissionPolicy.
            </param>
            <param name="status">
            The status of the ValidatingAdmissionPolicy, including warnings that are useful
            to determine if the policy behaves in the expected way. Populated by the system.
            Read-only.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicy.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicy.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicy.Metadata">
            <summary>
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicy.Spec">
            <summary>
            Specification of the desired behavior of the ValidatingAdmissionPolicy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicy.Status">
            <summary>
            The status of the ValidatingAdmissionPolicy, including warnings that are useful
            to determine if the policy behaves in the expected way. Populated by the system.
            Read-only.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding">
            <summary>
            ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with
            paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
            together define how cluster administrators configure policies for clusters.
            
            For a given admission request, each binding will cause its policy to be
            evaluated N times, where N is 1 for policies/bindings that don&apos;t use params,
            otherwise N is the number of parameters selected by the binding.
            
            The CEL expressions of a policy must have a computed CEL cost below the maximum
            CEL budget. Each evaluation of the policy is given an independent CEL cost
            budget. Adding/removing policies, bindings, or params can not affect whether a
            given (policy, binding, param) combination is within its own CEL budget.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyBinding class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec)">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyBinding class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </param>
            <param name="spec">
            Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding.Metadata">
            <summary>
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding.Spec">
            <summary>
            Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList">
            <summary>
            ValidatingAdmissionPolicyBindingList is a list of
            ValidatingAdmissionPolicyBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyBindingList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1alpha1ValidatingAdmissionPolicyBinding},System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyBindingList class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="items">
            List of PolicyBinding.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList.Items">
            <summary>
            List of PolicyBinding.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec">
            <summary>
            ValidatingAdmissionPolicyBindingSpec is the specification of the
            ValidatingAdmissionPolicyBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyBindingSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec.#ctor(k8s.Models.V1alpha1MatchResources,k8s.Models.V1alpha1ParamRef,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyBindingSpec class.
            </summary>
            <param name="matchResources">
            MatchResources declares what resources match this binding and will be validated
            by it. Note that this is intersected with the policy&apos;s matchConstraints, so only
            requests that are matched by the policy can be selected by this. If this is
            unset, all resources matched by the policy are validated by this binding When
            resourceRules is unset, it does not constrain resource matching. If a resource
            is matched by the other fields of this object, it will be validated. Note that
            this is differs from ValidatingAdmissionPolicy matchConstraints, where
            resourceRules are required.
            </param>
            <param name="paramRef">
            paramRef specifies the parameter resource used to configure the admission
            control policy. It should point to a resource of the type specified in ParamKind
            of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and
            the resource referred to by ParamRef does not exist, this binding is considered
            mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
            If the policy does not specify a ParamKind then this field is ignored, and the
            rules are evaluated without a param.
            </param>
            <param name="policyName">
            PolicyName references a ValidatingAdmissionPolicy name which the
            ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not
            exist, this binding is considered invalid and will be ignored Required.
            </param>
            <param name="validationActions">
            validationActions declares how Validations of the referenced
            ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is
            always enforced according to these actions.
            
            Failures defined by the ValidatingAdmissionPolicy&apos;s FailurePolicy are enforced
            according to these actions only if the FailurePolicy is set to Fail, otherwise
            the failures are ignored. This includes compilation errors, runtime errors and
            misconfigurations of the policy.
            
            validationActions is declared as a set of action values. Order does not matter.
            validationActions may not contain duplicates of the same action.
            
            The supported actions values are:
            
            &quot;Deny&quot; specifies that a validation failure results in a denied request.
            
            &quot;Warn&quot; specifies that a validation failure is reported to the request client in
            HTTP Warning headers, with a warning code of 299. Warnings can be sent both for
            allowed or denied admission responses.
            
            &quot;Audit&quot; specifies that a validation failure is included in the published audit
            event for the request. The audit event will contain a
            `validation.policy.admission.k8s.io/validation_failure` audit annotation with a
            value containing the details of the validation failures, formatted as a JSON
            list of objects, each with the following fields: - message: The validation
            failure message string - policy: The resource name of the
            ValidatingAdmissionPolicy - binding: The resource name of the
            ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed
            validations in the ValidatingAdmissionPolicy - validationActions: The
            enforcement actions enacted for the validation failure Example audit annotation:
            `&quot;validation.policy.admission.k8s.io/validation_failure&quot;: &quot;[{&quot;message&quot;: &quot;Invalid
            value&quot;, {&quot;policy&quot;: &quot;policy.example.com&quot;, {&quot;binding&quot;:
            &quot;policybinding.example.com&quot;, {&quot;expressionIndex&quot;: &quot;1&quot;, {&quot;validationActions&quot;:
            [&quot;Audit&quot;]}]&quot;`
            
            Clients should expect to handle additional values by ignoring any values not
            recognized.
            
            &quot;Deny&quot; and &quot;Warn&quot; may not be used together since this combination needlessly
            duplicates the validation failure both in the API response body and the HTTP
            warning headers.
            
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec.MatchResources">
            <summary>
            MatchResources declares what resources match this binding and will be validated
            by it. Note that this is intersected with the policy&apos;s matchConstraints, so only
            requests that are matched by the policy can be selected by this. If this is
            unset, all resources matched by the policy are validated by this binding When
            resourceRules is unset, it does not constrain resource matching. If a resource
            is matched by the other fields of this object, it will be validated. Note that
            this is differs from ValidatingAdmissionPolicy matchConstraints, where
            resourceRules are required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec.ParamRef">
            <summary>
            paramRef specifies the parameter resource used to configure the admission
            control policy. It should point to a resource of the type specified in ParamKind
            of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and
            the resource referred to by ParamRef does not exist, this binding is considered
            mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
            If the policy does not specify a ParamKind then this field is ignored, and the
            rules are evaluated without a param.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec.PolicyName">
            <summary>
            PolicyName references a ValidatingAdmissionPolicy name which the
            ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not
            exist, this binding is considered invalid and will be ignored Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec.ValidationActions">
            <summary>
            validationActions declares how Validations of the referenced
            ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is
            always enforced according to these actions.
            
            Failures defined by the ValidatingAdmissionPolicy&apos;s FailurePolicy are enforced
            according to these actions only if the FailurePolicy is set to Fail, otherwise
            the failures are ignored. This includes compilation errors, runtime errors and
            misconfigurations of the policy.
            
            validationActions is declared as a set of action values. Order does not matter.
            validationActions may not contain duplicates of the same action.
            
            The supported actions values are:
            
            &quot;Deny&quot; specifies that a validation failure results in a denied request.
            
            &quot;Warn&quot; specifies that a validation failure is reported to the request client in
            HTTP Warning headers, with a warning code of 299. Warnings can be sent both for
            allowed or denied admission responses.
            
            &quot;Audit&quot; specifies that a validation failure is included in the published audit
            event for the request. The audit event will contain a
            `validation.policy.admission.k8s.io/validation_failure` audit annotation with a
            value containing the details of the validation failures, formatted as a JSON
            list of objects, each with the following fields: - message: The validation
            failure message string - policy: The resource name of the
            ValidatingAdmissionPolicy - binding: The resource name of the
            ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed
            validations in the ValidatingAdmissionPolicy - validationActions: The
            enforcement actions enacted for the validation failure Example audit annotation:
            `&quot;validation.policy.admission.k8s.io/validation_failure&quot;: &quot;[{&quot;message&quot;: &quot;Invalid
            value&quot;, {&quot;policy&quot;: &quot;policy.example.com&quot;, {&quot;binding&quot;:
            &quot;policybinding.example.com&quot;, {&quot;expressionIndex&quot;: &quot;1&quot;, {&quot;validationActions&quot;:
            [&quot;Audit&quot;]}]&quot;`
            
            Clients should expect to handle additional values by ignoring any values not
            recognized.
            
            &quot;Deny&quot; and &quot;Warn&quot; may not be used together since this combination needlessly
            duplicates the validation failure both in the API response body and the HTTP
            warning headers.
            
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyBindingSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ValidatingAdmissionPolicyList">
            <summary>
            ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyList.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1alpha1ValidatingAdmissionPolicy},System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyList class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="items">
            List of ValidatingAdmissionPolicy.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyList.Items">
            <summary>
            List of ValidatingAdmissionPolicy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec">
            <summary>
            ValidatingAdmissionPolicySpec is the specification of the desired behavior of
            the AdmissionPolicy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicySpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha1AuditAnnotation},System.String,System.Collections.Generic.IList{k8s.Models.V1alpha1MatchCondition},k8s.Models.V1alpha1MatchResources,k8s.Models.V1alpha1ParamKind,System.Collections.Generic.IList{k8s.Models.V1alpha1Validation},System.Collections.Generic.IList{k8s.Models.V1alpha1Variable})">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicySpec class.
            </summary>
            <param name="auditAnnotations">
            auditAnnotations contains CEL expressions which are used to produce audit
            annotations for the audit event of the API request. validations and
            auditAnnotations may not both be empty; a least one of validations or
            auditAnnotations is required.
            </param>
            <param name="failurePolicy">
            failurePolicy defines how to handle failures for the admission policy. Failures
            can occur from CEL expression parse errors, type check errors, runtime errors
            and invalid or mis-configured policy definitions or bindings.
            
            A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding
            is invalid if spec.paramRef.name refers to a non-existent resource.
            
            failurePolicy does not define how validations that evaluate to false are
            handled.
            
            When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding
            validationActions define how failures are enforced.
            
            Allowed values are Ignore or Fail. Defaults to Fail.
            </param>
            <param name="matchConditions">
            MatchConditions is a list of conditions that must be met for a request to be
            validated. Match conditions filter requests that have already been matched by
            the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            If a parameter object is provided, it can be accessed via the `params` handle in
            the same manner as validation expressions.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
            2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the policy is skipped
            </param>
            <param name="matchConstraints">
            MatchConstraints specifies what resources this policy is designed to validate.
            The AdmissionPolicy cares about a request if it matches _all_ Constraints.
            However, in order to prevent clusters from being put into an unstable state that
            cannot be recovered from via the API ValidatingAdmissionPolicy cannot match
            ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
            </param>
            <param name="paramKind">
            ParamKind specifies the kind of resources used to parameterize this policy. If
            absent, there are no parameters for this policy and the param CEL variable will
            not be provided to validation expressions. If ParamKind refers to a non-existent
            kind, this policy definition is mis-configured and the FailurePolicy is applied.
            If paramKind is specified but paramRef is unset in
            ValidatingAdmissionPolicyBinding, the params variable will be null.
            </param>
            <param name="validations">
            Validations contain CEL expressions which is used to apply the validation.
            Validations and AuditAnnotations may not both be empty; a minimum of one
            Validations or AuditAnnotations is required.
            </param>
            <param name="variables">
            Variables contain definitions of variables that can be used in composition of
            other expressions. Each variable is defined as a named CEL expression. The
            variables defined here will be available under `variables` in other expressions
            of the policy except MatchConditions because MatchConditions are evaluated
            before the rest of the policy.
            
            The expression of a variable can refer to other variables defined earlier in the
            list but not those after. Thus, Variables must be sorted by the order of first
            appearance and acyclic.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.AuditAnnotations">
            <summary>
            auditAnnotations contains CEL expressions which are used to produce audit
            annotations for the audit event of the API request. validations and
            auditAnnotations may not both be empty; a least one of validations or
            auditAnnotations is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.FailurePolicy">
            <summary>
            failurePolicy defines how to handle failures for the admission policy. Failures
            can occur from CEL expression parse errors, type check errors, runtime errors
            and invalid or mis-configured policy definitions or bindings.
            
            A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding
            is invalid if spec.paramRef.name refers to a non-existent resource.
            
            failurePolicy does not define how validations that evaluate to false are
            handled.
            
            When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding
            validationActions define how failures are enforced.
            
            Allowed values are Ignore or Fail. Defaults to Fail.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.MatchConditions">
            <summary>
            MatchConditions is a list of conditions that must be met for a request to be
            validated. Match conditions filter requests that have already been matched by
            the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            If a parameter object is provided, it can be accessed via the `params` handle in
            the same manner as validation expressions.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
            2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the policy is skipped
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.MatchConstraints">
            <summary>
            MatchConstraints specifies what resources this policy is designed to validate.
            The AdmissionPolicy cares about a request if it matches _all_ Constraints.
            However, in order to prevent clusters from being put into an unstable state that
            cannot be recovered from via the API ValidatingAdmissionPolicy cannot match
            ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.ParamKind">
            <summary>
            ParamKind specifies the kind of resources used to parameterize this policy. If
            absent, there are no parameters for this policy and the param CEL variable will
            not be provided to validation expressions. If ParamKind refers to a non-existent
            kind, this policy definition is mis-configured and the FailurePolicy is applied.
            If paramKind is specified but paramRef is unset in
            ValidatingAdmissionPolicyBinding, the params variable will be null.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.Validations">
            <summary>
            Validations contain CEL expressions which is used to apply the validation.
            Validations and AuditAnnotations may not both be empty; a minimum of one
            Validations or AuditAnnotations is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.Variables">
            <summary>
            Variables contain definitions of variables that can be used in composition of
            other expressions. Each variable is defined as a named CEL expression. The
            variables defined here will be available under `variables` in other expressions
            of the policy except MatchConditions because MatchConditions are evaluated
            before the rest of the policy.
            
            The expression of a variable can refer to other variables defined earlier in the
            list but not those after. Thus, Variables must be sorted by the order of first
            appearance and acyclic.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicySpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus">
            <summary>
            ValidatingAdmissionPolicyStatus represents the status of a
            ValidatingAdmissionPolicy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1Condition},System.Nullable{System.Int64},k8s.Models.V1alpha1TypeChecking)">
            <summary>
            Initializes a new instance of the V1alpha1ValidatingAdmissionPolicyStatus class.
            </summary>
            <param name="conditions">
            The conditions represent the latest available observations of a policy&apos;s current
            state.
            </param>
            <param name="observedGeneration">
            The generation observed by the controller.
            </param>
            <param name="typeChecking">
            The results of type checking for each expression. Presence of this field
            indicates the completion of the type checking.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus.Conditions">
            <summary>
            The conditions represent the latest available observations of a policy&apos;s current
            state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus.ObservedGeneration">
            <summary>
            The generation observed by the controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus.TypeChecking">
            <summary>
            The results of type checking for each expression. Presence of this field
            indicates the completion of the type checking.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ValidatingAdmissionPolicyStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1Validation">
            <summary>
            Validation specifies the CEL expression which is used to apply the validation.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1Validation.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1Validation class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1Validation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1Validation class.
            </summary>
            <param name="expression">
            Expression represents the expression which will be evaluated by CEL. ref:
            https://github.com/google/cel-spec CEL expressions have access to the contents
            of the API request/response, organized into CEL variables as well as some other
            useful variables:
            
            - &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. - &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. - &apos;request&apos; - Attributes of the API
            request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - &apos;params&apos; -
            Parameter resource referred to by the policy binding being evaluated. Only
            populated if the policy has a ParamKind. - &apos;namespaceObject&apos; - The namespace
            object that the incoming object belongs to. The value is null for cluster-scoped
            resources. - &apos;variables&apos; - Map of composited variables, from its name to its
            lazily evaluated value.
            For example, a variable named &apos;foo&apos; can be accessed as &apos;variables.foo&apos;.
            - &apos;authorizer&apos; - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            - &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            
            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
            accessible from the root of the object. No other metadata properties are
            accessible.
            
            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
            Accessible property names are escaped according to the following rules when
            accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
            &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
            names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
            keywords are:
            &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
            &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
            &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
            Examples:
            - Expression accessing a property named &quot;namespace&quot;: {&quot;Expression&quot;:
            &quot;object.__namespace__ &gt; 0&quot;}
            - Expression accessing a property named &quot;x-prop&quot;: {&quot;Expression&quot;:
            &quot;object.x__dash__prop &gt; 0&quot;}
            - Expression accessing a property named &quot;redact__d&quot;: {&quot;Expression&quot;:
            &quot;object.redact__underscores__d &gt; 0&quot;}
            
            Equality on arrays with list type of &apos;set&apos; or &apos;map&apos; ignores element order, i.e.
            [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the
            semantics of the list type:
            - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
            `X` are preserved and
            non-intersecting elements in `Y` are appended, retaining their partial order.
            - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values
            are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
            Elements in `Y` with
            non-intersecting keys are appended, retaining their partial order.
            Required.
            </param>
            <param name="message">
            Message represents the message displayed when validation fails. The message is
            required if the Expression contains line breaks. The message must not contain
            line breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL
            with the host matching spec.host&quot; If the Expression contains line breaks.
            Message is required. The message must not contain line breaks. If unset, the
            message is &quot;failed Expression: {Expression}&quot;.
            </param>
            <param name="messageExpression">
            messageExpression declares a CEL expression that evaluates to the validation
            failure message that is returned when this rule fails. Since messageExpression
            is used as a failure message, it must evaluate to a string. If both message and
            messageExpression are present on a validation, then messageExpression will be
            used if validation fails. If messageExpression results in a runtime error, the
            runtime error is logged, and the validation failure message is produced as if
            the messageExpression field were unset. If messageExpression evaluates to an
            empty string, a string with only spaces, or a string that contains line breaks,
            then the validation failure message will also be produced as if the
            messageExpression field were unset, and the fact that messageExpression produced
            an empty string/string with only spaces/string with line breaks will be logged.
            messageExpression has access to all the same variables as the `expression`
            except for &apos;authorizer&apos; and &apos;authorizer.requestResource&apos;. Example: &quot;object.x
            must be less than max (&quot;+string(params.max)+&quot;)&quot;
            </param>
            <param name="reason">
            Reason represents a machine-readable description of why this validation failed.
            If this is the first validation in the list to fail, this reason, as well as the
            corresponding HTTP response code, are used in the HTTP response to the client.
            The currently supported reasons are: &quot;Unauthorized&quot;, &quot;Forbidden&quot;, &quot;Invalid&quot;,
            &quot;RequestEntityTooLarge&quot;. If not set, StatusReasonInvalid is used in the response
            to the client.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1Validation.Expression">
            <summary>
            Expression represents the expression which will be evaluated by CEL. ref:
            https://github.com/google/cel-spec CEL expressions have access to the contents
            of the API request/response, organized into CEL variables as well as some other
            useful variables:
            
            - &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. - &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. - &apos;request&apos; - Attributes of the API
            request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - &apos;params&apos; -
            Parameter resource referred to by the policy binding being evaluated. Only
            populated if the policy has a ParamKind. - &apos;namespaceObject&apos; - The namespace
            object that the incoming object belongs to. The value is null for cluster-scoped
            resources. - &apos;variables&apos; - Map of composited variables, from its name to its
            lazily evaluated value.
            For example, a variable named &apos;foo&apos; can be accessed as &apos;variables.foo&apos;.
            - &apos;authorizer&apos; - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            - &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            
            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
            accessible from the root of the object. No other metadata properties are
            accessible.
            
            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
            Accessible property names are escaped according to the following rules when
            accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
            &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
            names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
            keywords are:
            &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
            &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
            &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
            Examples:
            - Expression accessing a property named &quot;namespace&quot;: {&quot;Expression&quot;:
            &quot;object.__namespace__ &gt; 0&quot;}
            - Expression accessing a property named &quot;x-prop&quot;: {&quot;Expression&quot;:
            &quot;object.x__dash__prop &gt; 0&quot;}
            - Expression accessing a property named &quot;redact__d&quot;: {&quot;Expression&quot;:
            &quot;object.redact__underscores__d &gt; 0&quot;}
            
            Equality on arrays with list type of &apos;set&apos; or &apos;map&apos; ignores element order, i.e.
            [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the
            semantics of the list type:
            - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
            `X` are preserved and
            non-intersecting elements in `Y` are appended, retaining their partial order.
            - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values
            are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
            Elements in `Y` with
            non-intersecting keys are appended, retaining their partial order.
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1Validation.Message">
            <summary>
            Message represents the message displayed when validation fails. The message is
            required if the Expression contains line breaks. The message must not contain
            line breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL
            with the host matching spec.host&quot; If the Expression contains line breaks.
            Message is required. The message must not contain line breaks. If unset, the
            message is &quot;failed Expression: {Expression}&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1Validation.MessageExpression">
            <summary>
            messageExpression declares a CEL expression that evaluates to the validation
            failure message that is returned when this rule fails. Since messageExpression
            is used as a failure message, it must evaluate to a string. If both message and
            messageExpression are present on a validation, then messageExpression will be
            used if validation fails. If messageExpression results in a runtime error, the
            runtime error is logged, and the validation failure message is produced as if
            the messageExpression field were unset. If messageExpression evaluates to an
            empty string, a string with only spaces, or a string that contains line breaks,
            then the validation failure message will also be produced as if the
            messageExpression field were unset, and the fact that messageExpression produced
            an empty string/string with only spaces/string with line breaks will be logged.
            messageExpression has access to all the same variables as the `expression`
            except for &apos;authorizer&apos; and &apos;authorizer.requestResource&apos;. Example: &quot;object.x
            must be less than max (&quot;+string(params.max)+&quot;)&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1Validation.Reason">
            <summary>
            Reason represents a machine-readable description of why this validation failed.
            If this is the first validation in the list to fail, this reason, as well as the
            corresponding HTTP response code, are used in the HTTP response to the client.
            The currently supported reasons are: &quot;Unauthorized&quot;, &quot;Forbidden&quot;, &quot;Invalid&quot;,
            &quot;RequestEntityTooLarge&quot;. If not set, StatusReasonInvalid is used in the response
            to the client.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1Validation.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1Variable">
            <summary>
            Variable is the definition of a variable that is used for composition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1Variable.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1Variable class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1Variable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1Variable class.
            </summary>
            <param name="expression">
            Expression is the expression that will be evaluated as the value of the
            variable. The CEL expression has access to the same identifiers as the CEL
            expressions in Validation.
            </param>
            <param name="name">
            Name is the name of the variable. The name must be a valid CEL identifier and
            unique among all variables. The variable can be accessed in other expressions
            through `variables` For example, if name is &quot;foo&quot;, the variable will be
            available as `variables.foo`
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1Variable.Expression">
            <summary>
            Expression is the expression that will be evaluated as the value of the
            variable. The CEL expression has access to the same identifiers as the CEL
            expressions in Validation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1Variable.Name">
            <summary>
            Name is the name of the variable. The name must be a valid CEL identifier and
            unique among all variables. The variable can be accessed in other expressions
            through `variables` For example, if name is &quot;foo&quot;, the variable will be
            available as `variables.foo`
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1Variable.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1AuditAnnotation">
            <summary>
            AuditAnnotation describes how to produce an audit annotation for an API request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1AuditAnnotation.#ctor">
            <summary>
            Initializes a new instance of the V1beta1AuditAnnotation class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1AuditAnnotation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta1AuditAnnotation class.
            </summary>
            <param name="key">
            key specifies the audit annotation key. The audit annotation keys of a
            ValidatingAdmissionPolicy must be unique. The key must be a qualified name
            ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
            
            The key is combined with the resource name of the ValidatingAdmissionPolicy to
            construct an audit annotation key: &quot;{ValidatingAdmissionPolicy name}/{key}&quot;.
            
            If an admission webhook uses the same resource name as this
            ValidatingAdmissionPolicy and the same audit annotation key, the annotation key
            will be identical. In this case, the first annotation written with the key will
            be included in the audit event and all subsequent annotations with the same key
            will be discarded.
            
            Required.
            </param>
            <param name="valueExpression">
            valueExpression represents the expression which is evaluated by CEL to produce
            an audit annotation value. The expression must evaluate to either a string or
            null value. If the expression evaluates to a string, the audit annotation is
            included with the string value. If the expression evaluates to null or empty
            string the audit annotation will be omitted. The valueExpression may be no
            longer than 5kb in length. If the result of the valueExpression is more than
            10kb in length, it will be truncated to 10kb.
            
            If multiple ValidatingAdmissionPolicyBinding resources match an API request,
            then the valueExpression will be evaluated for each binding. All unique values
            produced by the valueExpressions will be joined together in a comma-separated
            list.
            
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1AuditAnnotation.Key">
            <summary>
            key specifies the audit annotation key. The audit annotation keys of a
            ValidatingAdmissionPolicy must be unique. The key must be a qualified name
            ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
            
            The key is combined with the resource name of the ValidatingAdmissionPolicy to
            construct an audit annotation key: &quot;{ValidatingAdmissionPolicy name}/{key}&quot;.
            
            If an admission webhook uses the same resource name as this
            ValidatingAdmissionPolicy and the same audit annotation key, the annotation key
            will be identical. In this case, the first annotation written with the key will
            be included in the audit event and all subsequent annotations with the same key
            will be discarded.
            
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1AuditAnnotation.ValueExpression">
            <summary>
            valueExpression represents the expression which is evaluated by CEL to produce
            an audit annotation value. The expression must evaluate to either a string or
            null value. If the expression evaluates to a string, the audit annotation is
            included with the string value. If the expression evaluates to null or empty
            string the audit annotation will be omitted. The valueExpression may be no
            longer than 5kb in length. If the result of the valueExpression is more than
            10kb in length, it will be truncated to 10kb.
            
            If multiple ValidatingAdmissionPolicyBinding resources match an API request,
            then the valueExpression will be evaluated for each binding. All unique values
            produced by the valueExpressions will be joined together in a comma-separated
            list.
            
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1AuditAnnotation.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ExpressionWarning">
            <summary>
            ExpressionWarning is a warning information that targets a specific expression.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ExpressionWarning.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ExpressionWarning class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ExpressionWarning.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta1ExpressionWarning class.
            </summary>
            <param name="fieldRef">
            The path to the field that refers the expression. For example, the reference to
            the expression of the first item of validations is
            &quot;spec.validations[0].expression&quot;
            </param>
            <param name="warning">
            The content of type checking information in a human-readable form. Each line of
            the warning contains the type that the expression is checked against, followed
            by the type check error from the compiler.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ExpressionWarning.FieldRef">
            <summary>
            The path to the field that refers the expression. For example, the reference to
            the expression of the first item of validations is
            &quot;spec.validations[0].expression&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ExpressionWarning.Warning">
            <summary>
            The content of type checking information in a human-readable form. Each line of
            the warning contains the type that the expression is checked against, followed
            by the type check error from the compiler.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ExpressionWarning.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1MatchCondition">
            <summary>
            MatchCondition represents a condition which must be fulfilled for a request to
            be sent to a webhook.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1MatchCondition.#ctor">
            <summary>
            Initializes a new instance of the V1beta1MatchCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1MatchCondition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta1MatchCondition class.
            </summary>
            <param name="expression">
            Expression represents the expression which will be evaluated by CEL. Must
            evaluate to bool. CEL expressions have access to the contents of the
            AdmissionRequest and Authorizer, organized into CEL variables:
            
            &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. &apos;request&apos; - Attributes of the admission
            request(/pkg/apis/admission/types.go#AdmissionRequest). &apos;authorizer&apos; - A CEL
            Authorizer. May be used to perform authorization checks for the principal (user
            or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
            
            Required.
            </param>
            <param name="name">
            Name is an identifier for this match condition, used for strategic merging of
            MatchConditions, as well as providing an identifier for logging purposes. A good
            name should be descriptive of the associated expression. Name must be a
            qualified name consisting of alphanumeric characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;, and must
            start and end with an alphanumeric character (e.g. &apos;MyName&apos;,  or &apos;my.name&apos;,  or
            &apos;123-abc&apos;, regex used for validation is
            &apos;([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]&apos;) with an optional DNS subdomain
            prefix and &apos;/&apos; (e.g. &apos;example.com/MyName&apos;)
            
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1MatchCondition.Expression">
            <summary>
            Expression represents the expression which will be evaluated by CEL. Must
            evaluate to bool. CEL expressions have access to the contents of the
            AdmissionRequest and Authorizer, organized into CEL variables:
            
            &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. &apos;request&apos; - Attributes of the admission
            request(/pkg/apis/admission/types.go#AdmissionRequest). &apos;authorizer&apos; - A CEL
            Authorizer. May be used to perform authorization checks for the principal (user
            or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
            
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1MatchCondition.Name">
            <summary>
            Name is an identifier for this match condition, used for strategic merging of
            MatchConditions, as well as providing an identifier for logging purposes. A good
            name should be descriptive of the associated expression. Name must be a
            qualified name consisting of alphanumeric characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;, and must
            start and end with an alphanumeric character (e.g. &apos;MyName&apos;,  or &apos;my.name&apos;,  or
            &apos;123-abc&apos;, regex used for validation is
            &apos;([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]&apos;) with an optional DNS subdomain
            prefix and &apos;/&apos; (e.g. &apos;example.com/MyName&apos;)
            
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1MatchCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1MatchResources">
            <summary>
            MatchResources decides whether to run the admission control policy on an object
            based on whether it meets the match criteria. The exclude rules take precedence
            over include rules (if a resource matches both, it is excluded)
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1MatchResources.#ctor">
            <summary>
            Initializes a new instance of the V1beta1MatchResources class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1MatchResources.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta1NamedRuleWithOperations},System.String,k8s.Models.V1LabelSelector,k8s.Models.V1LabelSelector,System.Collections.Generic.IList{k8s.Models.V1beta1NamedRuleWithOperations})">
            <summary>
            Initializes a new instance of the V1beta1MatchResources class.
            </summary>
            <param name="excludeResourceRules">
            ExcludeResourceRules describes what operations on what resources/subresources
            the ValidatingAdmissionPolicy should not care about. The exclude rules take
            precedence over include rules (if a resource matches both, it is excluded)
            </param>
            <param name="matchPolicy">
            matchPolicy defines how the &quot;MatchResources&quot; list is used to match incoming
            requests. Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the ValidatingAdmissionPolicy.
            
            Defaults to &quot;Equivalent&quot;
            </param>
            <param name="namespaceSelector">
            NamespaceSelector decides whether to run the admission control policy on an
            object based on whether the namespace for that object matches the selector. If
            the object itself is a namespace, the matching is performed on
            object.metadata.labels. If the object is another cluster scoped resource, it
            never skips the policy.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the policy on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            for more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </param>
            <param name="objectSelector">
            ObjectSelector decides whether to run the validation based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the cel validation, and is considered to match
            if either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </param>
            <param name="resourceRules">
            ResourceRules describes what operations on what resources/subresources the
            ValidatingAdmissionPolicy matches. The policy cares about an operation if it
            matches _any_ Rule.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1MatchResources.ExcludeResourceRules">
            <summary>
            ExcludeResourceRules describes what operations on what resources/subresources
            the ValidatingAdmissionPolicy should not care about. The exclude rules take
            precedence over include rules (if a resource matches both, it is excluded)
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1MatchResources.MatchPolicy">
            <summary>
            matchPolicy defines how the &quot;MatchResources&quot; list is used to match incoming
            requests. Allowed values are &quot;Exact&quot; or &quot;Equivalent&quot;.
            
            - Exact: match a request only if it exactly matches a specified rule. For
            example, if deployments can be modified via apps/v1, apps/v1beta1, and
            extensions/v1beta1, but &quot;rules&quot; only included `apiGroups:[&quot;apps&quot;],
            apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request to apps/v1beta1 or
            extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
            
            - Equivalent: match a request if modifies a resource listed in rules, even via
            another API group or version. For example, if deployments can be modified via
            apps/v1, apps/v1beta1, and extensions/v1beta1, and &quot;rules&quot; only included
            `apiGroups:[&quot;apps&quot;], apiVersions:[&quot;v1&quot;], resources: [&quot;deployments&quot;]`, a request
            to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
            the ValidatingAdmissionPolicy.
            
            Defaults to &quot;Equivalent&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1MatchResources.NamespaceSelector">
            <summary>
            NamespaceSelector decides whether to run the admission control policy on an
            object based on whether the namespace for that object matches the selector. If
            the object itself is a namespace, the matching is performed on
            object.metadata.labels. If the object is another cluster scoped resource, it
            never skips the policy.
            
            For example, to run the webhook on any objects whose namespace is not associated
            with &quot;runlevel&quot; of &quot;0&quot; or &quot;1&quot;;  you will set the selector as follows:
            &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;runlevel&quot;,
            &quot;operator&quot;: &quot;NotIn&quot;,
            &quot;values&quot;: [
            &quot;0&quot;,
            &quot;1&quot;
            ]
            }
            ]
            }
            
            If instead you want to only run the policy on any objects whose namespace is
            associated with the &quot;environment&quot; of &quot;prod&quot; or &quot;staging&quot;; you will set the
            selector as follows: &quot;namespaceSelector&quot;: {
            &quot;matchExpressions&quot;: [
            {
            &quot;key&quot;: &quot;environment&quot;,
            &quot;operator&quot;: &quot;In&quot;,
            &quot;values&quot;: [
            &quot;prod&quot;,
            &quot;staging&quot;
            ]
            }
            ]
            }
            
            See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            for more examples of label selectors.
            
            Default to the empty LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1MatchResources.ObjectSelector">
            <summary>
            ObjectSelector decides whether to run the validation based on if the object has
            matching labels. objectSelector is evaluated against both the oldObject and
            newObject that would be sent to the cel validation, and is considered to match
            if either object matches the selector. A null object (oldObject in the case of
            create, or newObject in the case of delete) or an object that cannot have labels
            (like a DeploymentRollback or a PodProxyOptions object) is not considered to
            match. Use the object selector only if the webhook is opt-in, because end users
            may skip the admission webhook by setting the labels. Default to the empty
            LabelSelector, which matches everything.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1MatchResources.ResourceRules">
            <summary>
            ResourceRules describes what operations on what resources/subresources the
            ValidatingAdmissionPolicy matches. The policy cares about an operation if it
            matches _any_ Rule.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1MatchResources.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1NamedRuleWithOperations">
            <summary>
            NamedRuleWithOperations is a tuple of Operations and Resources with
            ResourceNames.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1NamedRuleWithOperations.#ctor">
            <summary>
            Initializes a new instance of the V1beta1NamedRuleWithOperations class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1NamedRuleWithOperations.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1beta1NamedRuleWithOperations class.
            </summary>
            <param name="apiGroups">
            APIGroups is the API groups the resources belong to. &apos;*&apos; is all groups. If &apos;*&apos;
            is present, the length of the slice must be one. Required.
            </param>
            <param name="apiVersions">
            APIVersions is the API versions the resources belong to. &apos;*&apos; is all versions. If
            &apos;*&apos; is present, the length of the slice must be one. Required.
            </param>
            <param name="operations">
            Operations is the operations the admission hook cares about - CREATE, UPDATE,
            DELETE, CONNECT or * for all of those operations and any future admission
            operations that are added. If &apos;*&apos; is present, the length of the slice must be
            one. Required.
            </param>
            <param name="resourceNames">
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.
            </param>
            <param name="resources">
            Resources is a list of resources this rule applies to.
            
            For example: &apos;pods&apos; means pods. &apos;pods/log&apos; means the log subresource of pods.
            &apos;*&apos; means all resources, but not subresources. &apos;pods/*&apos; means all subresources
            of pods. &apos;*/scale&apos; means all scale subresources. &apos;*/*&apos; means all resources and
            their subresources.
            
            If wildcard is present, the validation rule will ensure resources do not overlap
            with each other.
            
            Depending on the enclosing object, subresources might not be allowed. Required.
            </param>
            <param name="scope">
            scope specifies the scope of this rule. Valid values are &quot;Cluster&quot;,
            &quot;Namespaced&quot;, and &quot;*&quot; &quot;Cluster&quot; means that only cluster-scoped resources will
            match this rule. Namespace API objects are cluster-scoped. &quot;Namespaced&quot; means
            that only namespaced resources will match this rule. &quot;*&quot; means that there are no
            scope restrictions. Subresources match the scope of their parent resource.
            Default is &quot;*&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1NamedRuleWithOperations.ApiGroups">
            <summary>
            APIGroups is the API groups the resources belong to. &apos;*&apos; is all groups. If &apos;*&apos;
            is present, the length of the slice must be one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1NamedRuleWithOperations.ApiVersions">
            <summary>
            APIVersions is the API versions the resources belong to. &apos;*&apos; is all versions. If
            &apos;*&apos; is present, the length of the slice must be one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1NamedRuleWithOperations.Operations">
            <summary>
            Operations is the operations the admission hook cares about - CREATE, UPDATE,
            DELETE, CONNECT or * for all of those operations and any future admission
            operations that are added. If &apos;*&apos; is present, the length of the slice must be
            one. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1NamedRuleWithOperations.ResourceNames">
            <summary>
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1NamedRuleWithOperations.Resources">
            <summary>
            Resources is a list of resources this rule applies to.
            
            For example: &apos;pods&apos; means pods. &apos;pods/log&apos; means the log subresource of pods.
            &apos;*&apos; means all resources, but not subresources. &apos;pods/*&apos; means all subresources
            of pods. &apos;*/scale&apos; means all scale subresources. &apos;*/*&apos; means all resources and
            their subresources.
            
            If wildcard is present, the validation rule will ensure resources do not overlap
            with each other.
            
            Depending on the enclosing object, subresources might not be allowed. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1NamedRuleWithOperations.Scope">
            <summary>
            scope specifies the scope of this rule. Valid values are &quot;Cluster&quot;,
            &quot;Namespaced&quot;, and &quot;*&quot; &quot;Cluster&quot; means that only cluster-scoped resources will
            match this rule. Namespace API objects are cluster-scoped. &quot;Namespaced&quot; means
            that only namespaced resources will match this rule. &quot;*&quot; means that there are no
            scope restrictions. Subresources match the scope of their parent resource.
            Default is &quot;*&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1NamedRuleWithOperations.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ParamKind">
            <summary>
            ParamKind is a tuple of Group Kind and Version.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ParamKind.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ParamKind class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ParamKind.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta1ParamKind class.
            </summary>
            <param name="apiVersion">
            APIVersion is the API group version the resources belong to. In format of
            &quot;group/version&quot;. Required.
            </param>
            <param name="kind">
            Kind is the API kind the resources belong to. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ParamKind.ApiVersion">
            <summary>
            APIVersion is the API group version the resources belong to. In format of
            &quot;group/version&quot;. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ParamKind.Kind">
            <summary>
            Kind is the API kind the resources belong to. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ParamKind.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ParamRef">
            <summary>
            ParamRef describes how to locate the params to be used as input to expressions
            of rules applied by a policy binding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ParamRef.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ParamRef class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ParamRef.#ctor(System.String,System.String,System.String,k8s.Models.V1LabelSelector)">
            <summary>
            Initializes a new instance of the V1beta1ParamRef class.
            </summary>
            <param name="name">
            name is the name of the resource being referenced.
            
            One of `name` or `selector` must be set, but `name` and `selector` are mutually
            exclusive properties. If one is set, the other must be unset.
            
            A single parameter used for all admission requests can be configured by setting
            the `name` field, leaving `selector` blank, and setting namespace if `paramKind`
            is namespace-scoped.
            </param>
            <param name="namespaceProperty">
            namespace is the namespace of the referenced resource. Allows limiting the
            search for params to a specific namespace. Applies to both `name` and `selector`
            fields.
            
            A per-namespace parameter may be used by specifying a namespace-scoped
            `paramKind` in the policy and leaving this field empty.
            
            - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field
            results in a configuration error.
            
            - If `paramKind` is namespace-scoped, the namespace of the object being
            evaluated for admission will be used when this field is left unset. Take care
            that if this is left empty the binding must not match any cluster-scoped
            resources, which will result in an error.
            </param>
            <param name="parameterNotFoundAction">
            `parameterNotFoundAction` controls the behavior of the binding when the resource
            exists, and name or selector is valid, but there are no parameters matched by
            the binding. If the value is set to `Allow`, then no matched parameters will be
            treated as successful validation by the binding. If set to `Deny`, then no
            matched parameters will be subject to the `failurePolicy` of the policy.
            
            Allowed values are `Allow` or `Deny`
            
            Required
            </param>
            <param name="selector">
            selector can be used to match multiple param objects based on their labels.
            Supply selector: {} to match all resources of the ParamKind.
            
            If multiple params are found, they are all evaluated with the policy expressions
            and the results are ANDed together.
            
            One of `name` or `selector` must be set, but `name` and `selector` are mutually
            exclusive properties. If one is set, the other must be unset.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ParamRef.Name">
            <summary>
            name is the name of the resource being referenced.
            
            One of `name` or `selector` must be set, but `name` and `selector` are mutually
            exclusive properties. If one is set, the other must be unset.
            
            A single parameter used for all admission requests can be configured by setting
            the `name` field, leaving `selector` blank, and setting namespace if `paramKind`
            is namespace-scoped.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ParamRef.NamespaceProperty">
            <summary>
            namespace is the namespace of the referenced resource. Allows limiting the
            search for params to a specific namespace. Applies to both `name` and `selector`
            fields.
            
            A per-namespace parameter may be used by specifying a namespace-scoped
            `paramKind` in the policy and leaving this field empty.
            
            - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field
            results in a configuration error.
            
            - If `paramKind` is namespace-scoped, the namespace of the object being
            evaluated for admission will be used when this field is left unset. Take care
            that if this is left empty the binding must not match any cluster-scoped
            resources, which will result in an error.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ParamRef.ParameterNotFoundAction">
            <summary>
            `parameterNotFoundAction` controls the behavior of the binding when the resource
            exists, and name or selector is valid, but there are no parameters matched by
            the binding. If the value is set to `Allow`, then no matched parameters will be
            treated as successful validation by the binding. If set to `Deny`, then no
            matched parameters will be subject to the `failurePolicy` of the policy.
            
            Allowed values are `Allow` or `Deny`
            
            Required
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ParamRef.Selector">
            <summary>
            selector can be used to match multiple param objects based on their labels.
            Supply selector: {} to match all resources of the ParamKind.
            
            If multiple params are found, they are all evaluated with the policy expressions
            and the results are ANDed together.
            
            One of `name` or `selector` must be set, but `name` and `selector` are mutually
            exclusive properties. If one is set, the other must be unset.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ParamRef.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1TypeChecking">
            <summary>
            TypeChecking contains results of type checking the expressions in the
            ValidatingAdmissionPolicy
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1TypeChecking.#ctor">
            <summary>
            Initializes a new instance of the V1beta1TypeChecking class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1TypeChecking.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta1ExpressionWarning})">
            <summary>
            Initializes a new instance of the V1beta1TypeChecking class.
            </summary>
            <param name="expressionWarnings">
            The type checking warnings for each expression.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1TypeChecking.ExpressionWarnings">
            <summary>
            The type checking warnings for each expression.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1TypeChecking.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ValidatingAdmissionPolicy">
            <summary>
            ValidatingAdmissionPolicy describes the definition of an admission validation
            policy that accepts or rejects an object without changing it.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicy.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicy.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1beta1ValidatingAdmissionPolicySpec,k8s.Models.V1beta1ValidatingAdmissionPolicyStatus)">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicy class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </param>
            <param name="spec">
            Specification of the desired behavior of the ValidatingAdmissionPolicy.
            </param>
            <param name="status">
            The status of the ValidatingAdmissionPolicy, including warnings that are useful
            to determine if the policy behaves in the expected way. Populated by the system.
            Read-only.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicy.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicy.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicy.Metadata">
            <summary>
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicy.Spec">
            <summary>
            Specification of the desired behavior of the ValidatingAdmissionPolicy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicy.Status">
            <summary>
            The status of the ValidatingAdmissionPolicy, including warnings that are useful
            to determine if the policy behaves in the expected way. Populated by the system.
            Read-only.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding">
            <summary>
            ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with
            paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
            together define how cluster administrators configure policies for clusters.
            
            For a given admission request, each binding will cause its policy to be
            evaluated N times, where N is 1 for policies/bindings that don&apos;t use params,
            otherwise N is the number of parameters selected by the binding.
            
            The CEL expressions of a policy must have a computed CEL cost below the maximum
            CEL budget. Each evaluation of the policy is given an independent CEL cost
            budget. Adding/removing policies, bindings, or params can not affect whether a
            given (policy, binding, param) combination is within its own CEL budget.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyBinding class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec)">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyBinding class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </param>
            <param name="spec">
            Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding.Metadata">
            <summary>
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding.Spec">
            <summary>
            Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBinding.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList">
            <summary>
            ValidatingAdmissionPolicyBindingList is a list of
            ValidatingAdmissionPolicyBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyBindingList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1beta1ValidatingAdmissionPolicyBinding},System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyBindingList class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="items">
            List of PolicyBinding.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList.Items">
            <summary>
            List of PolicyBinding.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec">
            <summary>
            ValidatingAdmissionPolicyBindingSpec is the specification of the
            ValidatingAdmissionPolicyBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyBindingSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec.#ctor(k8s.Models.V1beta1MatchResources,k8s.Models.V1beta1ParamRef,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyBindingSpec class.
            </summary>
            <param name="matchResources">
            MatchResources declares what resources match this binding and will be validated
            by it. Note that this is intersected with the policy&apos;s matchConstraints, so only
            requests that are matched by the policy can be selected by this. If this is
            unset, all resources matched by the policy are validated by this binding When
            resourceRules is unset, it does not constrain resource matching. If a resource
            is matched by the other fields of this object, it will be validated. Note that
            this is differs from ValidatingAdmissionPolicy matchConstraints, where
            resourceRules are required.
            </param>
            <param name="paramRef">
            paramRef specifies the parameter resource used to configure the admission
            control policy. It should point to a resource of the type specified in ParamKind
            of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and
            the resource referred to by ParamRef does not exist, this binding is considered
            mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
            If the policy does not specify a ParamKind then this field is ignored, and the
            rules are evaluated without a param.
            </param>
            <param name="policyName">
            PolicyName references a ValidatingAdmissionPolicy name which the
            ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not
            exist, this binding is considered invalid and will be ignored Required.
            </param>
            <param name="validationActions">
            validationActions declares how Validations of the referenced
            ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is
            always enforced according to these actions.
            
            Failures defined by the ValidatingAdmissionPolicy&apos;s FailurePolicy are enforced
            according to these actions only if the FailurePolicy is set to Fail, otherwise
            the failures are ignored. This includes compilation errors, runtime errors and
            misconfigurations of the policy.
            
            validationActions is declared as a set of action values. Order does not matter.
            validationActions may not contain duplicates of the same action.
            
            The supported actions values are:
            
            &quot;Deny&quot; specifies that a validation failure results in a denied request.
            
            &quot;Warn&quot; specifies that a validation failure is reported to the request client in
            HTTP Warning headers, with a warning code of 299. Warnings can be sent both for
            allowed or denied admission responses.
            
            &quot;Audit&quot; specifies that a validation failure is included in the published audit
            event for the request. The audit event will contain a
            `validation.policy.admission.k8s.io/validation_failure` audit annotation with a
            value containing the details of the validation failures, formatted as a JSON
            list of objects, each with the following fields: - message: The validation
            failure message string - policy: The resource name of the
            ValidatingAdmissionPolicy - binding: The resource name of the
            ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed
            validations in the ValidatingAdmissionPolicy - validationActions: The
            enforcement actions enacted for the validation failure Example audit annotation:
            `&quot;validation.policy.admission.k8s.io/validation_failure&quot;: &quot;[{&quot;message&quot;: &quot;Invalid
            value&quot;, {&quot;policy&quot;: &quot;policy.example.com&quot;, {&quot;binding&quot;:
            &quot;policybinding.example.com&quot;, {&quot;expressionIndex&quot;: &quot;1&quot;, {&quot;validationActions&quot;:
            [&quot;Audit&quot;]}]&quot;`
            
            Clients should expect to handle additional values by ignoring any values not
            recognized.
            
            &quot;Deny&quot; and &quot;Warn&quot; may not be used together since this combination needlessly
            duplicates the validation failure both in the API response body and the HTTP
            warning headers.
            
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec.MatchResources">
            <summary>
            MatchResources declares what resources match this binding and will be validated
            by it. Note that this is intersected with the policy&apos;s matchConstraints, so only
            requests that are matched by the policy can be selected by this. If this is
            unset, all resources matched by the policy are validated by this binding When
            resourceRules is unset, it does not constrain resource matching. If a resource
            is matched by the other fields of this object, it will be validated. Note that
            this is differs from ValidatingAdmissionPolicy matchConstraints, where
            resourceRules are required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec.ParamRef">
            <summary>
            paramRef specifies the parameter resource used to configure the admission
            control policy. It should point to a resource of the type specified in ParamKind
            of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and
            the resource referred to by ParamRef does not exist, this binding is considered
            mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
            If the policy does not specify a ParamKind then this field is ignored, and the
            rules are evaluated without a param.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec.PolicyName">
            <summary>
            PolicyName references a ValidatingAdmissionPolicy name which the
            ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not
            exist, this binding is considered invalid and will be ignored Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec.ValidationActions">
            <summary>
            validationActions declares how Validations of the referenced
            ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is
            always enforced according to these actions.
            
            Failures defined by the ValidatingAdmissionPolicy&apos;s FailurePolicy are enforced
            according to these actions only if the FailurePolicy is set to Fail, otherwise
            the failures are ignored. This includes compilation errors, runtime errors and
            misconfigurations of the policy.
            
            validationActions is declared as a set of action values. Order does not matter.
            validationActions may not contain duplicates of the same action.
            
            The supported actions values are:
            
            &quot;Deny&quot; specifies that a validation failure results in a denied request.
            
            &quot;Warn&quot; specifies that a validation failure is reported to the request client in
            HTTP Warning headers, with a warning code of 299. Warnings can be sent both for
            allowed or denied admission responses.
            
            &quot;Audit&quot; specifies that a validation failure is included in the published audit
            event for the request. The audit event will contain a
            `validation.policy.admission.k8s.io/validation_failure` audit annotation with a
            value containing the details of the validation failures, formatted as a JSON
            list of objects, each with the following fields: - message: The validation
            failure message string - policy: The resource name of the
            ValidatingAdmissionPolicy - binding: The resource name of the
            ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed
            validations in the ValidatingAdmissionPolicy - validationActions: The
            enforcement actions enacted for the validation failure Example audit annotation:
            `&quot;validation.policy.admission.k8s.io/validation_failure&quot;: &quot;[{&quot;message&quot;: &quot;Invalid
            value&quot;, {&quot;policy&quot;: &quot;policy.example.com&quot;, {&quot;binding&quot;:
            &quot;policybinding.example.com&quot;, {&quot;expressionIndex&quot;: &quot;1&quot;, {&quot;validationActions&quot;:
            [&quot;Audit&quot;]}]&quot;`
            
            Clients should expect to handle additional values by ignoring any values not
            recognized.
            
            &quot;Deny&quot; and &quot;Warn&quot; may not be used together since this combination needlessly
            duplicates the validation failure both in the API response body and the HTTP
            warning headers.
            
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyBindingSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ValidatingAdmissionPolicyList">
            <summary>
            ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyList.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyList.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1beta1ValidatingAdmissionPolicy},System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyList class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="items">
            List of ValidatingAdmissionPolicy.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyList.Items">
            <summary>
            List of ValidatingAdmissionPolicy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ValidatingAdmissionPolicySpec">
            <summary>
            ValidatingAdmissionPolicySpec is the specification of the desired behavior of
            the AdmissionPolicy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicySpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta1AuditAnnotation},System.String,System.Collections.Generic.IList{k8s.Models.V1beta1MatchCondition},k8s.Models.V1beta1MatchResources,k8s.Models.V1beta1ParamKind,System.Collections.Generic.IList{k8s.Models.V1beta1Validation},System.Collections.Generic.IList{k8s.Models.V1beta1Variable})">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicySpec class.
            </summary>
            <param name="auditAnnotations">
            auditAnnotations contains CEL expressions which are used to produce audit
            annotations for the audit event of the API request. validations and
            auditAnnotations may not both be empty; a least one of validations or
            auditAnnotations is required.
            </param>
            <param name="failurePolicy">
            failurePolicy defines how to handle failures for the admission policy. Failures
            can occur from CEL expression parse errors, type check errors, runtime errors
            and invalid or mis-configured policy definitions or bindings.
            
            A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding
            is invalid if spec.paramRef.name refers to a non-existent resource.
            
            failurePolicy does not define how validations that evaluate to false are
            handled.
            
            When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding
            validationActions define how failures are enforced.
            
            Allowed values are Ignore or Fail. Defaults to Fail.
            </param>
            <param name="matchConditions">
            MatchConditions is a list of conditions that must be met for a request to be
            validated. Match conditions filter requests that have already been matched by
            the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            If a parameter object is provided, it can be accessed via the `params` handle in
            the same manner as validation expressions.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
            2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the policy is skipped
            </param>
            <param name="matchConstraints">
            MatchConstraints specifies what resources this policy is designed to validate.
            The AdmissionPolicy cares about a request if it matches _all_ Constraints.
            However, in order to prevent clusters from being put into an unstable state that
            cannot be recovered from via the API ValidatingAdmissionPolicy cannot match
            ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
            </param>
            <param name="paramKind">
            ParamKind specifies the kind of resources used to parameterize this policy. If
            absent, there are no parameters for this policy and the param CEL variable will
            not be provided to validation expressions. If ParamKind refers to a non-existent
            kind, this policy definition is mis-configured and the FailurePolicy is applied.
            If paramKind is specified but paramRef is unset in
            ValidatingAdmissionPolicyBinding, the params variable will be null.
            </param>
            <param name="validations">
            Validations contain CEL expressions which is used to apply the validation.
            Validations and AuditAnnotations may not both be empty; a minimum of one
            Validations or AuditAnnotations is required.
            </param>
            <param name="variables">
            Variables contain definitions of variables that can be used in composition of
            other expressions. Each variable is defined as a named CEL expression. The
            variables defined here will be available under `variables` in other expressions
            of the policy except MatchConditions because MatchConditions are evaluated
            before the rest of the policy.
            
            The expression of a variable can refer to other variables defined earlier in the
            list but not those after. Thus, Variables must be sorted by the order of first
            appearance and acyclic.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.AuditAnnotations">
            <summary>
            auditAnnotations contains CEL expressions which are used to produce audit
            annotations for the audit event of the API request. validations and
            auditAnnotations may not both be empty; a least one of validations or
            auditAnnotations is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.FailurePolicy">
            <summary>
            failurePolicy defines how to handle failures for the admission policy. Failures
            can occur from CEL expression parse errors, type check errors, runtime errors
            and invalid or mis-configured policy definitions or bindings.
            
            A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding
            is invalid if spec.paramRef.name refers to a non-existent resource.
            
            failurePolicy does not define how validations that evaluate to false are
            handled.
            
            When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding
            validationActions define how failures are enforced.
            
            Allowed values are Ignore or Fail. Defaults to Fail.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.MatchConditions">
            <summary>
            MatchConditions is a list of conditions that must be met for a request to be
            validated. Match conditions filter requests that have already been matched by
            the rules, namespaceSelector, and objectSelector. An empty list of
            matchConditions matches all requests. There are a maximum of 64 match conditions
            allowed.
            
            If a parameter object is provided, it can be accessed via the `params` handle in
            the same manner as validation expressions.
            
            The exact matching logic is (in order):
            1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
            2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
            3. If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the policy is skipped
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.MatchConstraints">
            <summary>
            MatchConstraints specifies what resources this policy is designed to validate.
            The AdmissionPolicy cares about a request if it matches _all_ Constraints.
            However, in order to prevent clusters from being put into an unstable state that
            cannot be recovered from via the API ValidatingAdmissionPolicy cannot match
            ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.ParamKind">
            <summary>
            ParamKind specifies the kind of resources used to parameterize this policy. If
            absent, there are no parameters for this policy and the param CEL variable will
            not be provided to validation expressions. If ParamKind refers to a non-existent
            kind, this policy definition is mis-configured and the FailurePolicy is applied.
            If paramKind is specified but paramRef is unset in
            ValidatingAdmissionPolicyBinding, the params variable will be null.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.Validations">
            <summary>
            Validations contain CEL expressions which is used to apply the validation.
            Validations and AuditAnnotations may not both be empty; a minimum of one
            Validations or AuditAnnotations is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.Variables">
            <summary>
            Variables contain definitions of variables that can be used in composition of
            other expressions. Each variable is defined as a named CEL expression. The
            variables defined here will be available under `variables` in other expressions
            of the policy except MatchConditions because MatchConditions are evaluated
            before the rest of the policy.
            
            The expression of a variable can refer to other variables defined earlier in the
            list but not those after. Thus, Variables must be sorted by the order of first
            appearance and acyclic.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicySpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1ValidatingAdmissionPolicyStatus">
            <summary>
            ValidatingAdmissionPolicyStatus represents the status of an admission validation
            policy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyStatus.#ctor">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1Condition},System.Nullable{System.Int64},k8s.Models.V1beta1TypeChecking)">
            <summary>
            Initializes a new instance of the V1beta1ValidatingAdmissionPolicyStatus class.
            </summary>
            <param name="conditions">
            The conditions represent the latest available observations of a policy&apos;s current
            state.
            </param>
            <param name="observedGeneration">
            The generation observed by the controller.
            </param>
            <param name="typeChecking">
            The results of type checking for each expression. Presence of this field
            indicates the completion of the type checking.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyStatus.Conditions">
            <summary>
            The conditions represent the latest available observations of a policy&apos;s current
            state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyStatus.ObservedGeneration">
            <summary>
            The generation observed by the controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1ValidatingAdmissionPolicyStatus.TypeChecking">
            <summary>
            The results of type checking for each expression. Presence of this field
            indicates the completion of the type checking.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1ValidatingAdmissionPolicyStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1Validation">
            <summary>
            Validation specifies the CEL expression which is used to apply the validation.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1Validation.#ctor">
            <summary>
            Initializes a new instance of the V1beta1Validation class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1Validation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta1Validation class.
            </summary>
            <param name="expression">
            Expression represents the expression which will be evaluated by CEL. ref:
            https://github.com/google/cel-spec CEL expressions have access to the contents
            of the API request/response, organized into CEL variables as well as some other
            useful variables:
            
            - &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. - &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. - &apos;request&apos; - Attributes of the API
            request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - &apos;params&apos; -
            Parameter resource referred to by the policy binding being evaluated. Only
            populated if the policy has a ParamKind. - &apos;namespaceObject&apos; - The namespace
            object that the incoming object belongs to. The value is null for cluster-scoped
            resources. - &apos;variables&apos; - Map of composited variables, from its name to its
            lazily evaluated value.
            For example, a variable named &apos;foo&apos; can be accessed as &apos;variables.foo&apos;.
            - &apos;authorizer&apos; - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            - &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            
            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
            accessible from the root of the object. No other metadata properties are
            accessible.
            
            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
            Accessible property names are escaped according to the following rules when
            accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
            &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
            names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
            keywords are:
            &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
            &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
            &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
            Examples:
            - Expression accessing a property named &quot;namespace&quot;: {&quot;Expression&quot;:
            &quot;object.__namespace__ &gt; 0&quot;}
            - Expression accessing a property named &quot;x-prop&quot;: {&quot;Expression&quot;:
            &quot;object.x__dash__prop &gt; 0&quot;}
            - Expression accessing a property named &quot;redact__d&quot;: {&quot;Expression&quot;:
            &quot;object.redact__underscores__d &gt; 0&quot;}
            
            Equality on arrays with list type of &apos;set&apos; or &apos;map&apos; ignores element order, i.e.
            [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the
            semantics of the list type:
            - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
            `X` are preserved and
            non-intersecting elements in `Y` are appended, retaining their partial order.
            - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values
            are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
            Elements in `Y` with
            non-intersecting keys are appended, retaining their partial order.
            Required.
            </param>
            <param name="message">
            Message represents the message displayed when validation fails. The message is
            required if the Expression contains line breaks. The message must not contain
            line breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL
            with the host matching spec.host&quot; If the Expression contains line breaks.
            Message is required. The message must not contain line breaks. If unset, the
            message is &quot;failed Expression: {Expression}&quot;.
            </param>
            <param name="messageExpression">
            messageExpression declares a CEL expression that evaluates to the validation
            failure message that is returned when this rule fails. Since messageExpression
            is used as a failure message, it must evaluate to a string. If both message and
            messageExpression are present on a validation, then messageExpression will be
            used if validation fails. If messageExpression results in a runtime error, the
            runtime error is logged, and the validation failure message is produced as if
            the messageExpression field were unset. If messageExpression evaluates to an
            empty string, a string with only spaces, or a string that contains line breaks,
            then the validation failure message will also be produced as if the
            messageExpression field were unset, and the fact that messageExpression produced
            an empty string/string with only spaces/string with line breaks will be logged.
            messageExpression has access to all the same variables as the `expression`
            except for &apos;authorizer&apos; and &apos;authorizer.requestResource&apos;. Example: &quot;object.x
            must be less than max (&quot;+string(params.max)+&quot;)&quot;
            </param>
            <param name="reason">
            Reason represents a machine-readable description of why this validation failed.
            If this is the first validation in the list to fail, this reason, as well as the
            corresponding HTTP response code, are used in the HTTP response to the client.
            The currently supported reasons are: &quot;Unauthorized&quot;, &quot;Forbidden&quot;, &quot;Invalid&quot;,
            &quot;RequestEntityTooLarge&quot;. If not set, StatusReasonInvalid is used in the response
            to the client.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1Validation.Expression">
            <summary>
            Expression represents the expression which will be evaluated by CEL. ref:
            https://github.com/google/cel-spec CEL expressions have access to the contents
            of the API request/response, organized into CEL variables as well as some other
            useful variables:
            
            - &apos;object&apos; - The object from the incoming request. The value is null for DELETE
            requests. - &apos;oldObject&apos; - The existing object. The value is null for CREATE
            requests. - &apos;request&apos; - Attributes of the API
            request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - &apos;params&apos; -
            Parameter resource referred to by the policy binding being evaluated. Only
            populated if the policy has a ParamKind. - &apos;namespaceObject&apos; - The namespace
            object that the incoming object belongs to. The value is null for cluster-scoped
            resources. - &apos;variables&apos; - Map of composited variables, from its name to its
            lazily evaluated value.
            For example, a variable named &apos;foo&apos; can be accessed as &apos;variables.foo&apos;.
            - &apos;authorizer&apos; - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or service account) of the request.
            See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            - &apos;authorizer.requestResource&apos; - A CEL ResourceCheck constructed from the
            &apos;authorizer&apos; and configured with the
            request resource.
            
            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
            accessible from the root of the object. No other metadata properties are
            accessible.
            
            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
            Accessible property names are escaped according to the following rules when
            accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
            &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
            names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
            keywords are:
            &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
            &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
            &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
            Examples:
            - Expression accessing a property named &quot;namespace&quot;: {&quot;Expression&quot;:
            &quot;object.__namespace__ &gt; 0&quot;}
            - Expression accessing a property named &quot;x-prop&quot;: {&quot;Expression&quot;:
            &quot;object.x__dash__prop &gt; 0&quot;}
            - Expression accessing a property named &quot;redact__d&quot;: {&quot;Expression&quot;:
            &quot;object.redact__underscores__d &gt; 0&quot;}
            
            Equality on arrays with list type of &apos;set&apos; or &apos;map&apos; ignores element order, i.e.
            [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the
            semantics of the list type:
            - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
            `X` are preserved and
            non-intersecting elements in `Y` are appended, retaining their partial order.
            - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values
            are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
            Elements in `Y` with
            non-intersecting keys are appended, retaining their partial order.
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1Validation.Message">
            <summary>
            Message represents the message displayed when validation fails. The message is
            required if the Expression contains line breaks. The message must not contain
            line breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL
            with the host matching spec.host&quot; If the Expression contains line breaks.
            Message is required. The message must not contain line breaks. If unset, the
            message is &quot;failed Expression: {Expression}&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1Validation.MessageExpression">
            <summary>
            messageExpression declares a CEL expression that evaluates to the validation
            failure message that is returned when this rule fails. Since messageExpression
            is used as a failure message, it must evaluate to a string. If both message and
            messageExpression are present on a validation, then messageExpression will be
            used if validation fails. If messageExpression results in a runtime error, the
            runtime error is logged, and the validation failure message is produced as if
            the messageExpression field were unset. If messageExpression evaluates to an
            empty string, a string with only spaces, or a string that contains line breaks,
            then the validation failure message will also be produced as if the
            messageExpression field were unset, and the fact that messageExpression produced
            an empty string/string with only spaces/string with line breaks will be logged.
            messageExpression has access to all the same variables as the `expression`
            except for &apos;authorizer&apos; and &apos;authorizer.requestResource&apos;. Example: &quot;object.x
            must be less than max (&quot;+string(params.max)+&quot;)&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1Validation.Reason">
            <summary>
            Reason represents a machine-readable description of why this validation failed.
            If this is the first validation in the list to fail, this reason, as well as the
            corresponding HTTP response code, are used in the HTTP response to the client.
            The currently supported reasons are: &quot;Unauthorized&quot;, &quot;Forbidden&quot;, &quot;Invalid&quot;,
            &quot;RequestEntityTooLarge&quot;. If not set, StatusReasonInvalid is used in the response
            to the client.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1Validation.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1Variable">
            <summary>
            Variable is the definition of a variable that is used for composition. A
            variable is defined as a named expression.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1Variable.#ctor">
            <summary>
            Initializes a new instance of the V1beta1Variable class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1Variable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta1Variable class.
            </summary>
            <param name="expression">
            Expression is the expression that will be evaluated as the value of the
            variable. The CEL expression has access to the same identifiers as the CEL
            expressions in Validation.
            </param>
            <param name="name">
            Name is the name of the variable. The name must be a valid CEL identifier and
            unique among all variables. The variable can be accessed in other expressions
            through `variables` For example, if name is &quot;foo&quot;, the variable will be
            available as `variables.foo`
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1Variable.Expression">
            <summary>
            Expression is the expression that will be evaluated as the value of the
            variable. The CEL expression has access to the same identifiers as the CEL
            expressions in Validation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1Variable.Name">
            <summary>
            Name is the name of the variable. The name must be a valid CEL identifier and
            unique among all variables. The variable can be accessed in other expressions
            through `variables` For example, if name is &quot;foo&quot;, the variable will be
            available as `variables.foo`
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1Variable.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ServerStorageVersion">
            <summary>
            An API server instance reports the version it can decode and the version it
            encodes objects to when persisting objects in the backend.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ServerStorageVersion.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ServerStorageVersion class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ServerStorageVersion.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1alpha1ServerStorageVersion class.
            </summary>
            <param name="apiServerID">
            The ID of the reporting API server.
            </param>
            <param name="decodableVersions">
            The API server can decode objects encoded in these versions. The encodingVersion
            must be included in the decodableVersions.
            </param>
            <param name="encodingVersion">
            The API server encodes the object to this version when persisting it in the
            backend (e.g., etcd).
            </param>
            <param name="servedVersions">
            The API server can serve these versions. DecodableVersions must include all
            ServedVersions.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ServerStorageVersion.ApiServerID">
            <summary>
            The ID of the reporting API server.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ServerStorageVersion.DecodableVersions">
            <summary>
            The API server can decode objects encoded in these versions. The encodingVersion
            must be included in the decodableVersions.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ServerStorageVersion.EncodingVersion">
            <summary>
            The API server encodes the object to this version when persisting it in the
            backend (e.g., etcd).
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ServerStorageVersion.ServedVersions">
            <summary>
            The API server can serve these versions. DecodableVersions must include all
            ServedVersions.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ServerStorageVersion.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1StorageVersion">
            <summary>
            Storage version of a specific resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersion.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersion class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersion.#ctor(System.Object,k8s.Models.V1alpha1StorageVersionStatus,System.String,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersion class.
            </summary>
            <param name="spec">
            Spec is an empty spec. It is here to comply with Kubernetes API style.
            </param>
            <param name="status">
            API server instances report the version they can decode and the version they
            encode objects to when persisting objects in the backend.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            The name is &lt;group&gt;.&lt;resource&gt;.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersion.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersion.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersion.Metadata">
            <summary>
            The name is &lt;group&gt;.&lt;resource&gt;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersion.Spec">
            <summary>
            Spec is an empty spec. It is here to comply with Kubernetes API style.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersion.Status">
            <summary>
            API server instances report the version they can decode and the version they
            encode objects to when persisting objects in the backend.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersion.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1StorageVersionCondition">
            <summary>
            Describes the state of the storageVersion at a certain point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionCondition.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersionCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionCondition.#ctor(System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersionCondition class.
            </summary>
            <param name="reason">
            The reason for the condition&apos;s last transition.
            </param>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of the condition.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transitioned from one status to another.
            </param>
            <param name="message">
            A human readable message indicating details about the transition.
            </param>
            <param name="observedGeneration">
            If set, this represents the .metadata.generation that the condition was set
            based upon.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionCondition.LastTransitionTime">
            <summary>
            Last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionCondition.Message">
            <summary>
            A human readable message indicating details about the transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionCondition.ObservedGeneration">
            <summary>
            If set, this represents the .metadata.generation that the condition was set
            based upon.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionCondition.Reason">
            <summary>
            The reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionCondition.Type">
            <summary>
            Type of the condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1StorageVersionList">
            <summary>
            A list of StorageVersions.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersionList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha1StorageVersion},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersionList class.
            </summary>
            <param name="items">
            Items holds a list of StorageVersion
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionList.Items">
            <summary>
            Items holds a list of StorageVersion
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1StorageVersionStatus">
            <summary>
            API server instances report the versions they can decode and the version they
            encode objects to when persisting objects in the backend.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionStatus.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersionStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionStatus.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1alpha1StorageVersionCondition},System.Collections.Generic.IList{k8s.Models.V1alpha1ServerStorageVersion})">
            <summary>
            Initializes a new instance of the V1alpha1StorageVersionStatus class.
            </summary>
            <param name="commonEncodingVersion">
            If all API server instances agree on the same encoding storage version, then
            this field is set to that version. Otherwise this field is left empty. API
            servers should finish updating its storageVersionStatus entry before serving
            write operations, so that this field will be in sync with the reality.
            </param>
            <param name="conditions">
            The latest available observations of the storageVersion&apos;s state.
            </param>
            <param name="storageVersions">
            The reported versions per API server instance.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionStatus.CommonEncodingVersion">
            <summary>
            If all API server instances agree on the same encoding storage version, then
            this field is set to that version. Otherwise this field is left empty. API
            servers should finish updating its storageVersionStatus entry before serving
            write operations, so that this field will be in sync with the reality.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionStatus.Conditions">
            <summary>
            The latest available observations of the storageVersion&apos;s state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1StorageVersionStatus.StorageVersions">
            <summary>
            The reported versions per API server instance.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1StorageVersionStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ControllerRevision">
            <summary>
            ControllerRevision implements an immutable snapshot of state data. Clients are
            responsible for serializing and deserializing the objects that contain their
            internal state. Once a ControllerRevision has been successfully created, it can
            not be updated. The API Server will fail validation of all requests that attempt
            to mutate the Data field. ControllerRevisions may, however, be deleted. Note
            that, due to its use by both the DaemonSet and StatefulSet controllers for
            update and rollback, this object is beta. However, it may be subject to name and
            representation changes in future releases, and clients should not depend on its
            stability. It is primarily for internal use by controllers.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ControllerRevision.#ctor">
            <summary>
            Initializes a new instance of the V1ControllerRevision class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ControllerRevision.#ctor(System.Int64,System.String,System.Object,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1ControllerRevision class.
            </summary>
            <param name="revision">
            Revision indicates the revision of the state represented by Data.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="data">
            Data is the serialized representation of the state.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1ControllerRevision.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ControllerRevision.Data">
            <summary>
            Data is the serialized representation of the state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ControllerRevision.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ControllerRevision.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1ControllerRevision.Revision">
            <summary>
            Revision indicates the revision of the state represented by Data.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ControllerRevision.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ControllerRevisionList">
            <summary>
            ControllerRevisionList is a resource containing a list of ControllerRevision
            objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ControllerRevisionList.#ctor">
            <summary>
            Initializes a new instance of the V1ControllerRevisionList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ControllerRevisionList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ControllerRevision},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ControllerRevisionList class.
            </summary>
            <param name="items">
            Items is the list of ControllerRevisions
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1ControllerRevisionList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ControllerRevisionList.Items">
            <summary>
            Items is the list of ControllerRevisions
            </summary>
        </member>
        <member name="P:k8s.Models.V1ControllerRevisionList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ControllerRevisionList.Metadata">
            <summary>
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1ControllerRevisionList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DaemonSet">
            <summary>
            DaemonSet represents the configuration of a daemon set.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSet.#ctor">
            <summary>
            Initializes a new instance of the V1DaemonSet class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSet.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1DaemonSetSpec,k8s.Models.V1DaemonSetStatus)">
            <summary>
            Initializes a new instance of the V1DaemonSet class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            The desired behavior of this daemon set. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            The current status of this daemon set. This data may be out of date by some
            window of time. Populated by the system. Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1DaemonSet.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSet.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSet.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSet.Spec">
            <summary>
            The desired behavior of this daemon set. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSet.Status">
            <summary>
            The current status of this daemon set. This data may be out of date by some
            window of time. Populated by the system. Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSet.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DaemonSetCondition">
            <summary>
            DaemonSetCondition describes the state of a DaemonSet at a certain point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetCondition.#ctor">
            <summary>
            Initializes a new instance of the V1DaemonSetCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1DaemonSetCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of DaemonSet condition.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transitioned from one status to another.
            </param>
            <param name="message">
            A human readable message indicating details about the transition.
            </param>
            <param name="reason">
            The reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1DaemonSetCondition.LastTransitionTime">
            <summary>
            Last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetCondition.Message">
            <summary>
            A human readable message indicating details about the transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetCondition.Reason">
            <summary>
            The reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetCondition.Type">
            <summary>
            Type of DaemonSet condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DaemonSetList">
            <summary>
            DaemonSetList is a collection of daemon sets.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetList.#ctor">
            <summary>
            Initializes a new instance of the V1DaemonSetList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetList.#ctor(System.Collections.Generic.IList{k8s.Models.V1DaemonSet},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1DaemonSetList class.
            </summary>
            <param name="items">
            A list of daemon sets.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1DaemonSetList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetList.Items">
            <summary>
            A list of daemon sets.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DaemonSetSpec">
            <summary>
            DaemonSetSpec is the specification of a daemon set.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetSpec.#ctor">
            <summary>
            Initializes a new instance of the V1DaemonSetSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetSpec.#ctor(k8s.Models.V1LabelSelector,k8s.Models.V1PodTemplateSpec,System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1DaemonSetUpdateStrategy)">
            <summary>
            Initializes a new instance of the V1DaemonSetSpec class.
            </summary>
            <param name="selector">
            A label query over pods that are managed by the daemon set. Must match in order
            to be controlled. It must match the pod template&apos;s labels. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </param>
            <param name="template">
            An object that describes the pod that will be created. The DaemonSet will create
            exactly one copy of this pod on every node that matches the template&apos;s node
            selector (or on every node if no node selector is specified). The only allowed
            template.spec.restartPolicy value is &quot;Always&quot;. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
            </param>
            <param name="minReadySeconds">
            The minimum number of seconds for which a newly created DaemonSet pod should be
            ready without any of its container crashing, for it to be considered available.
            Defaults to 0 (pod will be considered available as soon as it is ready).
            </param>
            <param name="revisionHistoryLimit">
            The number of old history to retain to allow rollback. This is a pointer to
            distinguish between explicit zero and not specified. Defaults to 10.
            </param>
            <param name="updateStrategy">
            An update strategy to replace existing DaemonSet pods with new pods.
            </param>
        </member>
        <member name="P:k8s.Models.V1DaemonSetSpec.MinReadySeconds">
            <summary>
            The minimum number of seconds for which a newly created DaemonSet pod should be
            ready without any of its container crashing, for it to be considered available.
            Defaults to 0 (pod will be considered available as soon as it is ready).
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetSpec.RevisionHistoryLimit">
            <summary>
            The number of old history to retain to allow rollback. This is a pointer to
            distinguish between explicit zero and not specified. Defaults to 10.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetSpec.Selector">
            <summary>
            A label query over pods that are managed by the daemon set. Must match in order
            to be controlled. It must match the pod template&apos;s labels. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetSpec.Template">
            <summary>
            An object that describes the pod that will be created. The DaemonSet will create
            exactly one copy of this pod on every node that matches the template&apos;s node
            selector (or on every node if no node selector is specified). The only allowed
            template.spec.restartPolicy value is &quot;Always&quot;. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetSpec.UpdateStrategy">
            <summary>
            An update strategy to replace existing DaemonSet pods with new pods.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DaemonSetStatus">
            <summary>
            DaemonSetStatus represents the current status of a daemon set.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetStatus.#ctor">
            <summary>
            Initializes a new instance of the V1DaemonSetStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetStatus.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1DaemonSetCondition},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1DaemonSetStatus class.
            </summary>
            <param name="currentNumberScheduled">
            The number of nodes that are running at least 1 daemon pod and are supposed to
            run the daemon pod. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
            </param>
            <param name="desiredNumberScheduled">
            The total number of nodes that should be running the daemon pod (including nodes
            correctly running the daemon pod). More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
            </param>
            <param name="numberMisscheduled">
            The number of nodes that are running the daemon pod, but are not supposed to run
            the daemon pod. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
            </param>
            <param name="numberReady">
            numberReady is the number of nodes that should be running the daemon pod and
            have one or more of the daemon pod running with a Ready Condition.
            </param>
            <param name="collisionCount">
            Count of hash collisions for the DaemonSet. The DaemonSet controller uses this
            field as a collision avoidance mechanism when it needs to create the name for
            the newest ControllerRevision.
            </param>
            <param name="conditions">
            Represents the latest available observations of a DaemonSet&apos;s current state.
            </param>
            <param name="numberAvailable">
            The number of nodes that should be running the daemon pod and have one or more
            of the daemon pod running and available (ready for at least
            spec.minReadySeconds)
            </param>
            <param name="numberUnavailable">
            The number of nodes that should be running the daemon pod and have none of the
            daemon pod running and available (ready for at least spec.minReadySeconds)
            </param>
            <param name="observedGeneration">
            The most recent generation observed by the daemon set controller.
            </param>
            <param name="updatedNumberScheduled">
            The total number of nodes that are running updated daemon pod
            </param>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.CollisionCount">
            <summary>
            Count of hash collisions for the DaemonSet. The DaemonSet controller uses this
            field as a collision avoidance mechanism when it needs to create the name for
            the newest ControllerRevision.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.Conditions">
            <summary>
            Represents the latest available observations of a DaemonSet&apos;s current state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.CurrentNumberScheduled">
            <summary>
            The number of nodes that are running at least 1 daemon pod and are supposed to
            run the daemon pod. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.DesiredNumberScheduled">
            <summary>
            The total number of nodes that should be running the daemon pod (including nodes
            correctly running the daemon pod). More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.NumberAvailable">
            <summary>
            The number of nodes that should be running the daemon pod and have one or more
            of the daemon pod running and available (ready for at least
            spec.minReadySeconds)
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.NumberMisscheduled">
            <summary>
            The number of nodes that are running the daemon pod, but are not supposed to run
            the daemon pod. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.NumberReady">
            <summary>
            numberReady is the number of nodes that should be running the daemon pod and
            have one or more of the daemon pod running with a Ready Condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.NumberUnavailable">
            <summary>
            The number of nodes that should be running the daemon pod and have none of the
            daemon pod running and available (ready for at least spec.minReadySeconds)
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.ObservedGeneration">
            <summary>
            The most recent generation observed by the daemon set controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetStatus.UpdatedNumberScheduled">
            <summary>
            The total number of nodes that are running updated daemon pod
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DaemonSetUpdateStrategy">
            <summary>
            DaemonSetUpdateStrategy is a struct used to control the update strategy for a
            DaemonSet.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetUpdateStrategy.#ctor">
            <summary>
            Initializes a new instance of the V1DaemonSetUpdateStrategy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetUpdateStrategy.#ctor(k8s.Models.V1RollingUpdateDaemonSet,System.String)">
            <summary>
            Initializes a new instance of the V1DaemonSetUpdateStrategy class.
            </summary>
            <param name="rollingUpdate">
            Rolling update config params. Present only if type = &quot;RollingUpdate&quot;.
            </param>
            <param name="type">
            Type of daemon set update. Can be &quot;RollingUpdate&quot; or &quot;OnDelete&quot;. Default is
            RollingUpdate.
            </param>
        </member>
        <member name="P:k8s.Models.V1DaemonSetUpdateStrategy.RollingUpdate">
            <summary>
            Rolling update config params. Present only if type = &quot;RollingUpdate&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DaemonSetUpdateStrategy.Type">
            <summary>
            Type of daemon set update. Can be &quot;RollingUpdate&quot; or &quot;OnDelete&quot;. Default is
            RollingUpdate.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonSetUpdateStrategy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Deployment">
            <summary>
            Deployment enables declarative updates for Pods and ReplicaSets.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Deployment.#ctor">
            <summary>
            Initializes a new instance of the V1Deployment class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Deployment.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1DeploymentSpec,k8s.Models.V1DeploymentStatus)">
            <summary>
            Initializes a new instance of the V1Deployment class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Specification of the desired behavior of the Deployment.
            </param>
            <param name="status">
            Most recently observed status of the Deployment.
            </param>
        </member>
        <member name="P:k8s.Models.V1Deployment.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Deployment.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Deployment.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Deployment.Spec">
            <summary>
            Specification of the desired behavior of the Deployment.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Deployment.Status">
            <summary>
            Most recently observed status of the Deployment.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Deployment.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DeploymentCondition">
            <summary>
            DeploymentCondition describes the state of a deployment at a certain point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentCondition.#ctor">
            <summary>
            Initializes a new instance of the V1DeploymentCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1DeploymentCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of deployment condition.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transitioned from one status to another.
            </param>
            <param name="lastUpdateTime">
            The last time this condition was updated.
            </param>
            <param name="message">
            A human readable message indicating details about the transition.
            </param>
            <param name="reason">
            The reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1DeploymentCondition.LastTransitionTime">
            <summary>
            Last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentCondition.LastUpdateTime">
            <summary>
            The last time this condition was updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentCondition.Message">
            <summary>
            A human readable message indicating details about the transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentCondition.Reason">
            <summary>
            The reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentCondition.Type">
            <summary>
            Type of deployment condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DeploymentList">
            <summary>
            DeploymentList is a list of Deployments.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentList.#ctor">
            <summary>
            Initializes a new instance of the V1DeploymentList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Deployment},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1DeploymentList class.
            </summary>
            <param name="items">
            Items is the list of Deployments.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1DeploymentList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentList.Items">
            <summary>
            Items is the list of Deployments.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentList.Metadata">
            <summary>
            Standard list metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DeploymentSpec">
            <summary>
            DeploymentSpec is the specification of the desired behavior of the Deployment.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentSpec.#ctor">
            <summary>
            Initializes a new instance of the V1DeploymentSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentSpec.#ctor(k8s.Models.V1LabelSelector,k8s.Models.V1PodTemplateSpec,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1DeploymentStrategy)">
            <summary>
            Initializes a new instance of the V1DeploymentSpec class.
            </summary>
            <param name="selector">
            Label selector for pods. Existing ReplicaSets whose pods are selected by this
            will be the ones affected by this deployment. It must match the pod template&apos;s
            labels.
            </param>
            <param name="template">
            Template describes the pods that will be created. The only allowed
            template.spec.restartPolicy value is &quot;Always&quot;.
            </param>
            <param name="minReadySeconds">
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing, for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </param>
            <param name="paused">
            Indicates that the deployment is paused.
            </param>
            <param name="progressDeadlineSeconds">
            The maximum time in seconds for a deployment to make progress before it is
            considered to be failed. The deployment controller will continue to process
            failed deployments and a condition with a ProgressDeadlineExceeded reason will
            be surfaced in the deployment status. Note that progress will not be estimated
            during the time a deployment is paused. Defaults to 600s.
            </param>
            <param name="replicas">
            Number of desired pods. This is a pointer to distinguish between explicit zero
            and not specified. Defaults to 1.
            </param>
            <param name="revisionHistoryLimit">
            The number of old ReplicaSets to retain to allow rollback. This is a pointer to
            distinguish between explicit zero and not specified. Defaults to 10.
            </param>
            <param name="strategy">
            The deployment strategy to use to replace existing pods with new ones.
            </param>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.MinReadySeconds">
            <summary>
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing, for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.Paused">
            <summary>
            Indicates that the deployment is paused.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.ProgressDeadlineSeconds">
            <summary>
            The maximum time in seconds for a deployment to make progress before it is
            considered to be failed. The deployment controller will continue to process
            failed deployments and a condition with a ProgressDeadlineExceeded reason will
            be surfaced in the deployment status. Note that progress will not be estimated
            during the time a deployment is paused. Defaults to 600s.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.Replicas">
            <summary>
            Number of desired pods. This is a pointer to distinguish between explicit zero
            and not specified. Defaults to 1.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.RevisionHistoryLimit">
            <summary>
            The number of old ReplicaSets to retain to allow rollback. This is a pointer to
            distinguish between explicit zero and not specified. Defaults to 10.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.Selector">
            <summary>
            Label selector for pods. Existing ReplicaSets whose pods are selected by this
            will be the ones affected by this deployment. It must match the pod template&apos;s
            labels.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.Strategy">
            <summary>
            The deployment strategy to use to replace existing pods with new ones.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentSpec.Template">
            <summary>
            Template describes the pods that will be created. The only allowed
            template.spec.restartPolicy value is &quot;Always&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DeploymentStatus">
            <summary>
            DeploymentStatus is the most recently observed status of the Deployment.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentStatus.#ctor">
            <summary>
            Initializes a new instance of the V1DeploymentStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentStatus.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1DeploymentCondition},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1DeploymentStatus class.
            </summary>
            <param name="availableReplicas">
            Total number of available pods (ready for at least minReadySeconds) targeted by
            this deployment.
            </param>
            <param name="collisionCount">
            Count of hash collisions for the Deployment. The Deployment controller uses this
            field as a collision avoidance mechanism when it needs to create the name for
            the newest ReplicaSet.
            </param>
            <param name="conditions">
            Represents the latest available observations of a deployment&apos;s current state.
            </param>
            <param name="observedGeneration">
            The generation observed by the deployment controller.
            </param>
            <param name="readyReplicas">
            readyReplicas is the number of pods targeted by this Deployment with a Ready
            Condition.
            </param>
            <param name="replicas">
            Total number of non-terminated pods targeted by this deployment (their labels
            match the selector).
            </param>
            <param name="unavailableReplicas">
            Total number of unavailable pods targeted by this deployment. This is the total
            number of pods that are still required for the deployment to have 100% available
            capacity. They may either be pods that are running but not yet available or pods
            that still have not been created.
            </param>
            <param name="updatedReplicas">
            Total number of non-terminated pods targeted by this deployment that have the
            desired template spec.
            </param>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.AvailableReplicas">
            <summary>
            Total number of available pods (ready for at least minReadySeconds) targeted by
            this deployment.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.CollisionCount">
            <summary>
            Count of hash collisions for the Deployment. The Deployment controller uses this
            field as a collision avoidance mechanism when it needs to create the name for
            the newest ReplicaSet.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.Conditions">
            <summary>
            Represents the latest available observations of a deployment&apos;s current state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.ObservedGeneration">
            <summary>
            The generation observed by the deployment controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.ReadyReplicas">
            <summary>
            readyReplicas is the number of pods targeted by this Deployment with a Ready
            Condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.Replicas">
            <summary>
            Total number of non-terminated pods targeted by this deployment (their labels
            match the selector).
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.UnavailableReplicas">
            <summary>
            Total number of unavailable pods targeted by this deployment. This is the total
            number of pods that are still required for the deployment to have 100% available
            capacity. They may either be pods that are running but not yet available or pods
            that still have not been created.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStatus.UpdatedReplicas">
            <summary>
            Total number of non-terminated pods targeted by this deployment that have the
            desired template spec.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DeploymentStrategy">
            <summary>
            DeploymentStrategy describes how to replace existing pods with new ones.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentStrategy.#ctor">
            <summary>
            Initializes a new instance of the V1DeploymentStrategy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentStrategy.#ctor(k8s.Models.V1RollingUpdateDeployment,System.String)">
            <summary>
            Initializes a new instance of the V1DeploymentStrategy class.
            </summary>
            <param name="rollingUpdate">
            Rolling update config params. Present only if DeploymentStrategyType =
            RollingUpdate.
            </param>
            <param name="type">
            Type of deployment. Can be &quot;Recreate&quot; or &quot;RollingUpdate&quot;. Default is
            RollingUpdate.
            </param>
        </member>
        <member name="P:k8s.Models.V1DeploymentStrategy.RollingUpdate">
            <summary>
            Rolling update config params. Present only if DeploymentStrategyType =
            RollingUpdate.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeploymentStrategy.Type">
            <summary>
            Type of deployment. Can be &quot;Recreate&quot; or &quot;RollingUpdate&quot;. Default is
            RollingUpdate.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeploymentStrategy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicaSet">
            <summary>
            ReplicaSet ensures that a specified number of pod replicas are running at any
            given time.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSet.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicaSet class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSet.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1ReplicaSetSpec,k8s.Models.V1ReplicaSetStatus)">
            <summary>
            Initializes a new instance of the V1ReplicaSet class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            If the Labels of a ReplicaSet are empty, they are defaulted to be the same as
            the Pod(s) that the ReplicaSet manages. Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the specification of the desired behavior of the ReplicaSet. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Status is the most recently observed status of the ReplicaSet. This data may be
            out of date by some window of time. Populated by the system. Read-only. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicaSet.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSet.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSet.Metadata">
            <summary>
            If the Labels of a ReplicaSet are empty, they are defaulted to be the same as
            the Pod(s) that the ReplicaSet manages. Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSet.Spec">
            <summary>
            Spec defines the specification of the desired behavior of the ReplicaSet. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSet.Status">
            <summary>
            Status is the most recently observed status of the ReplicaSet. This data may be
            out of date by some window of time. Populated by the system. Read-only. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSet.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicaSetCondition">
            <summary>
            ReplicaSetCondition describes the state of a replica set at a certain point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetCondition.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicaSetCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ReplicaSetCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of replica set condition.
            </param>
            <param name="lastTransitionTime">
            The last time the condition transitioned from one status to another.
            </param>
            <param name="message">
            A human readable message indicating details about the transition.
            </param>
            <param name="reason">
            The reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetCondition.LastTransitionTime">
            <summary>
            The last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetCondition.Message">
            <summary>
            A human readable message indicating details about the transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetCondition.Reason">
            <summary>
            The reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetCondition.Type">
            <summary>
            Type of replica set condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicaSetList">
            <summary>
            ReplicaSetList is a collection of ReplicaSets.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetList.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicaSetList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ReplicaSet},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ReplicaSetList class.
            </summary>
            <param name="items">
            List of ReplicaSets. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetList.Items">
            <summary>
            List of ReplicaSets. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicaSetSpec">
            <summary>
            ReplicaSetSpec is the specification of a ReplicaSet.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetSpec.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicaSetSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetSpec.#ctor(k8s.Models.V1LabelSelector,System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1PodTemplateSpec)">
            <summary>
            Initializes a new instance of the V1ReplicaSetSpec class.
            </summary>
            <param name="selector">
            Selector is a label query over pods that should match the replica count. Label
            keys and values that must match in order to be controlled by this replica set.
            It must match the pod template&apos;s labels. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </param>
            <param name="minReadySeconds">
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing, for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </param>
            <param name="replicas">
            Replicas is the number of desired replicas. This is a pointer to distinguish
            between explicit zero and unspecified. Defaults to 1. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
            </param>
            <param name="template">
            Template is the object that describes the pod that will be created if
            insufficient replicas are detected. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetSpec.MinReadySeconds">
            <summary>
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing, for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetSpec.Replicas">
            <summary>
            Replicas is the number of desired replicas. This is a pointer to distinguish
            between explicit zero and unspecified. Defaults to 1. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetSpec.Selector">
            <summary>
            Selector is a label query over pods that should match the replica count. Label
            keys and values that must match in order to be controlled by this replica set.
            It must match the pod template&apos;s labels. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetSpec.Template">
            <summary>
            Template is the object that describes the pod that will be created if
            insufficient replicas are detected. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicaSetStatus">
            <summary>
            ReplicaSetStatus represents the current status of a ReplicaSet.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetStatus.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicaSetStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetStatus.#ctor(System.Int32,System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1ReplicaSetCondition},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1ReplicaSetStatus class.
            </summary>
            <param name="replicas">
            Replicas is the most recently observed number of replicas. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
            </param>
            <param name="availableReplicas">
            The number of available replicas (ready for at least minReadySeconds) for this
            replica set.
            </param>
            <param name="conditions">
            Represents the latest available observations of a replica set&apos;s current state.
            </param>
            <param name="fullyLabeledReplicas">
            The number of pods that have labels matching the labels of the pod template of
            the replicaset.
            </param>
            <param name="observedGeneration">
            ObservedGeneration reflects the generation of the most recently observed
            ReplicaSet.
            </param>
            <param name="readyReplicas">
            readyReplicas is the number of pods targeted by this ReplicaSet with a Ready
            Condition.
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetStatus.AvailableReplicas">
            <summary>
            The number of available replicas (ready for at least minReadySeconds) for this
            replica set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetStatus.Conditions">
            <summary>
            Represents the latest available observations of a replica set&apos;s current state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetStatus.FullyLabeledReplicas">
            <summary>
            The number of pods that have labels matching the labels of the pod template of
            the replicaset.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetStatus.ObservedGeneration">
            <summary>
            ObservedGeneration reflects the generation of the most recently observed
            ReplicaSet.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetStatus.ReadyReplicas">
            <summary>
            readyReplicas is the number of pods targeted by this ReplicaSet with a Ready
            Condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicaSetStatus.Replicas">
            <summary>
            Replicas is the most recently observed number of replicas. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicaSetStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RollingUpdateDaemonSet">
            <summary>
            Spec to control the desired behavior of daemon set rolling update.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateDaemonSet.#ctor">
            <summary>
            Initializes a new instance of the V1RollingUpdateDaemonSet class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateDaemonSet.#ctor(k8s.Models.IntstrIntOrString,k8s.Models.IntstrIntOrString)">
            <summary>
            Initializes a new instance of the V1RollingUpdateDaemonSet class.
            </summary>
            <param name="maxSurge">
            The maximum number of nodes with an existing available DaemonSet pod that can
            have an updated DaemonSet pod during during an update. Value can be an absolute
            number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if
            MaxUnavailable is 0. Absolute number is calculated from percentage by rounding
            up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at
            most 30% of the total number of nodes that should be running the daemon pod
            (i.e. status.desiredNumberScheduled) can have their a new pod created before the
            old pod is marked as deleted. The update starts by launching new pods on 30% of
            nodes. Once an updated pod is available (Ready for at least minReadySeconds) the
            old DaemonSet pod on that node is marked deleted. If the old pod becomes
            unavailable for any reason (Ready transitions to false, is evicted, or is
            drained) an updated pod is immediatedly created on that node without considering
            surge limits. Allowing surge implies the possibility that the resources consumed
            by the daemonset on any given node can double if the readiness check fails, and
            so resource intensive daemonsets should take into account that they may cause
            evictions during disruption.
            </param>
            <param name="maxUnavailable">
            The maximum number of DaemonSet pods that can be unavailable during the update.
            Value can be an absolute number (ex: 5) or a percentage of total number of
            DaemonSet pods at the start of the update (ex: 10%). Absolute number is
            calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0
            Default value is 1. Example: when this is set to 30%, at most 30% of the total
            number of nodes that should be running the daemon pod (i.e.
            status.desiredNumberScheduled) can have their pods stopped for an update at any
            given time. The update starts by stopping at most 30% of those DaemonSet pods
            and then brings up new DaemonSet pods in their place. Once the new pods are
            available, it then proceeds onto other DaemonSet pods, thus ensuring that at
            least 70% of original number of DaemonSet pods are available at all times during
            the update.
            </param>
        </member>
        <member name="P:k8s.Models.V1RollingUpdateDaemonSet.MaxSurge">
            <summary>
            The maximum number of nodes with an existing available DaemonSet pod that can
            have an updated DaemonSet pod during during an update. Value can be an absolute
            number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if
            MaxUnavailable is 0. Absolute number is calculated from percentage by rounding
            up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at
            most 30% of the total number of nodes that should be running the daemon pod
            (i.e. status.desiredNumberScheduled) can have their a new pod created before the
            old pod is marked as deleted. The update starts by launching new pods on 30% of
            nodes. Once an updated pod is available (Ready for at least minReadySeconds) the
            old DaemonSet pod on that node is marked deleted. If the old pod becomes
            unavailable for any reason (Ready transitions to false, is evicted, or is
            drained) an updated pod is immediatedly created on that node without considering
            surge limits. Allowing surge implies the possibility that the resources consumed
            by the daemonset on any given node can double if the readiness check fails, and
            so resource intensive daemonsets should take into account that they may cause
            evictions during disruption.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RollingUpdateDaemonSet.MaxUnavailable">
            <summary>
            The maximum number of DaemonSet pods that can be unavailable during the update.
            Value can be an absolute number (ex: 5) or a percentage of total number of
            DaemonSet pods at the start of the update (ex: 10%). Absolute number is
            calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0
            Default value is 1. Example: when this is set to 30%, at most 30% of the total
            number of nodes that should be running the daemon pod (i.e.
            status.desiredNumberScheduled) can have their pods stopped for an update at any
            given time. The update starts by stopping at most 30% of those DaemonSet pods
            and then brings up new DaemonSet pods in their place. Once the new pods are
            available, it then proceeds onto other DaemonSet pods, thus ensuring that at
            least 70% of original number of DaemonSet pods are available at all times during
            the update.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateDaemonSet.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RollingUpdateDeployment">
            <summary>
            Spec to control the desired behavior of rolling update.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateDeployment.#ctor">
            <summary>
            Initializes a new instance of the V1RollingUpdateDeployment class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateDeployment.#ctor(k8s.Models.IntstrIntOrString,k8s.Models.IntstrIntOrString)">
            <summary>
            Initializes a new instance of the V1RollingUpdateDeployment class.
            </summary>
            <param name="maxSurge">
            The maximum number of pods that can be scheduled above the desired number of
            pods. Value can be an absolute number (ex: 5) or a percentage of desired pods
            (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is
            calculated from percentage by rounding up. Defaults to 25%. Example: when this
            is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling
            update starts, such that the total number of old and new pods do not exceed 130%
            of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up
            further, ensuring that total number of pods running at any time during the
            update is at most 130% of desired pods.
            </param>
            <param name="maxUnavailable">
            The maximum number of pods that can be unavailable during the update. Value can
            be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
            Absolute number is calculated from percentage by rounding down. This can not be
            0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old
            ReplicaSet can be scaled down to 70% of desired pods immediately when the
            rolling update starts. Once new pods are ready, old ReplicaSet can be scaled
            down further, followed by scaling up the new ReplicaSet, ensuring that the total
            number of pods available at all times during the update is at least 70% of
            desired pods.
            </param>
        </member>
        <member name="P:k8s.Models.V1RollingUpdateDeployment.MaxSurge">
            <summary>
            The maximum number of pods that can be scheduled above the desired number of
            pods. Value can be an absolute number (ex: 5) or a percentage of desired pods
            (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is
            calculated from percentage by rounding up. Defaults to 25%. Example: when this
            is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling
            update starts, such that the total number of old and new pods do not exceed 130%
            of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up
            further, ensuring that total number of pods running at any time during the
            update is at most 130% of desired pods.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RollingUpdateDeployment.MaxUnavailable">
            <summary>
            The maximum number of pods that can be unavailable during the update. Value can
            be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
            Absolute number is calculated from percentage by rounding down. This can not be
            0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old
            ReplicaSet can be scaled down to 70% of desired pods immediately when the
            rolling update starts. Once new pods are ready, old ReplicaSet can be scaled
            down further, followed by scaling up the new ReplicaSet, ensuring that the total
            number of pods available at all times during the update is at least 70% of
            desired pods.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateDeployment.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RollingUpdateStatefulSetStrategy">
            <summary>
            RollingUpdateStatefulSetStrategy is used to communicate parameter for
            RollingUpdateStatefulSetStrategyType.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateStatefulSetStrategy.#ctor">
            <summary>
            Initializes a new instance of the V1RollingUpdateStatefulSetStrategy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateStatefulSetStrategy.#ctor(k8s.Models.IntstrIntOrString,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1RollingUpdateStatefulSetStrategy class.
            </summary>
            <param name="maxUnavailable">
            The maximum number of pods that can be unavailable during the update. Value can
            be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
            Absolute number is calculated from percentage by rounding up. This can not be 0.
            Defaults to 1. This field is alpha-level and is only honored by servers that
            enable the MaxUnavailableStatefulSet feature. The field applies to all pods in
            the range 0 to Replicas-1. That means if there is any unavailable pod in the
            range 0 to Replicas-1, it will be counted towards MaxUnavailable.
            </param>
            <param name="partition">
            Partition indicates the ordinal at which the StatefulSet should be partitioned
            for updates. During a rolling update, all pods from ordinal Replicas-1 to
            Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
            This is helpful in being able to do a canary based deployment. The default value
            is 0.
            </param>
        </member>
        <member name="P:k8s.Models.V1RollingUpdateStatefulSetStrategy.MaxUnavailable">
            <summary>
            The maximum number of pods that can be unavailable during the update. Value can
            be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
            Absolute number is calculated from percentage by rounding up. This can not be 0.
            Defaults to 1. This field is alpha-level and is only honored by servers that
            enable the MaxUnavailableStatefulSet feature. The field applies to all pods in
            the range 0 to Replicas-1. That means if there is any unavailable pod in the
            range 0 to Replicas-1, it will be counted towards MaxUnavailable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RollingUpdateStatefulSetStrategy.Partition">
            <summary>
            Partition indicates the ordinal at which the StatefulSet should be partitioned
            for updates. During a rolling update, all pods from ordinal Replicas-1 to
            Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
            This is helpful in being able to do a canary based deployment. The default value
            is 0.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RollingUpdateStatefulSetStrategy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSet">
            <summary>
            StatefulSet represents a set of pods with consistent identities. Identities are
            defined as:
            - Network: A single stable DNS and hostname.
            - Storage: As many VolumeClaims as requested.
            
            The StatefulSet guarantees that a given network identity will always map to the
            same storage identity.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSet.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSet class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSet.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1StatefulSetSpec,k8s.Models.V1StatefulSetStatus)">
            <summary>
            Initializes a new instance of the V1StatefulSet class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the desired identities of pods in this set.
            </param>
            <param name="status">
            Status is the current status of Pods in this StatefulSet. This data may be out
            of date by some window of time.
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSet.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSet.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSet.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSet.Spec">
            <summary>
            Spec defines the desired identities of pods in this set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSet.Status">
            <summary>
            Status is the current status of Pods in this StatefulSet. This data may be out
            of date by some window of time.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSet.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSetCondition">
            <summary>
            StatefulSetCondition describes the state of a statefulset at a certain point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetCondition.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSetCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1StatefulSetCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of statefulset condition.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transitioned from one status to another.
            </param>
            <param name="message">
            A human readable message indicating details about the transition.
            </param>
            <param name="reason">
            The reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSetCondition.LastTransitionTime">
            <summary>
            Last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetCondition.Message">
            <summary>
            A human readable message indicating details about the transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetCondition.Reason">
            <summary>
            The reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetCondition.Type">
            <summary>
            Type of statefulset condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSetList">
            <summary>
            StatefulSetList is a collection of StatefulSets.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetList.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSetList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetList.#ctor(System.Collections.Generic.IList{k8s.Models.V1StatefulSet},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1StatefulSetList class.
            </summary>
            <param name="items">
            Items is the list of stateful sets.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSetList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetList.Items">
            <summary>
            Items is the list of stateful sets.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetList.Metadata">
            <summary>
            Standard list&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSetOrdinals">
            <summary>
            StatefulSetOrdinals describes the policy used for replica ordinal assignment in
            this StatefulSet.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetOrdinals.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSetOrdinals class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetOrdinals.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1StatefulSetOrdinals class.
            </summary>
            <param name="start">
            start is the number representing the first replica&apos;s index. It may be used to
            number replicas from an alternate index (eg: 1-indexed) over the default
            0-indexed names, or to orchestrate progressive movement of replicas from one
            StatefulSet to another. If set, replica indices will be in the range:
            [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
            If unset, defaults to 0. Replica indices will be in the range:
            [0, .spec.replicas).
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSetOrdinals.Start">
            <summary>
            start is the number representing the first replica&apos;s index. It may be used to
            number replicas from an alternate index (eg: 1-indexed) over the default
            0-indexed names, or to orchestrate progressive movement of replicas from one
            StatefulSet to another. If set, replica indices will be in the range:
            [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
            If unset, defaults to 0. Replica indices will be in the range:
            [0, .spec.replicas).
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetOrdinals.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSetPersistentVolumeClaimRetentionPolicy">
            <summary>
            StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for
            PVCs created from the StatefulSet VolumeClaimTemplates.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetPersistentVolumeClaimRetentionPolicy.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSetPersistentVolumeClaimRetentionPolicy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetPersistentVolumeClaimRetentionPolicy.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1StatefulSetPersistentVolumeClaimRetentionPolicy class.
            </summary>
            <param name="whenDeleted">
            WhenDeleted specifies what happens to PVCs created from StatefulSet
            VolumeClaimTemplates when the StatefulSet is deleted. The default policy of
            `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete`
            policy causes those PVCs to be deleted.
            </param>
            <param name="whenScaled">
            WhenScaled specifies what happens to PVCs created from StatefulSet
            VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of
            `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy
            causes the associated PVCs for any excess pods above the replica count to be
            deleted.
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSetPersistentVolumeClaimRetentionPolicy.WhenDeleted">
            <summary>
            WhenDeleted specifies what happens to PVCs created from StatefulSet
            VolumeClaimTemplates when the StatefulSet is deleted. The default policy of
            `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete`
            policy causes those PVCs to be deleted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetPersistentVolumeClaimRetentionPolicy.WhenScaled">
            <summary>
            WhenScaled specifies what happens to PVCs created from StatefulSet
            VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of
            `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy
            causes the associated PVCs for any excess pods above the replica count to be
            deleted.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetPersistentVolumeClaimRetentionPolicy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSetSpec">
            <summary>
            A StatefulSetSpec is the specification of a StatefulSet.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetSpec.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSetSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetSpec.#ctor(k8s.Models.V1LabelSelector,System.String,k8s.Models.V1PodTemplateSpec,System.Nullable{System.Int32},k8s.Models.V1StatefulSetOrdinals,k8s.Models.V1StatefulSetPersistentVolumeClaimRetentionPolicy,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1StatefulSetUpdateStrategy,System.Collections.Generic.IList{k8s.Models.V1PersistentVolumeClaim})">
            <summary>
            Initializes a new instance of the V1StatefulSetSpec class.
            </summary>
            <param name="selector">
            selector is a label query over pods that should match the replica count. It must
            match the pod template&apos;s labels. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </param>
            <param name="serviceName">
            serviceName is the name of the service that governs this StatefulSet. This
            service must exist before the StatefulSet, and is responsible for the network
            identity of the set. Pods get DNS/hostnames that follow the pattern:
            pod-specific-string.serviceName.default.svc.cluster.local where
            &quot;pod-specific-string&quot; is managed by the StatefulSet controller.
            </param>
            <param name="template">
            template is the object that describes the pod that will be created if
            insufficient replicas are detected. Each pod stamped out by the StatefulSet will
            fulfill this Template, but have a unique identity from the rest of the
            StatefulSet. Each pod will be named with the format
            &lt;statefulsetname&gt;-&lt;podindex&gt;. For example, a pod in a StatefulSet named &quot;web&quot;
            with index number &quot;3&quot; would be named &quot;web-3&quot;. The only allowed
            template.spec.restartPolicy value is &quot;Always&quot;.
            </param>
            <param name="minReadySeconds">
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </param>
            <param name="ordinals">
            ordinals controls the numbering of replica indices in a StatefulSet. The default
            ordinals behavior assigns a &quot;0&quot; index to the first replica and increments the
            index by one for each additional replica requested. Using the ordinals field
            requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.
            </param>
            <param name="persistentVolumeClaimRetentionPolicy">
            persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent
            volume claims created from volumeClaimTemplates. By default, all persistent
            volume claims are created as needed and retained until manually deleted. This
            policy allows the lifecycle to be altered, for example by deleting persistent
            volume claims when their stateful set is deleted, or when their pod is scaled
            down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled,
            which is alpha.  +optional
            </param>
            <param name="podManagementPolicy">
            podManagementPolicy controls how pods are created during initial scale up, when
            replacing pods on nodes, or when scaling down. The default policy is
            `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1,
            etc) and the controller will wait until each pod is ready before continuing.
            When scaling down, the pods are removed in the opposite order. The alternative
            policy is `Parallel` which will create pods in parallel to match the desired
            scale without waiting, and on scale down will delete all pods at once.
            </param>
            <param name="replicas">
            replicas is the desired number of replicas of the given Template. These are
            replicas in the sense that they are instantiations of the same Template, but
            individual replicas also have a consistent identity. If unspecified, defaults to
            1.
            </param>
            <param name="revisionHistoryLimit">
            revisionHistoryLimit is the maximum number of revisions that will be maintained
            in the StatefulSet&apos;s revision history. The revision history consists of all
            revisions not represented by a currently applied StatefulSetSpec version. The
            default value is 10.
            </param>
            <param name="updateStrategy">
            updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to
            update Pods in the StatefulSet when a revision is made to Template.
            </param>
            <param name="volumeClaimTemplates">
            volumeClaimTemplates is a list of claims that pods are allowed to reference. The
            StatefulSet controller is responsible for mapping network identities to claims
            in a way that maintains the identity of a pod. Every claim in this list must
            have at least one matching (by name) volumeMount in one container in the
            template. A claim in this list takes precedence over any volumes in the
            template, with the same name.
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.MinReadySeconds">
            <summary>
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.Ordinals">
            <summary>
            ordinals controls the numbering of replica indices in a StatefulSet. The default
            ordinals behavior assigns a &quot;0&quot; index to the first replica and increments the
            index by one for each additional replica requested. Using the ordinals field
            requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.PersistentVolumeClaimRetentionPolicy">
            <summary>
            persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent
            volume claims created from volumeClaimTemplates. By default, all persistent
            volume claims are created as needed and retained until manually deleted. This
            policy allows the lifecycle to be altered, for example by deleting persistent
            volume claims when their stateful set is deleted, or when their pod is scaled
            down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled,
            which is alpha.  +optional
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.PodManagementPolicy">
            <summary>
            podManagementPolicy controls how pods are created during initial scale up, when
            replacing pods on nodes, or when scaling down. The default policy is
            `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1,
            etc) and the controller will wait until each pod is ready before continuing.
            When scaling down, the pods are removed in the opposite order. The alternative
            policy is `Parallel` which will create pods in parallel to match the desired
            scale without waiting, and on scale down will delete all pods at once.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.Replicas">
            <summary>
            replicas is the desired number of replicas of the given Template. These are
            replicas in the sense that they are instantiations of the same Template, but
            individual replicas also have a consistent identity. If unspecified, defaults to
            1.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.RevisionHistoryLimit">
            <summary>
            revisionHistoryLimit is the maximum number of revisions that will be maintained
            in the StatefulSet&apos;s revision history. The revision history consists of all
            revisions not represented by a currently applied StatefulSetSpec version. The
            default value is 10.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.Selector">
            <summary>
            selector is a label query over pods that should match the replica count. It must
            match the pod template&apos;s labels. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.ServiceName">
            <summary>
            serviceName is the name of the service that governs this StatefulSet. This
            service must exist before the StatefulSet, and is responsible for the network
            identity of the set. Pods get DNS/hostnames that follow the pattern:
            pod-specific-string.serviceName.default.svc.cluster.local where
            &quot;pod-specific-string&quot; is managed by the StatefulSet controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.Template">
            <summary>
            template is the object that describes the pod that will be created if
            insufficient replicas are detected. Each pod stamped out by the StatefulSet will
            fulfill this Template, but have a unique identity from the rest of the
            StatefulSet. Each pod will be named with the format
            &lt;statefulsetname&gt;-&lt;podindex&gt;. For example, a pod in a StatefulSet named &quot;web&quot;
            with index number &quot;3&quot; would be named &quot;web-3&quot;. The only allowed
            template.spec.restartPolicy value is &quot;Always&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.UpdateStrategy">
            <summary>
            updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to
            update Pods in the StatefulSet when a revision is made to Template.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetSpec.VolumeClaimTemplates">
            <summary>
            volumeClaimTemplates is a list of claims that pods are allowed to reference. The
            StatefulSet controller is responsible for mapping network identities to claims
            in a way that maintains the identity of a pod. Every claim in this list must
            have at least one matching (by name) volumeMount in one container in the
            template. A claim in this list takes precedence over any volumes in the
            template, with the same name.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSetStatus">
            <summary>
            StatefulSetStatus represents the current state of a StatefulSet.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetStatus.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSetStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetStatus.#ctor(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1StatefulSetCondition},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1StatefulSetStatus class.
            </summary>
            <param name="replicas">
            replicas is the number of Pods created by the StatefulSet controller.
            </param>
            <param name="availableReplicas">
            Total number of available pods (ready for at least minReadySeconds) targeted by
            this statefulset.
            </param>
            <param name="collisionCount">
            collisionCount is the count of hash collisions for the StatefulSet. The
            StatefulSet controller uses this field as a collision avoidance mechanism when
            it needs to create the name for the newest ControllerRevision.
            </param>
            <param name="conditions">
            Represents the latest available observations of a statefulset&apos;s current state.
            </param>
            <param name="currentReplicas">
            currentReplicas is the number of Pods created by the StatefulSet controller from
            the StatefulSet version indicated by currentRevision.
            </param>
            <param name="currentRevision">
            currentRevision, if not empty, indicates the version of the StatefulSet used to
            generate Pods in the sequence [0,currentReplicas).
            </param>
            <param name="observedGeneration">
            observedGeneration is the most recent generation observed for this StatefulSet.
            It corresponds to the StatefulSet&apos;s generation, which is updated on mutation by
            the API Server.
            </param>
            <param name="readyReplicas">
            readyReplicas is the number of pods created for this StatefulSet with a Ready
            Condition.
            </param>
            <param name="updateRevision">
            updateRevision, if not empty, indicates the version of the StatefulSet used to
            generate Pods in the sequence [replicas-updatedReplicas,replicas)
            </param>
            <param name="updatedReplicas">
            updatedReplicas is the number of Pods created by the StatefulSet controller from
            the StatefulSet version indicated by updateRevision.
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.AvailableReplicas">
            <summary>
            Total number of available pods (ready for at least minReadySeconds) targeted by
            this statefulset.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.CollisionCount">
            <summary>
            collisionCount is the count of hash collisions for the StatefulSet. The
            StatefulSet controller uses this field as a collision avoidance mechanism when
            it needs to create the name for the newest ControllerRevision.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.Conditions">
            <summary>
            Represents the latest available observations of a statefulset&apos;s current state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.CurrentReplicas">
            <summary>
            currentReplicas is the number of Pods created by the StatefulSet controller from
            the StatefulSet version indicated by currentRevision.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.CurrentRevision">
            <summary>
            currentRevision, if not empty, indicates the version of the StatefulSet used to
            generate Pods in the sequence [0,currentReplicas).
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.ObservedGeneration">
            <summary>
            observedGeneration is the most recent generation observed for this StatefulSet.
            It corresponds to the StatefulSet&apos;s generation, which is updated on mutation by
            the API Server.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.ReadyReplicas">
            <summary>
            readyReplicas is the number of pods created for this StatefulSet with a Ready
            Condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.Replicas">
            <summary>
            replicas is the number of Pods created by the StatefulSet controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.UpdateRevision">
            <summary>
            updateRevision, if not empty, indicates the version of the StatefulSet used to
            generate Pods in the sequence [replicas-updatedReplicas,replicas)
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetStatus.UpdatedReplicas">
            <summary>
            updatedReplicas is the number of Pods created by the StatefulSet controller from
            the StatefulSet version indicated by updateRevision.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatefulSetUpdateStrategy">
            <summary>
            StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller
            will use to perform updates. It includes any additional parameters necessary to
            perform the update for the indicated strategy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetUpdateStrategy.#ctor">
            <summary>
            Initializes a new instance of the V1StatefulSetUpdateStrategy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetUpdateStrategy.#ctor(k8s.Models.V1RollingUpdateStatefulSetStrategy,System.String)">
            <summary>
            Initializes a new instance of the V1StatefulSetUpdateStrategy class.
            </summary>
            <param name="rollingUpdate">
            RollingUpdate is used to communicate parameters when Type is
            RollingUpdateStatefulSetStrategyType.
            </param>
            <param name="type">
            Type indicates the type of the StatefulSetUpdateStrategy. Default is
            RollingUpdate.
            </param>
        </member>
        <member name="P:k8s.Models.V1StatefulSetUpdateStrategy.RollingUpdate">
            <summary>
            RollingUpdate is used to communicate parameters when Type is
            RollingUpdateStatefulSetStrategyType.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatefulSetUpdateStrategy.Type">
            <summary>
            Type indicates the type of the StatefulSetUpdateStrategy. Default is
            RollingUpdate.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatefulSetUpdateStrategy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1BoundObjectReference">
            <summary>
            BoundObjectReference is a reference to an object that a token is bound to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1BoundObjectReference.#ctor">
            <summary>
            Initializes a new instance of the V1BoundObjectReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1BoundObjectReference.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1BoundObjectReference class.
            </summary>
            <param name="apiVersion">
            API version of the referent.
            </param>
            <param name="kind">
            Kind of the referent. Valid kinds are &apos;Pod&apos; and &apos;Secret&apos;.
            </param>
            <param name="name">
            Name of the referent.
            </param>
            <param name="uid">
            UID of the referent.
            </param>
        </member>
        <member name="P:k8s.Models.V1BoundObjectReference.ApiVersion">
            <summary>
            API version of the referent.
            </summary>
        </member>
        <member name="P:k8s.Models.V1BoundObjectReference.Kind">
            <summary>
            Kind of the referent. Valid kinds are &apos;Pod&apos; and &apos;Secret&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1BoundObjectReference.Name">
            <summary>
            Name of the referent.
            </summary>
        </member>
        <member name="P:k8s.Models.V1BoundObjectReference.Uid">
            <summary>
            UID of the referent.
            </summary>
        </member>
        <member name="M:k8s.Models.V1BoundObjectReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SelfSubjectReview">
            <summary>
            SelfSubjectReview contains the user information that the kube-apiserver has
            about the user making this request. When using impersonation, users will receive
            the user info of the user being impersonated.  If impersonation or request
            header authentication is used, any extra keys will have their case ignored and
            returned as lowercase.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectReview.#ctor">
            <summary>
            Initializes a new instance of the V1SelfSubjectReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectReview.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1SelfSubjectReviewStatus)">
            <summary>
            Initializes a new instance of the V1SelfSubjectReview class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server with the user attributes.
            </param>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectReview.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectReview.Status">
            <summary>
            Status is filled in by the server with the user attributes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SelfSubjectReviewStatus">
            <summary>
            SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectReviewStatus.#ctor">
            <summary>
            Initializes a new instance of the V1SelfSubjectReviewStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectReviewStatus.#ctor(k8s.Models.V1UserInfo)">
            <summary>
            Initializes a new instance of the V1SelfSubjectReviewStatus class.
            </summary>
            <param name="userInfo">
            User attributes of the user making this request.
            </param>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectReviewStatus.UserInfo">
            <summary>
            User attributes of the user making this request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectReviewStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Authenticationv1TokenRequest">
            <summary>
            TokenRequest requests a token for a given service account.
            </summary>
        </member>
        <member name="M:k8s.Models.Authenticationv1TokenRequest.#ctor">
            <summary>
            Initializes a new instance of the Authenticationv1TokenRequest class.
            </summary>
        </member>
        <member name="M:k8s.Models.Authenticationv1TokenRequest.#ctor(k8s.Models.V1TokenRequestSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1TokenRequestStatus)">
            <summary>
            Initializes a new instance of the Authenticationv1TokenRequest class.
            </summary>
            <param name="spec">
            Spec holds information about the request being evaluated
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server and indicates whether the token can be
            authenticated.
            </param>
        </member>
        <member name="P:k8s.Models.Authenticationv1TokenRequest.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.Authenticationv1TokenRequest.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.Authenticationv1TokenRequest.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.Authenticationv1TokenRequest.Spec">
            <summary>
            Spec holds information about the request being evaluated
            </summary>
        </member>
        <member name="P:k8s.Models.Authenticationv1TokenRequest.Status">
            <summary>
            Status is filled in by the server and indicates whether the token can be
            authenticated.
            </summary>
        </member>
        <member name="M:k8s.Models.Authenticationv1TokenRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TokenRequestSpec">
            <summary>
            TokenRequestSpec contains client provided parameters of a token request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenRequestSpec.#ctor">
            <summary>
            Initializes a new instance of the V1TokenRequestSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenRequestSpec.#ctor(System.Collections.Generic.IList{System.String},k8s.Models.V1BoundObjectReference,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V1TokenRequestSpec class.
            </summary>
            <param name="audiences">
            Audiences are the intendend audiences of the token. A recipient of a token must
            identify themself with an identifier in the list of audiences of the token, and
            otherwise should reject the token. A token issued for multiple audiences may be
            used to authenticate against any of the audiences listed but implies a high
            degree of trust between the target audiences.
            </param>
            <param name="boundObjectRef">
            BoundObjectRef is a reference to an object that the token will be bound to. The
            token will only be valid for as long as the bound object exists. NOTE: The API
            server&apos;s TokenReview endpoint will validate the BoundObjectRef, but other
            audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
            </param>
            <param name="expirationSeconds">
            ExpirationSeconds is the requested duration of validity of the request. The
            token issuer may return a token with a different validity duration so a client
            needs to check the &apos;expiration&apos; field in a response.
            </param>
        </member>
        <member name="P:k8s.Models.V1TokenRequestSpec.Audiences">
            <summary>
            Audiences are the intendend audiences of the token. A recipient of a token must
            identify themself with an identifier in the list of audiences of the token, and
            otherwise should reject the token. A token issued for multiple audiences may be
            used to authenticate against any of the audiences listed but implies a high
            degree of trust between the target audiences.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenRequestSpec.BoundObjectRef">
            <summary>
            BoundObjectRef is a reference to an object that the token will be bound to. The
            token will only be valid for as long as the bound object exists. NOTE: The API
            server&apos;s TokenReview endpoint will validate the BoundObjectRef, but other
            audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenRequestSpec.ExpirationSeconds">
            <summary>
            ExpirationSeconds is the requested duration of validity of the request. The
            token issuer may return a token with a different validity duration so a client
            needs to check the &apos;expiration&apos; field in a response.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenRequestSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TokenRequestStatus">
            <summary>
            TokenRequestStatus is the result of a token request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenRequestStatus.#ctor">
            <summary>
            Initializes a new instance of the V1TokenRequestStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenRequestStatus.#ctor(System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the V1TokenRequestStatus class.
            </summary>
            <param name="expirationTimestamp">
            ExpirationTimestamp is the time of expiration of the returned token.
            </param>
            <param name="token">
            Token is the opaque bearer token.
            </param>
        </member>
        <member name="P:k8s.Models.V1TokenRequestStatus.ExpirationTimestamp">
            <summary>
            ExpirationTimestamp is the time of expiration of the returned token.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenRequestStatus.Token">
            <summary>
            Token is the opaque bearer token.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenRequestStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TokenReview">
            <summary>
            TokenReview attempts to authenticate a token to a known user. Note: TokenReview
            requests may be cached by the webhook token authenticator plugin in the
            kube-apiserver.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReview.#ctor">
            <summary>
            Initializes a new instance of the V1TokenReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReview.#ctor(k8s.Models.V1TokenReviewSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1TokenReviewStatus)">
            <summary>
            Initializes a new instance of the V1TokenReview class.
            </summary>
            <param name="spec">
            Spec holds information about the request being evaluated
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server and indicates whether the request can be
            authenticated.
            </param>
        </member>
        <member name="P:k8s.Models.V1TokenReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReview.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReview.Spec">
            <summary>
            Spec holds information about the request being evaluated
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReview.Status">
            <summary>
            Status is filled in by the server and indicates whether the request can be
            authenticated.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TokenReviewSpec">
            <summary>
            TokenReviewSpec is a description of the token authentication request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReviewSpec.#ctor">
            <summary>
            Initializes a new instance of the V1TokenReviewSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReviewSpec.#ctor(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1TokenReviewSpec class.
            </summary>
            <param name="audiences">
            Audiences is a list of the identifiers that the resource server presented with
            the token identifies as. Audience-aware token authenticators will verify that
            the token was intended for at least one of the audiences in this list. If no
            audiences are provided, the audience will default to the audience of the
            Kubernetes apiserver.
            </param>
            <param name="token">
            Token is the opaque bearer token.
            </param>
        </member>
        <member name="P:k8s.Models.V1TokenReviewSpec.Audiences">
            <summary>
            Audiences is a list of the identifiers that the resource server presented with
            the token identifies as. Audience-aware token authenticators will verify that
            the token was intended for at least one of the audiences in this list. If no
            audiences are provided, the audience will default to the audience of the
            Kubernetes apiserver.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReviewSpec.Token">
            <summary>
            Token is the opaque bearer token.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReviewSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TokenReviewStatus">
            <summary>
            TokenReviewStatus is the result of the token authentication request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReviewStatus.#ctor">
            <summary>
            Initializes a new instance of the V1TokenReviewStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReviewStatus.#ctor(System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},System.String,k8s.Models.V1UserInfo)">
            <summary>
            Initializes a new instance of the V1TokenReviewStatus class.
            </summary>
            <param name="audiences">
            Audiences are audience identifiers chosen by the authenticator that are
            compatible with both the TokenReview and token. An identifier is any identifier
            in the intersection of the TokenReviewSpec audiences and the token&apos;s audiences.
            A client of the TokenReview API that sets the spec.audiences field should
            validate that a compatible audience identifier is returned in the
            status.audiences field to ensure that the TokenReview server is audience aware.
            If a TokenReview returns an empty status.audience field where
            status.authenticated is &quot;true&quot;, the token is valid against the audience of the
            Kubernetes API server.
            </param>
            <param name="authenticated">
            Authenticated indicates that the token was associated with a known user.
            </param>
            <param name="error">
            Error indicates that the token couldn&apos;t be checked
            </param>
            <param name="user">
            User is the UserInfo associated with the provided token.
            </param>
        </member>
        <member name="P:k8s.Models.V1TokenReviewStatus.Audiences">
            <summary>
            Audiences are audience identifiers chosen by the authenticator that are
            compatible with both the TokenReview and token. An identifier is any identifier
            in the intersection of the TokenReviewSpec audiences and the token&apos;s audiences.
            A client of the TokenReview API that sets the spec.audiences field should
            validate that a compatible audience identifier is returned in the
            status.audiences field to ensure that the TokenReview server is audience aware.
            If a TokenReview returns an empty status.audience field where
            status.authenticated is &quot;true&quot;, the token is valid against the audience of the
            Kubernetes API server.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReviewStatus.Authenticated">
            <summary>
            Authenticated indicates that the token was associated with a known user.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReviewStatus.Error">
            <summary>
            Error indicates that the token couldn&apos;t be checked
            </summary>
        </member>
        <member name="P:k8s.Models.V1TokenReviewStatus.User">
            <summary>
            User is the UserInfo associated with the provided token.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TokenReviewStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1UserInfo">
            <summary>
            UserInfo holds the information about the user needed to implement the user.Info
            interface.
            </summary>
        </member>
        <member name="M:k8s.Models.V1UserInfo.#ctor">
            <summary>
            Initializes a new instance of the V1UserInfo class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1UserInfo.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1UserInfo class.
            </summary>
            <param name="extra">
            Any additional information provided by the authenticator.
            </param>
            <param name="groups">
            The names of groups this user is a part of.
            </param>
            <param name="uid">
            A unique value that identifies this user across time. If this user is deleted
            and another user by the same name is added, they will have different UIDs.
            </param>
            <param name="username">
            The name that uniquely identifies this user among all active users.
            </param>
        </member>
        <member name="P:k8s.Models.V1UserInfo.Extra">
            <summary>
            Any additional information provided by the authenticator.
            </summary>
        </member>
        <member name="P:k8s.Models.V1UserInfo.Groups">
            <summary>
            The names of groups this user is a part of.
            </summary>
        </member>
        <member name="P:k8s.Models.V1UserInfo.Uid">
            <summary>
            A unique value that identifies this user across time. If this user is deleted
            and another user by the same name is added, they will have different UIDs.
            </summary>
        </member>
        <member name="P:k8s.Models.V1UserInfo.Username">
            <summary>
            The name that uniquely identifies this user among all active users.
            </summary>
        </member>
        <member name="M:k8s.Models.V1UserInfo.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1SelfSubjectReview">
            <summary>
            SelfSubjectReview contains the user information that the kube-apiserver has
            about the user making this request. When using impersonation, users will receive
            the user info of the user being impersonated.  If impersonation or request
            header authentication is used, any extra keys will have their case ignored and
            returned as lowercase.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1SelfSubjectReview.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1SelfSubjectReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1SelfSubjectReview.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha1SelfSubjectReviewStatus)">
            <summary>
            Initializes a new instance of the V1alpha1SelfSubjectReview class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server with the user attributes.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1SelfSubjectReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1SelfSubjectReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1SelfSubjectReview.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1SelfSubjectReview.Status">
            <summary>
            Status is filled in by the server with the user attributes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1SelfSubjectReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1SelfSubjectReviewStatus">
            <summary>
            SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1SelfSubjectReviewStatus.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1SelfSubjectReviewStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1SelfSubjectReviewStatus.#ctor(k8s.Models.V1UserInfo)">
            <summary>
            Initializes a new instance of the V1alpha1SelfSubjectReviewStatus class.
            </summary>
            <param name="userInfo">
            User attributes of the user making this request.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1SelfSubjectReviewStatus.UserInfo">
            <summary>
            User attributes of the user making this request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1SelfSubjectReviewStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1SelfSubjectReview">
            <summary>
            SelfSubjectReview contains the user information that the kube-apiserver has
            about the user making this request. When using impersonation, users will receive
            the user info of the user being impersonated.  If impersonation or request
            header authentication is used, any extra keys will have their case ignored and
            returned as lowercase.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1SelfSubjectReview.#ctor">
            <summary>
            Initializes a new instance of the V1beta1SelfSubjectReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1SelfSubjectReview.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1beta1SelfSubjectReviewStatus)">
            <summary>
            Initializes a new instance of the V1beta1SelfSubjectReview class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server with the user attributes.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1SelfSubjectReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1SelfSubjectReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1SelfSubjectReview.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta1SelfSubjectReview.Status">
            <summary>
            Status is filled in by the server with the user attributes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1SelfSubjectReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta1SelfSubjectReviewStatus">
            <summary>
            SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1SelfSubjectReviewStatus.#ctor">
            <summary>
            Initializes a new instance of the V1beta1SelfSubjectReviewStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1SelfSubjectReviewStatus.#ctor(k8s.Models.V1UserInfo)">
            <summary>
            Initializes a new instance of the V1beta1SelfSubjectReviewStatus class.
            </summary>
            <param name="userInfo">
            User attributes of the user making this request.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta1SelfSubjectReviewStatus.UserInfo">
            <summary>
            User attributes of the user making this request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta1SelfSubjectReviewStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LocalSubjectAccessReview">
            <summary>
            LocalSubjectAccessReview checks whether or not a user or group can perform an
            action in a given namespace. Having a namespace scoped resource makes it much
            easier to grant namespace scoped policy that includes permissions checking.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalSubjectAccessReview.#ctor">
            <summary>
            Initializes a new instance of the V1LocalSubjectAccessReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalSubjectAccessReview.#ctor(k8s.Models.V1SubjectAccessReviewSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1SubjectAccessReviewStatus)">
            <summary>
            Initializes a new instance of the V1LocalSubjectAccessReview class.
            </summary>
            <param name="spec">
            Spec holds information about the request being evaluated.  spec.namespace must
            be equal to the namespace you made the request against.  If empty, it is
            defaulted.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server and indicates whether the request is allowed
            or not
            </param>
        </member>
        <member name="P:k8s.Models.V1LocalSubjectAccessReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1LocalSubjectAccessReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1LocalSubjectAccessReview.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1LocalSubjectAccessReview.Spec">
            <summary>
            Spec holds information about the request being evaluated.  spec.namespace must
            be equal to the namespace you made the request against.  If empty, it is
            defaulted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LocalSubjectAccessReview.Status">
            <summary>
            Status is filled in by the server and indicates whether the request is allowed
            or not
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalSubjectAccessReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NonResourceAttributes">
            <summary>
            NonResourceAttributes includes the authorization attributes available for
            non-resource requests to the Authorizer interface
            </summary>
        </member>
        <member name="M:k8s.Models.V1NonResourceAttributes.#ctor">
            <summary>
            Initializes a new instance of the V1NonResourceAttributes class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NonResourceAttributes.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1NonResourceAttributes class.
            </summary>
            <param name="path">
            Path is the URL path of the request
            </param>
            <param name="verb">
            Verb is the standard HTTP verb
            </param>
        </member>
        <member name="P:k8s.Models.V1NonResourceAttributes.Path">
            <summary>
            Path is the URL path of the request
            </summary>
        </member>
        <member name="P:k8s.Models.V1NonResourceAttributes.Verb">
            <summary>
            Verb is the standard HTTP verb
            </summary>
        </member>
        <member name="M:k8s.Models.V1NonResourceAttributes.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NonResourceRule">
            <summary>
            NonResourceRule holds information that describes a rule for the non-resource
            </summary>
        </member>
        <member name="M:k8s.Models.V1NonResourceRule.#ctor">
            <summary>
            Initializes a new instance of the V1NonResourceRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NonResourceRule.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1NonResourceRule class.
            </summary>
            <param name="verbs">
            Verb is a list of kubernetes non-resource API verbs, like: get, post, put,
            delete, patch, head, options.  &quot;*&quot; means all.
            </param>
            <param name="nonResourceURLs">
            NonResourceURLs is a set of partial urls that a user should have access to.  *s
            are allowed, but only as the full, final step in the path.  &quot;*&quot; means all.
            </param>
        </member>
        <member name="P:k8s.Models.V1NonResourceRule.NonResourceURLs">
            <summary>
            NonResourceURLs is a set of partial urls that a user should have access to.  *s
            are allowed, but only as the full, final step in the path.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NonResourceRule.Verbs">
            <summary>
            Verb is a list of kubernetes non-resource API verbs, like: get, post, put,
            delete, patch, head, options.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NonResourceRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceAttributes">
            <summary>
            ResourceAttributes includes the authorization attributes available for resource
            requests to the Authorizer interface
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceAttributes.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceAttributes class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceAttributes.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ResourceAttributes class.
            </summary>
            <param name="group">
            Group is the API Group of the Resource.  &quot;*&quot; means all.
            </param>
            <param name="name">
            Name is the name of the resource being requested for a &quot;get&quot; or deleted for a
            &quot;delete&quot;. &quot;&quot; (empty) means all.
            </param>
            <param name="namespaceProperty">
            Namespace is the namespace of the action being requested.  Currently, there is
            no distinction between no namespace and all namespaces &quot;&quot; (empty) is defaulted
            for LocalSubjectAccessReviews &quot;&quot; (empty) is empty for cluster-scoped resources
            &quot;&quot; (empty) means &quot;all&quot; for namespace scoped resources from a SubjectAccessReview
            or SelfSubjectAccessReview
            </param>
            <param name="resource">
            Resource is one of the existing resource types.  &quot;*&quot; means all.
            </param>
            <param name="subresource">
            Subresource is one of the existing resource types.  &quot;&quot; means none.
            </param>
            <param name="verb">
            Verb is a kubernetes resource API verb, like: get, list, watch, create, update,
            delete, proxy.  &quot;*&quot; means all.
            </param>
            <param name="version">
            Version is the API Version of the Resource.  &quot;*&quot; means all.
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceAttributes.Group">
            <summary>
            Group is the API Group of the Resource.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceAttributes.Name">
            <summary>
            Name is the name of the resource being requested for a &quot;get&quot; or deleted for a
            &quot;delete&quot;. &quot;&quot; (empty) means all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceAttributes.NamespaceProperty">
            <summary>
            Namespace is the namespace of the action being requested.  Currently, there is
            no distinction between no namespace and all namespaces &quot;&quot; (empty) is defaulted
            for LocalSubjectAccessReviews &quot;&quot; (empty) is empty for cluster-scoped resources
            &quot;&quot; (empty) means &quot;all&quot; for namespace scoped resources from a SubjectAccessReview
            or SelfSubjectAccessReview
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceAttributes.Resource">
            <summary>
            Resource is one of the existing resource types.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceAttributes.Subresource">
            <summary>
            Subresource is one of the existing resource types.  &quot;&quot; means none.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceAttributes.Verb">
            <summary>
            Verb is a kubernetes resource API verb, like: get, list, watch, create, update,
            delete, proxy.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceAttributes.Version">
            <summary>
            Version is the API Version of the Resource.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceAttributes.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceRule">
            <summary>
            ResourceRule is the list of actions the subject is allowed to perform on
            resources. The list ordering isn&apos;t significant, may contain duplicates, and
            possibly be incomplete.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceRule.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceRule.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1ResourceRule class.
            </summary>
            <param name="verbs">
            Verb is a list of kubernetes resource API verbs, like: get, list, watch, create,
            update, delete, proxy.  &quot;*&quot; means all.
            </param>
            <param name="apiGroups">
            APIGroups is the name of the APIGroup that contains the resources.  If multiple
            API groups are specified, any action requested against one of the enumerated
            resources in any API group will be allowed.  &quot;*&quot; means all.
            </param>
            <param name="resourceNames">
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.  &quot;*&quot; means all.
            </param>
            <param name="resources">
            Resources is a list of resources this rule applies to.  &quot;*&quot; means all in the
            specified apiGroups.
            &quot;*/foo&quot; represents the subresource &apos;foo&apos; for all resources in the specified
            apiGroups.
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceRule.ApiGroups">
            <summary>
            APIGroups is the name of the APIGroup that contains the resources.  If multiple
            API groups are specified, any action requested against one of the enumerated
            resources in any API group will be allowed.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceRule.ResourceNames">
            <summary>
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceRule.Resources">
            <summary>
            Resources is a list of resources this rule applies to.  &quot;*&quot; means all in the
            specified apiGroups.
            &quot;*/foo&quot; represents the subresource &apos;foo&apos; for all resources in the specified
            apiGroups.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceRule.Verbs">
            <summary>
            Verb is a list of kubernetes resource API verbs, like: get, list, watch, create,
            update, delete, proxy.  &quot;*&quot; means all.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SelfSubjectAccessReview">
            <summary>
            SelfSubjectAccessReview checks whether or the current user can perform an
            action.  Not filling in a spec.namespace means &quot;in all namespaces&quot;.  Self is a
            special case, because users should always be able to check whether they can
            perform an action
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectAccessReview.#ctor">
            <summary>
            Initializes a new instance of the V1SelfSubjectAccessReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectAccessReview.#ctor(k8s.Models.V1SelfSubjectAccessReviewSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1SubjectAccessReviewStatus)">
            <summary>
            Initializes a new instance of the V1SelfSubjectAccessReview class.
            </summary>
            <param name="spec">
            Spec holds information about the request being evaluated.  user and groups must
            be empty
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server and indicates whether the request is allowed
            or not
            </param>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectAccessReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectAccessReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectAccessReview.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectAccessReview.Spec">
            <summary>
            Spec holds information about the request being evaluated.  user and groups must
            be empty
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectAccessReview.Status">
            <summary>
            Status is filled in by the server and indicates whether the request is allowed
            or not
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectAccessReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SelfSubjectAccessReviewSpec">
            <summary>
            SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one
            of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must
            be set
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectAccessReviewSpec.#ctor">
            <summary>
            Initializes a new instance of the V1SelfSubjectAccessReviewSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectAccessReviewSpec.#ctor(k8s.Models.V1NonResourceAttributes,k8s.Models.V1ResourceAttributes)">
            <summary>
            Initializes a new instance of the V1SelfSubjectAccessReviewSpec class.
            </summary>
            <param name="nonResourceAttributes">
            NonResourceAttributes describes information for a non-resource access request
            </param>
            <param name="resourceAttributes">
            ResourceAuthorizationAttributes describes information for a resource access
            request
            </param>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectAccessReviewSpec.NonResourceAttributes">
            <summary>
            NonResourceAttributes describes information for a non-resource access request
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectAccessReviewSpec.ResourceAttributes">
            <summary>
            ResourceAuthorizationAttributes describes information for a resource access
            request
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectAccessReviewSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SelfSubjectRulesReview">
            <summary>
            SelfSubjectRulesReview enumerates the set of actions the current user can
            perform within a namespace. The returned list of actions may be incomplete
            depending on the server&apos;s authorization mode, and any errors experienced during
            the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide
            actions, or to quickly let an end user reason about their permissions. It should
            NOT Be used by external systems to drive authorization decisions as this raises
            confused deputy, cache lifetime/revocation, and correctness concerns.
            SubjectAccessReview, and LocalAccessReview are the correct way to defer
            authorization decisions to the API server.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectRulesReview.#ctor">
            <summary>
            Initializes a new instance of the V1SelfSubjectRulesReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectRulesReview.#ctor(k8s.Models.V1SelfSubjectRulesReviewSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1SubjectRulesReviewStatus)">
            <summary>
            Initializes a new instance of the V1SelfSubjectRulesReview class.
            </summary>
            <param name="spec">
            Spec holds information about the request being evaluated.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server and indicates the set of actions a user can
            perform.
            </param>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectRulesReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectRulesReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectRulesReview.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectRulesReview.Spec">
            <summary>
            Spec holds information about the request being evaluated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectRulesReview.Status">
            <summary>
            Status is filled in by the server and indicates the set of actions a user can
            perform.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectRulesReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SelfSubjectRulesReviewSpec">
            <summary>
            SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectRulesReviewSpec.#ctor">
            <summary>
            Initializes a new instance of the V1SelfSubjectRulesReviewSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectRulesReviewSpec.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1SelfSubjectRulesReviewSpec class.
            </summary>
            <param name="namespaceProperty">
            Namespace to evaluate rules for. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1SelfSubjectRulesReviewSpec.NamespaceProperty">
            <summary>
            Namespace to evaluate rules for. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SelfSubjectRulesReviewSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SubjectAccessReview">
            <summary>
            SubjectAccessReview checks whether or not a user or group can perform an action.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReview.#ctor">
            <summary>
            Initializes a new instance of the V1SubjectAccessReview class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReview.#ctor(k8s.Models.V1SubjectAccessReviewSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1SubjectAccessReviewStatus)">
            <summary>
            Initializes a new instance of the V1SubjectAccessReview class.
            </summary>
            <param name="spec">
            Spec holds information about the request being evaluated
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            Status is filled in by the server and indicates whether the request is allowed
            or not
            </param>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReview.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReview.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReview.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReview.Spec">
            <summary>
            Spec holds information about the request being evaluated
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReview.Status">
            <summary>
            Status is filled in by the server and indicates whether the request is allowed
            or not
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReview.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SubjectAccessReviewSpec">
            <summary>
            SubjectAccessReviewSpec is a description of the access request.  Exactly one of
            ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be
            set
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReviewSpec.#ctor">
            <summary>
            Initializes a new instance of the V1SubjectAccessReviewSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReviewSpec.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IList{System.String},k8s.Models.V1NonResourceAttributes,k8s.Models.V1ResourceAttributes,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1SubjectAccessReviewSpec class.
            </summary>
            <param name="extra">
            Extra corresponds to the user.Info.GetExtra() method from the authenticator. 
            Since that is input to the authorizer it needs a reflection here.
            </param>
            <param name="groups">
            Groups is the groups you&apos;re testing for.
            </param>
            <param name="nonResourceAttributes">
            NonResourceAttributes describes information for a non-resource access request
            </param>
            <param name="resourceAttributes">
            ResourceAuthorizationAttributes describes information for a resource access
            request
            </param>
            <param name="uid">
            UID information about the requesting user.
            </param>
            <param name="user">
            User is the user you&apos;re testing for. If you specify &quot;User&quot; but not &quot;Groups&quot;,
            then is it interpreted as &quot;What if User were not a member of any groups
            </param>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewSpec.Extra">
            <summary>
            Extra corresponds to the user.Info.GetExtra() method from the authenticator. 
            Since that is input to the authorizer it needs a reflection here.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewSpec.Groups">
            <summary>
            Groups is the groups you&apos;re testing for.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewSpec.NonResourceAttributes">
            <summary>
            NonResourceAttributes describes information for a non-resource access request
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewSpec.ResourceAttributes">
            <summary>
            ResourceAuthorizationAttributes describes information for a resource access
            request
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewSpec.Uid">
            <summary>
            UID information about the requesting user.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewSpec.User">
            <summary>
            User is the user you&apos;re testing for. If you specify &quot;User&quot; but not &quot;Groups&quot;,
            then is it interpreted as &quot;What if User were not a member of any groups
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReviewSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SubjectAccessReviewStatus">
            <summary>
            SubjectAccessReviewStatus
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReviewStatus.#ctor">
            <summary>
            Initializes a new instance of the V1SubjectAccessReviewStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReviewStatus.#ctor(System.Boolean,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1SubjectAccessReviewStatus class.
            </summary>
            <param name="allowed">
            Allowed is required. True if the action would be allowed, false otherwise.
            </param>
            <param name="denied">
            Denied is optional. True if the action would be denied, otherwise false. If both
            allowed is false and denied is false, then the authorizer has no opinion on
            whether to authorize the action. Denied may not be true if Allowed is true.
            </param>
            <param name="evaluationError">
            EvaluationError is an indication that some error occurred during the
            authorization check. It is entirely possible to get an error and be able to
            continue determine authorization status in spite of it. For instance, RBAC can
            be missing a role, but enough roles are still present and bound to reason about
            the request.
            </param>
            <param name="reason">
            Reason is optional.  It indicates why a request was allowed or denied.
            </param>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewStatus.Allowed">
            <summary>
            Allowed is required. True if the action would be allowed, false otherwise.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewStatus.Denied">
            <summary>
            Denied is optional. True if the action would be denied, otherwise false. If both
            allowed is false and denied is false, then the authorizer has no opinion on
            whether to authorize the action. Denied may not be true if Allowed is true.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewStatus.EvaluationError">
            <summary>
            EvaluationError is an indication that some error occurred during the
            authorization check. It is entirely possible to get an error and be able to
            continue determine authorization status in spite of it. For instance, RBAC can
            be missing a role, but enough roles are still present and bound to reason about
            the request.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectAccessReviewStatus.Reason">
            <summary>
            Reason is optional.  It indicates why a request was allowed or denied.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectAccessReviewStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SubjectRulesReviewStatus">
            <summary>
            SubjectRulesReviewStatus contains the result of a rules check. This check can be
            incomplete depending on the set of authorizers the server is configured with and
            any errors experienced during evaluation. Because authorization rules are
            additive, if a rule appears in a list it&apos;s safe to assume the subject has that
            permission, even if that list is incomplete.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectRulesReviewStatus.#ctor">
            <summary>
            Initializes a new instance of the V1SubjectRulesReviewStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectRulesReviewStatus.#ctor(System.Boolean,System.Collections.Generic.IList{k8s.Models.V1NonResourceRule},System.Collections.Generic.IList{k8s.Models.V1ResourceRule},System.String)">
            <summary>
            Initializes a new instance of the V1SubjectRulesReviewStatus class.
            </summary>
            <param name="incomplete">
            Incomplete is true when the rules returned by this call are incomplete. This is
            most commonly encountered when an authorizer, such as an external authorizer,
            doesn&apos;t support rules evaluation.
            </param>
            <param name="nonResourceRules">
            NonResourceRules is the list of actions the subject is allowed to perform on
            non-resources. The list ordering isn&apos;t significant, may contain duplicates, and
            possibly be incomplete.
            </param>
            <param name="resourceRules">
            ResourceRules is the list of actions the subject is allowed to perform on
            resources. The list ordering isn&apos;t significant, may contain duplicates, and
            possibly be incomplete.
            </param>
            <param name="evaluationError">
            EvaluationError can appear in combination with Rules. It indicates an error
            occurred during rule evaluation, such as an authorizer that doesn&apos;t support rule
            evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
            </param>
        </member>
        <member name="P:k8s.Models.V1SubjectRulesReviewStatus.EvaluationError">
            <summary>
            EvaluationError can appear in combination with Rules. It indicates an error
            occurred during rule evaluation, such as an authorizer that doesn&apos;t support rule
            evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectRulesReviewStatus.Incomplete">
            <summary>
            Incomplete is true when the rules returned by this call are incomplete. This is
            most commonly encountered when an authorizer, such as an external authorizer,
            doesn&apos;t support rules evaluation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectRulesReviewStatus.NonResourceRules">
            <summary>
            NonResourceRules is the list of actions the subject is allowed to perform on
            non-resources. The list ordering isn&apos;t significant, may contain duplicates, and
            possibly be incomplete.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SubjectRulesReviewStatus.ResourceRules">
            <summary>
            ResourceRules is the list of actions the subject is allowed to perform on
            resources. The list ordering isn&apos;t significant, may contain duplicates, and
            possibly be incomplete.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SubjectRulesReviewStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CrossVersionObjectReference">
            <summary>
            CrossVersionObjectReference contains enough information to let you identify the
            referred resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CrossVersionObjectReference.#ctor">
            <summary>
            Initializes a new instance of the V1CrossVersionObjectReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CrossVersionObjectReference.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1CrossVersionObjectReference class.
            </summary>
            <param name="kind">
            kind is the kind of the referent; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="name">
            name is the name of the referent; More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="apiVersion">
            apiVersion is the API version of the referent
            </param>
        </member>
        <member name="P:k8s.Models.V1CrossVersionObjectReference.ApiVersion">
            <summary>
            apiVersion is the API version of the referent
            </summary>
        </member>
        <member name="P:k8s.Models.V1CrossVersionObjectReference.Kind">
            <summary>
            kind is the kind of the referent; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CrossVersionObjectReference.Name">
            <summary>
            name is the name of the referent; More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="M:k8s.Models.V1CrossVersionObjectReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HorizontalPodAutoscaler">
            <summary>
            configuration of a horizontal pod autoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscaler.#ctor">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscaler class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscaler.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1HorizontalPodAutoscalerSpec,k8s.Models.V1HorizontalPodAutoscalerStatus)">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscaler class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec defines the behaviour of autoscaler. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            </param>
            <param name="status">
            status is the current information about the autoscaler.
            </param>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscaler.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscaler.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscaler.Metadata">
            <summary>
            Standard object metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscaler.Spec">
            <summary>
            spec defines the behaviour of autoscaler. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscaler.Status">
            <summary>
            status is the current information about the autoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscaler.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HorizontalPodAutoscalerList">
            <summary>
            list of horizontal pod autoscaler objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerList.#ctor">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscalerList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerList.#ctor(System.Collections.Generic.IList{k8s.Models.V1HorizontalPodAutoscaler},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscalerList class.
            </summary>
            <param name="items">
            items is the list of horizontal pod autoscaler objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerList.Items">
            <summary>
            items is the list of horizontal pod autoscaler objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerList.Metadata">
            <summary>
            Standard list metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HorizontalPodAutoscalerSpec">
            <summary>
            specification of a horizontal pod autoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerSpec.#ctor">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscalerSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerSpec.#ctor(System.Int32,k8s.Models.V1CrossVersionObjectReference,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscalerSpec class.
            </summary>
            <param name="maxReplicas">
            maxReplicas is the upper limit for the number of pods that can be set by the
            autoscaler; cannot be smaller than MinReplicas.
            </param>
            <param name="scaleTargetRef">
            reference to scaled resource; horizontal pod autoscaler will learn the current
            resource consumption and will set the desired number of pods by using its Scale
            subresource.
            </param>
            <param name="minReplicas">
            minReplicas is the lower limit for the number of replicas to which the
            autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be
            0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or
            External metric is configured.  Scaling is active as long as at least one metric
            value is available.
            </param>
            <param name="targetCPUUtilizationPercentage">
            targetCPUUtilizationPercentage is the target average CPU utilization
            (represented as a percentage of requested CPU) over all the pods; if not
            specified the default autoscaling policy will be used.
            </param>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerSpec.MaxReplicas">
            <summary>
            maxReplicas is the upper limit for the number of pods that can be set by the
            autoscaler; cannot be smaller than MinReplicas.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerSpec.MinReplicas">
            <summary>
            minReplicas is the lower limit for the number of replicas to which the
            autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be
            0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or
            External metric is configured.  Scaling is active as long as at least one metric
            value is available.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerSpec.ScaleTargetRef">
            <summary>
            reference to scaled resource; horizontal pod autoscaler will learn the current
            resource consumption and will set the desired number of pods by using its Scale
            subresource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerSpec.TargetCPUUtilizationPercentage">
            <summary>
            targetCPUUtilizationPercentage is the target average CPU utilization
            (represented as a percentage of requested CPU) over all the pods; if not
            specified the default autoscaling policy will be used.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HorizontalPodAutoscalerStatus">
            <summary>
            current status of a horizontal pod autoscaler
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerStatus.#ctor">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscalerStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerStatus.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V1HorizontalPodAutoscalerStatus class.
            </summary>
            <param name="currentReplicas">
            currentReplicas is the current number of replicas of pods managed by this
            autoscaler.
            </param>
            <param name="desiredReplicas">
            desiredReplicas is the  desired number of replicas of pods managed by this
            autoscaler.
            </param>
            <param name="currentCPUUtilizationPercentage">
            currentCPUUtilizationPercentage is the current average CPU utilization over all
            pods, represented as a percentage of requested CPU, e.g. 70 means that an
            average pod is using now 70% of its requested CPU.
            </param>
            <param name="lastScaleTime">
            lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of
            pods; used by the autoscaler to control how often the number of pods is changed.
            </param>
            <param name="observedGeneration">
            observedGeneration is the most recent generation observed by this autoscaler.
            </param>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerStatus.CurrentCPUUtilizationPercentage">
            <summary>
            currentCPUUtilizationPercentage is the current average CPU utilization over all
            pods, represented as a percentage of requested CPU, e.g. 70 means that an
            average pod is using now 70% of its requested CPU.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerStatus.CurrentReplicas">
            <summary>
            currentReplicas is the current number of replicas of pods managed by this
            autoscaler.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerStatus.DesiredReplicas">
            <summary>
            desiredReplicas is the  desired number of replicas of pods managed by this
            autoscaler.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerStatus.LastScaleTime">
            <summary>
            lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of
            pods; used by the autoscaler to control how often the number of pods is changed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HorizontalPodAutoscalerStatus.ObservedGeneration">
            <summary>
            observedGeneration is the most recent generation observed by this autoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HorizontalPodAutoscalerStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Scale">
            <summary>
            Scale represents a scaling request for a resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Scale.#ctor">
            <summary>
            Initializes a new instance of the V1Scale class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Scale.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1ScaleSpec,k8s.Models.V1ScaleStatus)">
            <summary>
            Initializes a new instance of the V1Scale class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </param>
            <param name="spec">
            spec defines the behavior of the scale. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            </param>
            <param name="status">
            status is the current status of the scale. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            Read-only.
            </param>
        </member>
        <member name="P:k8s.Models.V1Scale.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Scale.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Scale.Metadata">
            <summary>
            Standard object metadata; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Scale.Spec">
            <summary>
            spec defines the behavior of the scale. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Scale.Status">
            <summary>
            status is the current status of the scale. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            Read-only.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Scale.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ScaleSpec">
            <summary>
            ScaleSpec describes the attributes of a scale subresource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleSpec.#ctor">
            <summary>
            Initializes a new instance of the V1ScaleSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleSpec.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1ScaleSpec class.
            </summary>
            <param name="replicas">
            replicas is the desired number of instances for the scaled object.
            </param>
        </member>
        <member name="P:k8s.Models.V1ScaleSpec.Replicas">
            <summary>
            replicas is the desired number of instances for the scaled object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ScaleStatus">
            <summary>
            ScaleStatus represents the current status of a scale subresource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleStatus.#ctor">
            <summary>
            Initializes a new instance of the V1ScaleStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleStatus.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the V1ScaleStatus class.
            </summary>
            <param name="replicas">
            replicas is the actual number of observed instances of the scaled object.
            </param>
            <param name="selector">
            selector is the label query over pods that should match the replicas count. This
            is same as the label selector but in the string format to avoid introspection by
            clients. The string will be in the same format as the query-param syntax. More
            info about label selectors:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            </param>
        </member>
        <member name="P:k8s.Models.V1ScaleStatus.Replicas">
            <summary>
            replicas is the actual number of observed instances of the scaled object.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleStatus.Selector">
            <summary>
            selector is the label query over pods that should match the replicas count. This
            is same as the label selector but in the string format to avoid introspection by
            clients. The string will be in the same format as the query-param syntax. More
            info about label selectors:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ContainerResourceMetricSource">
            <summary>
            ContainerResourceMetricSource indicates how to scale on a resource metric known
            to Kubernetes, as specified in requests and limits, describing each pod in the
            current scale target (e.g. CPU or memory).  The values will be averaged together
            before being compared to the target.  Such metrics are built in to Kubernetes,
            and have special scaling options on top of those available to normal per-pod
            metrics using the &quot;pods&quot; source.  Only one &quot;target&quot; type should be set.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ContainerResourceMetricSource.#ctor">
            <summary>
            Initializes a new instance of the V2ContainerResourceMetricSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ContainerResourceMetricSource.#ctor(System.String,System.String,k8s.Models.V2MetricTarget)">
            <summary>
            Initializes a new instance of the V2ContainerResourceMetricSource class.
            </summary>
            <param name="container">
            container is the name of the container in the pods of the scaling target
            </param>
            <param name="name">
            name is the name of the resource in question.
            </param>
            <param name="target">
            target specifies the target value for the given metric
            </param>
        </member>
        <member name="P:k8s.Models.V2ContainerResourceMetricSource.Container">
            <summary>
            container is the name of the container in the pods of the scaling target
            </summary>
        </member>
        <member name="P:k8s.Models.V2ContainerResourceMetricSource.Name">
            <summary>
            name is the name of the resource in question.
            </summary>
        </member>
        <member name="P:k8s.Models.V2ContainerResourceMetricSource.Target">
            <summary>
            target specifies the target value for the given metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2ContainerResourceMetricSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ContainerResourceMetricStatus">
            <summary>
            ContainerResourceMetricStatus indicates the current value of a resource metric
            known to Kubernetes, as specified in requests and limits, describing a single
            container in each pod in the current scale target (e.g. CPU or memory).  Such
            metrics are built in to Kubernetes, and have special scaling options on top of
            those available to normal per-pod metrics using the &quot;pods&quot; source.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ContainerResourceMetricStatus.#ctor">
            <summary>
            Initializes a new instance of the V2ContainerResourceMetricStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ContainerResourceMetricStatus.#ctor(System.String,k8s.Models.V2MetricValueStatus,System.String)">
            <summary>
            Initializes a new instance of the V2ContainerResourceMetricStatus class.
            </summary>
            <param name="container">
            container is the name of the container in the pods of the scaling target
            </param>
            <param name="current">
            current contains the current value for the given metric
            </param>
            <param name="name">
            name is the name of the resource in question.
            </param>
        </member>
        <member name="P:k8s.Models.V2ContainerResourceMetricStatus.Container">
            <summary>
            container is the name of the container in the pods of the scaling target
            </summary>
        </member>
        <member name="P:k8s.Models.V2ContainerResourceMetricStatus.Current">
            <summary>
            current contains the current value for the given metric
            </summary>
        </member>
        <member name="P:k8s.Models.V2ContainerResourceMetricStatus.Name">
            <summary>
            name is the name of the resource in question.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ContainerResourceMetricStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2CrossVersionObjectReference">
            <summary>
            CrossVersionObjectReference contains enough information to let you identify the
            referred resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V2CrossVersionObjectReference.#ctor">
            <summary>
            Initializes a new instance of the V2CrossVersionObjectReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2CrossVersionObjectReference.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V2CrossVersionObjectReference class.
            </summary>
            <param name="kind">
            kind is the kind of the referent; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="name">
            name is the name of the referent; More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="apiVersion">
            apiVersion is the API version of the referent
            </param>
        </member>
        <member name="P:k8s.Models.V2CrossVersionObjectReference.ApiVersion">
            <summary>
            apiVersion is the API version of the referent
            </summary>
        </member>
        <member name="P:k8s.Models.V2CrossVersionObjectReference.Kind">
            <summary>
            kind is the kind of the referent; More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V2CrossVersionObjectReference.Name">
            <summary>
            name is the name of the referent; More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="M:k8s.Models.V2CrossVersionObjectReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ExternalMetricSource">
            <summary>
            ExternalMetricSource indicates how to scale on a metric not associated with any
            Kubernetes object (for example length of queue in cloud messaging service, or
            QPS from loadbalancer running outside of cluster).
            </summary>
        </member>
        <member name="M:k8s.Models.V2ExternalMetricSource.#ctor">
            <summary>
            Initializes a new instance of the V2ExternalMetricSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ExternalMetricSource.#ctor(k8s.Models.V2MetricIdentifier,k8s.Models.V2MetricTarget)">
            <summary>
            Initializes a new instance of the V2ExternalMetricSource class.
            </summary>
            <param name="metric">
            metric identifies the target metric by name and selector
            </param>
            <param name="target">
            target specifies the target value for the given metric
            </param>
        </member>
        <member name="P:k8s.Models.V2ExternalMetricSource.Metric">
            <summary>
            metric identifies the target metric by name and selector
            </summary>
        </member>
        <member name="P:k8s.Models.V2ExternalMetricSource.Target">
            <summary>
            target specifies the target value for the given metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2ExternalMetricSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ExternalMetricStatus">
            <summary>
            ExternalMetricStatus indicates the current value of a global metric not
            associated with any Kubernetes object.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ExternalMetricStatus.#ctor">
            <summary>
            Initializes a new instance of the V2ExternalMetricStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ExternalMetricStatus.#ctor(k8s.Models.V2MetricValueStatus,k8s.Models.V2MetricIdentifier)">
            <summary>
            Initializes a new instance of the V2ExternalMetricStatus class.
            </summary>
            <param name="current">
            current contains the current value for the given metric
            </param>
            <param name="metric">
            metric identifies the target metric by name and selector
            </param>
        </member>
        <member name="P:k8s.Models.V2ExternalMetricStatus.Current">
            <summary>
            current contains the current value for the given metric
            </summary>
        </member>
        <member name="P:k8s.Models.V2ExternalMetricStatus.Metric">
            <summary>
            metric identifies the target metric by name and selector
            </summary>
        </member>
        <member name="M:k8s.Models.V2ExternalMetricStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HPAScalingPolicy">
            <summary>
            HPAScalingPolicy is a single policy which must hold true for a specified past
            interval.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HPAScalingPolicy.#ctor">
            <summary>
            Initializes a new instance of the V2HPAScalingPolicy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HPAScalingPolicy.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the V2HPAScalingPolicy class.
            </summary>
            <param name="periodSeconds">
            periodSeconds specifies the window of time for which the policy should hold
            true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30
            min).
            </param>
            <param name="type">
            type is used to specify the scaling policy.
            </param>
            <param name="value">
            value contains the amount of change which is permitted by the policy. It must be
            greater than zero
            </param>
        </member>
        <member name="P:k8s.Models.V2HPAScalingPolicy.PeriodSeconds">
            <summary>
            periodSeconds specifies the window of time for which the policy should hold
            true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30
            min).
            </summary>
        </member>
        <member name="P:k8s.Models.V2HPAScalingPolicy.Type">
            <summary>
            type is used to specify the scaling policy.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HPAScalingPolicy.Value">
            <summary>
            value contains the amount of change which is permitted by the policy. It must be
            greater than zero
            </summary>
        </member>
        <member name="M:k8s.Models.V2HPAScalingPolicy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HPAScalingRules">
            <summary>
            HPAScalingRules configures the scaling behavior for one direction. These Rules
            are applied after calculating DesiredReplicas from metrics for the HPA. They can
            limit the scaling velocity by specifying scaling policies. They can prevent
            flapping by specifying the stabilization window, so that the number of replicas
            is not set instantly, instead, the safest value from the stabilization window is
            chosen.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HPAScalingRules.#ctor">
            <summary>
            Initializes a new instance of the V2HPAScalingRules class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HPAScalingRules.#ctor(System.Collections.Generic.IList{k8s.Models.V2HPAScalingPolicy},System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V2HPAScalingRules class.
            </summary>
            <param name="policies">
            policies is a list of potential scaling polices which can be used during
            scaling. At least one policy must be specified, otherwise the HPAScalingRules
            will be discarded as invalid
            </param>
            <param name="selectPolicy">
            selectPolicy is used to specify which policy should be used. If not set, the
            default value Max is used.
            </param>
            <param name="stabilizationWindowSeconds">
            stabilizationWindowSeconds is the number of seconds for which past
            recommendations should be considered while scaling up or scaling down.
            StabilizationWindowSeconds must be greater than or equal to zero and less than
            or equal to 3600 (one hour). If not set, use the default values: - For scale up:
            0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization
            window is 300 seconds long).
            </param>
        </member>
        <member name="P:k8s.Models.V2HPAScalingRules.Policies">
            <summary>
            policies is a list of potential scaling polices which can be used during
            scaling. At least one policy must be specified, otherwise the HPAScalingRules
            will be discarded as invalid
            </summary>
        </member>
        <member name="P:k8s.Models.V2HPAScalingRules.SelectPolicy">
            <summary>
            selectPolicy is used to specify which policy should be used. If not set, the
            default value Max is used.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HPAScalingRules.StabilizationWindowSeconds">
            <summary>
            stabilizationWindowSeconds is the number of seconds for which past
            recommendations should be considered while scaling up or scaling down.
            StabilizationWindowSeconds must be greater than or equal to zero and less than
            or equal to 3600 (one hour). If not set, use the default values: - For scale up:
            0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization
            window is 300 seconds long).
            </summary>
        </member>
        <member name="M:k8s.Models.V2HPAScalingRules.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HorizontalPodAutoscaler">
            <summary>
            HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler,
            which automatically manages the replica count of any resource implementing the
            scale subresource based on the metrics specified.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscaler.#ctor">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscaler class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscaler.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V2HorizontalPodAutoscalerSpec,k8s.Models.V2HorizontalPodAutoscalerStatus)">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscaler class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            metadata is the standard object metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec is the specification for the behaviour of the autoscaler. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            </param>
            <param name="status">
            status is the current information about the autoscaler.
            </param>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscaler.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscaler.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscaler.Metadata">
            <summary>
            metadata is the standard object metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscaler.Spec">
            <summary>
            spec is the specification for the behaviour of the autoscaler. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscaler.Status">
            <summary>
            status is the current information about the autoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscaler.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HorizontalPodAutoscalerBehavior">
            <summary>
            HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in
            both Up and Down directions (scaleUp and scaleDown fields respectively).
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerBehavior.#ctor">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerBehavior class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerBehavior.#ctor(k8s.Models.V2HPAScalingRules,k8s.Models.V2HPAScalingRules)">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerBehavior class.
            </summary>
            <param name="scaleDown">
            scaleDown is scaling policy for scaling Down. If not set, the default value is
            to allow to scale down to minReplicas pods, with a 300 second stabilization
            window (i.e., the highest recommendation for the last 300sec is used).
            </param>
            <param name="scaleUp">
            scaleUp is scaling policy for scaling Up. If not set, the default value is the
            higher of:
            * increase no more than 4 pods per 60 seconds
            * double the number of pods per 60 seconds
            No stabilization is used.
            </param>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerBehavior.ScaleDown">
            <summary>
            scaleDown is scaling policy for scaling Down. If not set, the default value is
            to allow to scale down to minReplicas pods, with a 300 second stabilization
            window (i.e., the highest recommendation for the last 300sec is used).
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerBehavior.ScaleUp">
            <summary>
            scaleUp is scaling policy for scaling Up. If not set, the default value is the
            higher of:
            * increase no more than 4 pods per 60 seconds
            * double the number of pods per 60 seconds
            No stabilization is used.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerBehavior.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HorizontalPodAutoscalerCondition">
            <summary>
            HorizontalPodAutoscalerCondition describes the state of a
            HorizontalPodAutoscaler at a certain point.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerCondition.#ctor">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerCondition class.
            </summary>
            <param name="status">
            status is the status of the condition (True, False, Unknown)
            </param>
            <param name="type">
            type describes the current condition
            </param>
            <param name="lastTransitionTime">
            lastTransitionTime is the last time the condition transitioned from one status
            to another
            </param>
            <param name="message">
            message is a human-readable explanation containing details about the transition
            </param>
            <param name="reason">
            reason is the reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerCondition.LastTransitionTime">
            <summary>
            lastTransitionTime is the last time the condition transitioned from one status
            to another
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerCondition.Message">
            <summary>
            message is a human-readable explanation containing details about the transition
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerCondition.Reason">
            <summary>
            reason is the reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerCondition.Status">
            <summary>
            status is the status of the condition (True, False, Unknown)
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerCondition.Type">
            <summary>
            type describes the current condition
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HorizontalPodAutoscalerList">
            <summary>
            HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerList.#ctor">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerList.#ctor(System.Collections.Generic.IList{k8s.Models.V2HorizontalPodAutoscaler},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerList class.
            </summary>
            <param name="items">
            items is the list of horizontal pod autoscaler objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            metadata is the standard list metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerList.Items">
            <summary>
            items is the list of horizontal pod autoscaler objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerList.Metadata">
            <summary>
            metadata is the standard list metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HorizontalPodAutoscalerSpec">
            <summary>
            HorizontalPodAutoscalerSpec describes the desired functionality of the
            HorizontalPodAutoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerSpec.#ctor">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerSpec.#ctor(System.Int32,k8s.Models.V2CrossVersionObjectReference,k8s.Models.V2HorizontalPodAutoscalerBehavior,System.Collections.Generic.IList{k8s.Models.V2MetricSpec},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerSpec class.
            </summary>
            <param name="maxReplicas">
            maxReplicas is the upper limit for the number of replicas to which the
            autoscaler can scale up. It cannot be less that minReplicas.
            </param>
            <param name="scaleTargetRef">
            scaleTargetRef points to the target resource to scale, and is used to the pods
            for which metrics should be collected, as well as to actually change the replica
            count.
            </param>
            <param name="behavior">
            behavior configures the scaling behavior of the target in both Up and Down
            directions (scaleUp and scaleDown fields respectively). If not set, the default
            HPAScalingRules for scale up and scale down are used.
            </param>
            <param name="metrics">
            metrics contains the specifications for which to use to calculate the desired
            replica count (the maximum replica count across all metrics will be used).  The
            desired replica count is calculated multiplying the ratio between the target
            value and the current value by the current number of pods.  Ergo, metrics used
            must decrease as the pod count is increased, and vice-versa.  See the individual
            metric source types for more information about how each type of metric must
            respond. If not set, the default metric will be set to 80% average CPU
            utilization.
            </param>
            <param name="minReplicas">
            minReplicas is the lower limit for the number of replicas to which the
            autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be
            0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or
            External metric is configured.  Scaling is active as long as at least one metric
            value is available.
            </param>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerSpec.Behavior">
            <summary>
            behavior configures the scaling behavior of the target in both Up and Down
            directions (scaleUp and scaleDown fields respectively). If not set, the default
            HPAScalingRules for scale up and scale down are used.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerSpec.MaxReplicas">
            <summary>
            maxReplicas is the upper limit for the number of replicas to which the
            autoscaler can scale up. It cannot be less that minReplicas.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerSpec.Metrics">
            <summary>
            metrics contains the specifications for which to use to calculate the desired
            replica count (the maximum replica count across all metrics will be used).  The
            desired replica count is calculated multiplying the ratio between the target
            value and the current value by the current number of pods.  Ergo, metrics used
            must decrease as the pod count is increased, and vice-versa.  See the individual
            metric source types for more information about how each type of metric must
            respond. If not set, the default metric will be set to 80% average CPU
            utilization.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerSpec.MinReplicas">
            <summary>
            minReplicas is the lower limit for the number of replicas to which the
            autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be
            0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or
            External metric is configured.  Scaling is active as long as at least one metric
            value is available.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerSpec.ScaleTargetRef">
            <summary>
            scaleTargetRef points to the target resource to scale, and is used to the pods
            for which metrics should be collected, as well as to actually change the replica
            count.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2HorizontalPodAutoscalerStatus">
            <summary>
            HorizontalPodAutoscalerStatus describes the current status of a horizontal pod
            autoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerStatus.#ctor">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerStatus.#ctor(System.Int32,System.Collections.Generic.IList{k8s.Models.V2HorizontalPodAutoscalerCondition},System.Collections.Generic.IList{k8s.Models.V2MetricStatus},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V2HorizontalPodAutoscalerStatus class.
            </summary>
            <param name="desiredReplicas">
            desiredReplicas is the desired number of replicas of pods managed by this
            autoscaler, as last calculated by the autoscaler.
            </param>
            <param name="conditions">
            conditions is the set of conditions required for this autoscaler to scale its
            target, and indicates whether or not those conditions are met.
            </param>
            <param name="currentMetrics">
            currentMetrics is the last read state of the metrics used by this autoscaler.
            </param>
            <param name="currentReplicas">
            currentReplicas is current number of replicas of pods managed by this
            autoscaler, as last seen by the autoscaler.
            </param>
            <param name="lastScaleTime">
            lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of
            pods, used by the autoscaler to control how often the number of pods is changed.
            </param>
            <param name="observedGeneration">
            observedGeneration is the most recent generation observed by this autoscaler.
            </param>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerStatus.Conditions">
            <summary>
            conditions is the set of conditions required for this autoscaler to scale its
            target, and indicates whether or not those conditions are met.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerStatus.CurrentMetrics">
            <summary>
            currentMetrics is the last read state of the metrics used by this autoscaler.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerStatus.CurrentReplicas">
            <summary>
            currentReplicas is current number of replicas of pods managed by this
            autoscaler, as last seen by the autoscaler.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerStatus.DesiredReplicas">
            <summary>
            desiredReplicas is the desired number of replicas of pods managed by this
            autoscaler, as last calculated by the autoscaler.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerStatus.LastScaleTime">
            <summary>
            lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of
            pods, used by the autoscaler to control how often the number of pods is changed.
            </summary>
        </member>
        <member name="P:k8s.Models.V2HorizontalPodAutoscalerStatus.ObservedGeneration">
            <summary>
            observedGeneration is the most recent generation observed by this autoscaler.
            </summary>
        </member>
        <member name="M:k8s.Models.V2HorizontalPodAutoscalerStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2MetricIdentifier">
            <summary>
            MetricIdentifier defines the name and optionally selector for a metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricIdentifier.#ctor">
            <summary>
            Initializes a new instance of the V2MetricIdentifier class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricIdentifier.#ctor(System.String,k8s.Models.V1LabelSelector)">
            <summary>
            Initializes a new instance of the V2MetricIdentifier class.
            </summary>
            <param name="name">
            name is the name of the given metric
            </param>
            <param name="selector">
            selector is the string-encoded form of a standard kubernetes label selector for
            the given metric When set, it is passed as an additional parameter to the
            metrics server for more specific metrics scoping. When unset, just the
            metricName will be used to gather metrics.
            </param>
        </member>
        <member name="P:k8s.Models.V2MetricIdentifier.Name">
            <summary>
            name is the name of the given metric
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricIdentifier.Selector">
            <summary>
            selector is the string-encoded form of a standard kubernetes label selector for
            the given metric When set, it is passed as an additional parameter to the
            metrics server for more specific metrics scoping. When unset, just the
            metricName will be used to gather metrics.
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricIdentifier.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2MetricSpec">
            <summary>
            MetricSpec specifies how to scale based on a single metric (only `type` and one
            other matching field should be set at once).
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricSpec.#ctor">
            <summary>
            Initializes a new instance of the V2MetricSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricSpec.#ctor(System.String,k8s.Models.V2ContainerResourceMetricSource,k8s.Models.V2ExternalMetricSource,k8s.Models.V2ObjectMetricSource,k8s.Models.V2PodsMetricSource,k8s.Models.V2ResourceMetricSource)">
            <summary>
            Initializes a new instance of the V2MetricSpec class.
            </summary>
            <param name="type">
            type is the type of metric source.  It should be one of &quot;ContainerResource&quot;,
            &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each mapping to a matching field in
            the object. Note: &quot;ContainerResource&quot; type is available on when the feature-gate
            HPAContainerMetrics is enabled
            </param>
            <param name="containerResource">
            containerResource refers to a resource metric (such as those specified in
            requests and limits) known to Kubernetes describing a single container in each
            pod of the current scale target (e.g. CPU or memory). Such metrics are built in
            to Kubernetes, and have special scaling options on top of those available to
            normal per-pod metrics using the &quot;pods&quot; source. This is an alpha feature and can
            be enabled by the HPAContainerMetrics feature flag.
            </param>
            <param name="external">
            external refers to a global metric that is not associated with any Kubernetes
            object. It allows autoscaling based on information coming from components
            running outside of cluster (for example length of queue in cloud messaging
            service, or QPS from loadbalancer running outside of cluster).
            </param>
            <param name="objectProperty">
            object refers to a metric describing a single kubernetes object (for example,
            hits-per-second on an Ingress object).
            </param>
            <param name="pods">
            pods refers to a metric describing each pod in the current scale target (for
            example, transactions-processed-per-second).  The values will be averaged
            together before being compared to the target value.
            </param>
            <param name="resource">
            resource refers to a resource metric (such as those specified in requests and
            limits) known to Kubernetes describing each pod in the current scale target
            (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
            scaling options on top of those available to normal per-pod metrics using the
            &quot;pods&quot; source.
            </param>
        </member>
        <member name="P:k8s.Models.V2MetricSpec.ContainerResource">
            <summary>
            containerResource refers to a resource metric (such as those specified in
            requests and limits) known to Kubernetes describing a single container in each
            pod of the current scale target (e.g. CPU or memory). Such metrics are built in
            to Kubernetes, and have special scaling options on top of those available to
            normal per-pod metrics using the &quot;pods&quot; source. This is an alpha feature and can
            be enabled by the HPAContainerMetrics feature flag.
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricSpec.External">
            <summary>
            external refers to a global metric that is not associated with any Kubernetes
            object. It allows autoscaling based on information coming from components
            running outside of cluster (for example length of queue in cloud messaging
            service, or QPS from loadbalancer running outside of cluster).
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricSpec.ObjectProperty">
            <summary>
            object refers to a metric describing a single kubernetes object (for example,
            hits-per-second on an Ingress object).
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricSpec.Pods">
            <summary>
            pods refers to a metric describing each pod in the current scale target (for
            example, transactions-processed-per-second).  The values will be averaged
            together before being compared to the target value.
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricSpec.Resource">
            <summary>
            resource refers to a resource metric (such as those specified in requests and
            limits) known to Kubernetes describing each pod in the current scale target
            (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
            scaling options on top of those available to normal per-pod metrics using the
            &quot;pods&quot; source.
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricSpec.Type">
            <summary>
            type is the type of metric source.  It should be one of &quot;ContainerResource&quot;,
            &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each mapping to a matching field in
            the object. Note: &quot;ContainerResource&quot; type is available on when the feature-gate
            HPAContainerMetrics is enabled
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2MetricStatus">
            <summary>
            MetricStatus describes the last-read state of a single metric.
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricStatus.#ctor">
            <summary>
            Initializes a new instance of the V2MetricStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricStatus.#ctor(System.String,k8s.Models.V2ContainerResourceMetricStatus,k8s.Models.V2ExternalMetricStatus,k8s.Models.V2ObjectMetricStatus,k8s.Models.V2PodsMetricStatus,k8s.Models.V2ResourceMetricStatus)">
            <summary>
            Initializes a new instance of the V2MetricStatus class.
            </summary>
            <param name="type">
            type is the type of metric source.  It will be one of &quot;ContainerResource&quot;,
            &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each corresponds to a matching field
            in the object. Note: &quot;ContainerResource&quot; type is available on when the
            feature-gate HPAContainerMetrics is enabled
            </param>
            <param name="containerResource">
            container resource refers to a resource metric (such as those specified in
            requests and limits) known to Kubernetes describing a single container in each
            pod in the current scale target (e.g. CPU or memory). Such metrics are built in
            to Kubernetes, and have special scaling options on top of those available to
            normal per-pod metrics using the &quot;pods&quot; source.
            </param>
            <param name="external">
            external refers to a global metric that is not associated with any Kubernetes
            object. It allows autoscaling based on information coming from components
            running outside of cluster (for example length of queue in cloud messaging
            service, or QPS from loadbalancer running outside of cluster).
            </param>
            <param name="objectProperty">
            object refers to a metric describing a single kubernetes object (for example,
            hits-per-second on an Ingress object).
            </param>
            <param name="pods">
            pods refers to a metric describing each pod in the current scale target (for
            example, transactions-processed-per-second).  The values will be averaged
            together before being compared to the target value.
            </param>
            <param name="resource">
            resource refers to a resource metric (such as those specified in requests and
            limits) known to Kubernetes describing each pod in the current scale target
            (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
            scaling options on top of those available to normal per-pod metrics using the
            &quot;pods&quot; source.
            </param>
        </member>
        <member name="P:k8s.Models.V2MetricStatus.ContainerResource">
            <summary>
            container resource refers to a resource metric (such as those specified in
            requests and limits) known to Kubernetes describing a single container in each
            pod in the current scale target (e.g. CPU or memory). Such metrics are built in
            to Kubernetes, and have special scaling options on top of those available to
            normal per-pod metrics using the &quot;pods&quot; source.
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricStatus.External">
            <summary>
            external refers to a global metric that is not associated with any Kubernetes
            object. It allows autoscaling based on information coming from components
            running outside of cluster (for example length of queue in cloud messaging
            service, or QPS from loadbalancer running outside of cluster).
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricStatus.ObjectProperty">
            <summary>
            object refers to a metric describing a single kubernetes object (for example,
            hits-per-second on an Ingress object).
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricStatus.Pods">
            <summary>
            pods refers to a metric describing each pod in the current scale target (for
            example, transactions-processed-per-second).  The values will be averaged
            together before being compared to the target value.
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricStatus.Resource">
            <summary>
            resource refers to a resource metric (such as those specified in requests and
            limits) known to Kubernetes describing each pod in the current scale target
            (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
            scaling options on top of those available to normal per-pod metrics using the
            &quot;pods&quot; source.
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricStatus.Type">
            <summary>
            type is the type of metric source.  It will be one of &quot;ContainerResource&quot;,
            &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each corresponds to a matching field
            in the object. Note: &quot;ContainerResource&quot; type is available on when the
            feature-gate HPAContainerMetrics is enabled
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2MetricTarget">
            <summary>
            MetricTarget defines the target value, average value, or average utilization of
            a specific metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricTarget.#ctor">
            <summary>
            Initializes a new instance of the V2MetricTarget class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricTarget.#ctor(System.String,System.Nullable{System.Int32},k8s.Models.ResourceQuantity,k8s.Models.ResourceQuantity)">
            <summary>
            Initializes a new instance of the V2MetricTarget class.
            </summary>
            <param name="type">
            type represents whether the metric type is Utilization, Value, or AverageValue
            </param>
            <param name="averageUtilization">
            averageUtilization is the target value of the average of the resource metric
            across all relevant pods, represented as a percentage of the requested value of
            the resource for the pods. Currently only valid for Resource metric source type
            </param>
            <param name="averageValue">
            averageValue is the target value of the average of the metric across all
            relevant pods (as a quantity)
            </param>
            <param name="value">
            value is the target value of the metric (as a quantity).
            </param>
        </member>
        <member name="P:k8s.Models.V2MetricTarget.AverageUtilization">
            <summary>
            averageUtilization is the target value of the average of the resource metric
            across all relevant pods, represented as a percentage of the requested value of
            the resource for the pods. Currently only valid for Resource metric source type
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricTarget.AverageValue">
            <summary>
            averageValue is the target value of the average of the metric across all
            relevant pods (as a quantity)
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricTarget.Type">
            <summary>
            type represents whether the metric type is Utilization, Value, or AverageValue
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricTarget.Value">
            <summary>
            value is the target value of the metric (as a quantity).
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricTarget.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2MetricValueStatus">
            <summary>
            MetricValueStatus holds the current value for a metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricValueStatus.#ctor">
            <summary>
            Initializes a new instance of the V2MetricValueStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricValueStatus.#ctor(System.Nullable{System.Int32},k8s.Models.ResourceQuantity,k8s.Models.ResourceQuantity)">
            <summary>
            Initializes a new instance of the V2MetricValueStatus class.
            </summary>
            <param name="averageUtilization">
            currentAverageUtilization is the current value of the average of the resource
            metric across all relevant pods, represented as a percentage of the requested
            value of the resource for the pods.
            </param>
            <param name="averageValue">
            averageValue is the current value of the average of the metric across all
            relevant pods (as a quantity)
            </param>
            <param name="value">
            value is the current value of the metric (as a quantity).
            </param>
        </member>
        <member name="P:k8s.Models.V2MetricValueStatus.AverageUtilization">
            <summary>
            currentAverageUtilization is the current value of the average of the resource
            metric across all relevant pods, represented as a percentage of the requested
            value of the resource for the pods.
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricValueStatus.AverageValue">
            <summary>
            averageValue is the current value of the average of the metric across all
            relevant pods (as a quantity)
            </summary>
        </member>
        <member name="P:k8s.Models.V2MetricValueStatus.Value">
            <summary>
            value is the current value of the metric (as a quantity).
            </summary>
        </member>
        <member name="M:k8s.Models.V2MetricValueStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ObjectMetricSource">
            <summary>
            ObjectMetricSource indicates how to scale on a metric describing a kubernetes
            object (for example, hits-per-second on an Ingress object).
            </summary>
        </member>
        <member name="M:k8s.Models.V2ObjectMetricSource.#ctor">
            <summary>
            Initializes a new instance of the V2ObjectMetricSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ObjectMetricSource.#ctor(k8s.Models.V2CrossVersionObjectReference,k8s.Models.V2MetricIdentifier,k8s.Models.V2MetricTarget)">
            <summary>
            Initializes a new instance of the V2ObjectMetricSource class.
            </summary>
            <param name="describedObject">
            describedObject specifies the descriptions of a object,such as kind,name
            apiVersion
            </param>
            <param name="metric">
            metric identifies the target metric by name and selector
            </param>
            <param name="target">
            target specifies the target value for the given metric
            </param>
        </member>
        <member name="P:k8s.Models.V2ObjectMetricSource.DescribedObject">
            <summary>
            describedObject specifies the descriptions of a object,such as kind,name
            apiVersion
            </summary>
        </member>
        <member name="P:k8s.Models.V2ObjectMetricSource.Metric">
            <summary>
            metric identifies the target metric by name and selector
            </summary>
        </member>
        <member name="P:k8s.Models.V2ObjectMetricSource.Target">
            <summary>
            target specifies the target value for the given metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2ObjectMetricSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ObjectMetricStatus">
            <summary>
            ObjectMetricStatus indicates the current value of a metric describing a
            kubernetes object (for example, hits-per-second on an Ingress object).
            </summary>
        </member>
        <member name="M:k8s.Models.V2ObjectMetricStatus.#ctor">
            <summary>
            Initializes a new instance of the V2ObjectMetricStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ObjectMetricStatus.#ctor(k8s.Models.V2MetricValueStatus,k8s.Models.V2CrossVersionObjectReference,k8s.Models.V2MetricIdentifier)">
            <summary>
            Initializes a new instance of the V2ObjectMetricStatus class.
            </summary>
            <param name="current">
            current contains the current value for the given metric
            </param>
            <param name="describedObject">
            DescribedObject specifies the descriptions of a object,such as kind,name
            apiVersion
            </param>
            <param name="metric">
            metric identifies the target metric by name and selector
            </param>
        </member>
        <member name="P:k8s.Models.V2ObjectMetricStatus.Current">
            <summary>
            current contains the current value for the given metric
            </summary>
        </member>
        <member name="P:k8s.Models.V2ObjectMetricStatus.DescribedObject">
            <summary>
            DescribedObject specifies the descriptions of a object,such as kind,name
            apiVersion
            </summary>
        </member>
        <member name="P:k8s.Models.V2ObjectMetricStatus.Metric">
            <summary>
            metric identifies the target metric by name and selector
            </summary>
        </member>
        <member name="M:k8s.Models.V2ObjectMetricStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2PodsMetricSource">
            <summary>
            PodsMetricSource indicates how to scale on a metric describing each pod in the
            current scale target (for example, transactions-processed-per-second). The
            values will be averaged together before being compared to the target value.
            </summary>
        </member>
        <member name="M:k8s.Models.V2PodsMetricSource.#ctor">
            <summary>
            Initializes a new instance of the V2PodsMetricSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2PodsMetricSource.#ctor(k8s.Models.V2MetricIdentifier,k8s.Models.V2MetricTarget)">
            <summary>
            Initializes a new instance of the V2PodsMetricSource class.
            </summary>
            <param name="metric">
            metric identifies the target metric by name and selector
            </param>
            <param name="target">
            target specifies the target value for the given metric
            </param>
        </member>
        <member name="P:k8s.Models.V2PodsMetricSource.Metric">
            <summary>
            metric identifies the target metric by name and selector
            </summary>
        </member>
        <member name="P:k8s.Models.V2PodsMetricSource.Target">
            <summary>
            target specifies the target value for the given metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2PodsMetricSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2PodsMetricStatus">
            <summary>
            PodsMetricStatus indicates the current value of a metric describing each pod in
            the current scale target (for example, transactions-processed-per-second).
            </summary>
        </member>
        <member name="M:k8s.Models.V2PodsMetricStatus.#ctor">
            <summary>
            Initializes a new instance of the V2PodsMetricStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2PodsMetricStatus.#ctor(k8s.Models.V2MetricValueStatus,k8s.Models.V2MetricIdentifier)">
            <summary>
            Initializes a new instance of the V2PodsMetricStatus class.
            </summary>
            <param name="current">
            current contains the current value for the given metric
            </param>
            <param name="metric">
            metric identifies the target metric by name and selector
            </param>
        </member>
        <member name="P:k8s.Models.V2PodsMetricStatus.Current">
            <summary>
            current contains the current value for the given metric
            </summary>
        </member>
        <member name="P:k8s.Models.V2PodsMetricStatus.Metric">
            <summary>
            metric identifies the target metric by name and selector
            </summary>
        </member>
        <member name="M:k8s.Models.V2PodsMetricStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ResourceMetricSource">
            <summary>
            ResourceMetricSource indicates how to scale on a resource metric known to
            Kubernetes, as specified in requests and limits, describing each pod in the
            current scale target (e.g. CPU or memory).  The values will be averaged together
            before being compared to the target.  Such metrics are built in to Kubernetes,
            and have special scaling options on top of those available to normal per-pod
            metrics using the &quot;pods&quot; source.  Only one &quot;target&quot; type should be set.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ResourceMetricSource.#ctor">
            <summary>
            Initializes a new instance of the V2ResourceMetricSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ResourceMetricSource.#ctor(System.String,k8s.Models.V2MetricTarget)">
            <summary>
            Initializes a new instance of the V2ResourceMetricSource class.
            </summary>
            <param name="name">
            name is the name of the resource in question.
            </param>
            <param name="target">
            target specifies the target value for the given metric
            </param>
        </member>
        <member name="P:k8s.Models.V2ResourceMetricSource.Name">
            <summary>
            name is the name of the resource in question.
            </summary>
        </member>
        <member name="P:k8s.Models.V2ResourceMetricSource.Target">
            <summary>
            target specifies the target value for the given metric
            </summary>
        </member>
        <member name="M:k8s.Models.V2ResourceMetricSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V2ResourceMetricStatus">
            <summary>
            ResourceMetricStatus indicates the current value of a resource metric known to
            Kubernetes, as specified in requests and limits, describing each pod in the
            current scale target (e.g. CPU or memory).  Such metrics are built in to
            Kubernetes, and have special scaling options on top of those available to normal
            per-pod metrics using the &quot;pods&quot; source.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ResourceMetricStatus.#ctor">
            <summary>
            Initializes a new instance of the V2ResourceMetricStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ResourceMetricStatus.#ctor(k8s.Models.V2MetricValueStatus,System.String)">
            <summary>
            Initializes a new instance of the V2ResourceMetricStatus class.
            </summary>
            <param name="current">
            current contains the current value for the given metric
            </param>
            <param name="name">
            name is the name of the resource in question.
            </param>
        </member>
        <member name="P:k8s.Models.V2ResourceMetricStatus.Current">
            <summary>
            current contains the current value for the given metric
            </summary>
        </member>
        <member name="P:k8s.Models.V2ResourceMetricStatus.Name">
            <summary>
            name is the name of the resource in question.
            </summary>
        </member>
        <member name="M:k8s.Models.V2ResourceMetricStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CronJob">
            <summary>
            CronJob represents the configuration of a single cron job.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJob.#ctor">
            <summary>
            Initializes a new instance of the V1CronJob class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJob.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1CronJobSpec,k8s.Models.V1CronJobStatus)">
            <summary>
            Initializes a new instance of the V1CronJob class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Specification of the desired behavior of a cron job, including the schedule.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Current status of a cron job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1CronJob.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJob.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJob.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJob.Spec">
            <summary>
            Specification of the desired behavior of a cron job, including the schedule.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJob.Status">
            <summary>
            Current status of a cron job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJob.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CronJobList">
            <summary>
            CronJobList is a collection of cron jobs.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobList.#ctor">
            <summary>
            Initializes a new instance of the V1CronJobList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobList.#ctor(System.Collections.Generic.IList{k8s.Models.V1CronJob},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1CronJobList class.
            </summary>
            <param name="items">
            items is the list of CronJobs.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1CronJobList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobList.Items">
            <summary>
            items is the list of CronJobs.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CronJobSpec">
            <summary>
            CronJobSpec describes how the job execution will look like and when it will
            actually run.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobSpec.#ctor">
            <summary>
            Initializes a new instance of the V1CronJobSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobSpec.#ctor(k8s.Models.V1JobTemplateSpec,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the V1CronJobSpec class.
            </summary>
            <param name="jobTemplate">
            Specifies the job that will be created when executing a CronJob.
            </param>
            <param name="schedule">
            The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
            </param>
            <param name="concurrencyPolicy">
            Specifies how to treat concurrent executions of a Job. Valid values are:
            
            - &quot;Allow&quot; (default): allows CronJobs to run concurrently; - &quot;Forbid&quot;: forbids
            concurrent runs, skipping next run if previous run hasn&apos;t finished yet; -
            &quot;Replace&quot;: cancels currently running job and replaces it with a new one
            </param>
            <param name="failedJobsHistoryLimit">
            The number of failed finished jobs to retain. Value must be non-negative
            integer. Defaults to 1.
            </param>
            <param name="startingDeadlineSeconds">
            Optional deadline in seconds for starting the job if it misses scheduled time
            for any reason.  Missed jobs executions will be counted as failed ones.
            </param>
            <param name="successfulJobsHistoryLimit">
            The number of successful finished jobs to retain. Value must be non-negative
            integer. Defaults to 3.
            </param>
            <param name="suspend">
            This flag tells the controller to suspend subsequent executions, it does not
            apply to already started executions.  Defaults to false.
            </param>
            <param name="timeZone">
            The time zone name for the given schedule, see
            https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified,
            this will default to the time zone of the kube-controller-manager process. The
            set of valid time zone names and the time zone offset is loaded from the
            system-wide time zone database by the API server during CronJob validation and
            the controller manager during execution. If no system-wide time zone database
            can be found a bundled version of the database is used instead. If the time zone
            name becomes invalid during the lifetime of a CronJob or due to a change in host
            configuration, the controller will stop creating new new Jobs and will create a
            system event with the reason UnknownTimeZone. More information can be found in
            https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
            </param>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.ConcurrencyPolicy">
            <summary>
            Specifies how to treat concurrent executions of a Job. Valid values are:
            
            - &quot;Allow&quot; (default): allows CronJobs to run concurrently; - &quot;Forbid&quot;: forbids
            concurrent runs, skipping next run if previous run hasn&apos;t finished yet; -
            &quot;Replace&quot;: cancels currently running job and replaces it with a new one
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.FailedJobsHistoryLimit">
            <summary>
            The number of failed finished jobs to retain. Value must be non-negative
            integer. Defaults to 1.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.JobTemplate">
            <summary>
            Specifies the job that will be created when executing a CronJob.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.Schedule">
            <summary>
            The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.StartingDeadlineSeconds">
            <summary>
            Optional deadline in seconds for starting the job if it misses scheduled time
            for any reason.  Missed jobs executions will be counted as failed ones.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.SuccessfulJobsHistoryLimit">
            <summary>
            The number of successful finished jobs to retain. Value must be non-negative
            integer. Defaults to 3.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.Suspend">
            <summary>
            This flag tells the controller to suspend subsequent executions, it does not
            apply to already started executions.  Defaults to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobSpec.TimeZone">
            <summary>
            The time zone name for the given schedule, see
            https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified,
            this will default to the time zone of the kube-controller-manager process. The
            set of valid time zone names and the time zone offset is loaded from the
            system-wide time zone database by the API server during CronJob validation and
            the controller manager during execution. If no system-wide time zone database
            can be found a bundled version of the database is used instead. If the time zone
            name becomes invalid during the lifetime of a CronJob or due to a change in host
            configuration, the controller will stop creating new new Jobs and will create a
            system event with the reason UnknownTimeZone. More information can be found in
            https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CronJobStatus">
            <summary>
            CronJobStatus represents the current state of a cron job.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobStatus.#ctor">
            <summary>
            Initializes a new instance of the V1CronJobStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1ObjectReference},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the V1CronJobStatus class.
            </summary>
            <param name="active">
            A list of pointers to currently running jobs.
            </param>
            <param name="lastScheduleTime">
            Information when was the last time the job was successfully scheduled.
            </param>
            <param name="lastSuccessfulTime">
            Information when was the last time the job successfully completed.
            </param>
        </member>
        <member name="P:k8s.Models.V1CronJobStatus.Active">
            <summary>
            A list of pointers to currently running jobs.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobStatus.LastScheduleTime">
            <summary>
            Information when was the last time the job was successfully scheduled.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CronJobStatus.LastSuccessfulTime">
            <summary>
            Information when was the last time the job successfully completed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CronJobStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Job">
            <summary>
            Job represents the configuration of a single job.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Job.#ctor">
            <summary>
            Initializes a new instance of the V1Job class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Job.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1JobSpec,k8s.Models.V1JobStatus)">
            <summary>
            Initializes a new instance of the V1Job class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Specification of the desired behavior of a job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Current status of a job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Job.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Job.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Job.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Job.Spec">
            <summary>
            Specification of the desired behavior of a job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1Job.Status">
            <summary>
            Current status of a job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Job.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1JobCondition">
            <summary>
            JobCondition describes current state of a job.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobCondition.#ctor">
            <summary>
            Initializes a new instance of the V1JobCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1JobCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of job condition, Complete or Failed.
            </param>
            <param name="lastProbeTime">
            Last time the condition was checked.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transit from one status to another.
            </param>
            <param name="message">
            Human readable message indicating details about last transition.
            </param>
            <param name="reason">
            (brief) reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1JobCondition.LastProbeTime">
            <summary>
            Last time the condition was checked.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobCondition.LastTransitionTime">
            <summary>
            Last time the condition transit from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobCondition.Message">
            <summary>
            Human readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobCondition.Reason">
            <summary>
            (brief) reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobCondition.Type">
            <summary>
            Type of job condition, Complete or Failed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1JobList">
            <summary>
            JobList is a collection of jobs.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobList.#ctor">
            <summary>
            Initializes a new instance of the V1JobList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Job},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1JobList class.
            </summary>
            <param name="items">
            items is the list of Jobs.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1JobList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobList.Items">
            <summary>
            items is the list of Jobs.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1JobSpec">
            <summary>
            JobSpec describes how the job execution will look like.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobSpec.#ctor">
            <summary>
            Initializes a new instance of the V1JobSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobSpec.#ctor(k8s.Models.V1PodTemplateSpec,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1PodFailurePolicy,System.String,k8s.Models.V1LabelSelector,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1JobSpec class.
            </summary>
            <param name="template">
            Describes the pod that will be created when executing a job. The only allowed
            template.spec.restartPolicy values are &quot;Never&quot; or &quot;OnFailure&quot;. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </param>
            <param name="activeDeadlineSeconds">
            Specifies the duration in seconds relative to the startTime that the job may be
            continuously active before the system tries to terminate it; value must be
            positive integer. If a Job is suspended (at creation or through an update), this
            timer will effectively be stopped and reset when the Job is resumed again.
            </param>
            <param name="backoffLimit">
            Specifies the number of retries before marking this job failed. Defaults to 6
            </param>
            <param name="backoffLimitPerIndex">
            Specifies the limit for the number of retries within an index before marking
            this index as failed. When enabled the number of failures per index is kept in
            the pod&apos;s batch.kubernetes.io/job-index-failure-count annotation. It can only be
            set when Job&apos;s completionMode=Indexed, and the Pod&apos;s restart policy is Never.
            The field is immutable. This field is alpha-level. It can be used when the
            `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).
            </param>
            <param name="completionMode">
            completionMode specifies how Pod completions are tracked. It can be `NonIndexed`
            (default) or `Indexed`.
            
            `NonIndexed` means that the Job is considered complete when there have been
            .spec.completions successfully completed Pods. Each Pod completion is homologous
            to each other.
            
            `Indexed` means that the Pods of a Job get an associated completion index from 0
            to (.spec.completions - 1), available in the annotation
            batch.kubernetes.io/job-completion-index. The Job is considered complete when
            there is one successfully completed Pod for each index. When value is `Indexed`,
            .spec.completions must be specified and `.spec.parallelism` must be less than or
            equal to 10^5. In addition, The Pod name takes the form
            `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form
            `$(job-name)-$(index)`.
            
            More completion modes can be added in the future. If the Job controller observes
            a mode that it doesn&apos;t recognize, which is possible during upgrades due to
            version skew, the controller skips updates for the Job.
            </param>
            <param name="completions">
            Specifies the desired number of successfully finished pods the job should be run
            with.  Setting to null means that the success of any pod signals the success of
            all pods, and allows parallelism to have any positive value.  Setting to 1 means
            that parallelism is limited to 1 and the success of that pod signals the success
            of the job. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </param>
            <param name="manualSelector">
            manualSelector controls generation of pod labels and pod selectors. Leave
            `manualSelector` unset unless you are certain what you are doing. When false or
            unset, the system pick labels unique to this job and appends those labels to the
            pod template.  When true, the user is responsible for picking unique labels and
            specifying the selector.  Failure to pick a unique label may cause this and
            other jobs to not function correctly.  However, You may see
            `manualSelector=true` in jobs that were created with the old
            `extensions/v1beta1` API. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
            </param>
            <param name="maxFailedIndexes">
            Specifies the maximal number of failed indexes before marking the Job as failed,
            when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this
            number the entire Job is marked as Failed and its execution is terminated. When
            left as null the job continues execution of all of its indexes and is marked
            with the `Complete` Job condition. It can only be specified when
            backoffLimitPerIndex is set. It can be null or up to completions. It is required
            and must be less than or equal to 10^4 when is completions greater than 10^5.
            This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex`
            feature gate is enabled (disabled by default).
            </param>
            <param name="parallelism">
            Specifies the maximum desired number of pods the job should run at any given
            time. The actual number of pods running in steady state will be less than this
            number when ((.spec.completions - .status.successful) &lt; .spec.parallelism), i.e.
            when the work left to do is less than max parallelism. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </param>
            <param name="podFailurePolicy">
            Specifies the policy of handling failed pods. In particular, it allows to
            specify the set of actions and conditions which need to be satisfied to take the
            associated action. If empty, the default behaviour applies - the counter of
            failed pods, represented by the jobs&apos;s .status.failed field, is incremented and
            it is checked against the backoffLimit. This field cannot be used in combination
            with restartPolicy=OnFailure.
            
            This field is beta-level. It can be used when the `JobPodFailurePolicy` feature
            gate is enabled (enabled by default).
            </param>
            <param name="podReplacementPolicy">
            podReplacementPolicy specifies when to create replacement Pods. Possible values
            are: - TerminatingOrFailed means that we recreate pods
            when they are terminating (has a metadata.deletionTimestamp) or failed.
            - Failed means to wait until a previously created Pod is fully terminated (has
            phase
            Failed or Succeeded) before creating a replacement Pod.
            
            When using podFailurePolicy, Failed is the the only allowed value.
            TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not
            in use. This is an alpha field. Enable JobPodReplacementPolicy to be able to use
            this field.
            </param>
            <param name="selector">
            A label query over pods that should match the pod count. Normally, the system
            sets this field for you. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </param>
            <param name="suspend">
            suspend specifies whether the Job controller should create Pods or not. If a Job
            is created with suspend set to true, no Pods are created by the Job controller.
            If a Job is suspended after creation (i.e. the flag goes from false to true),
            the Job controller will delete all active Pods associated with this Job. Users
            must design their workload to gracefully handle this. Suspending a Job will
            reset the StartTime field of the Job, effectively resetting the
            ActiveDeadlineSeconds timer too. Defaults to false.
            </param>
            <param name="ttlSecondsAfterFinished">
            ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution
            (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after
            the Job finishes, it is eligible to be automatically deleted. When the Job is
            being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If
            this field is unset, the Job won&apos;t be automatically deleted. If this field is
            set to zero, the Job becomes eligible to be deleted immediately after it
            finishes.
            </param>
        </member>
        <member name="P:k8s.Models.V1JobSpec.ActiveDeadlineSeconds">
            <summary>
            Specifies the duration in seconds relative to the startTime that the job may be
            continuously active before the system tries to terminate it; value must be
            positive integer. If a Job is suspended (at creation or through an update), this
            timer will effectively be stopped and reset when the Job is resumed again.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.BackoffLimit">
            <summary>
            Specifies the number of retries before marking this job failed. Defaults to 6
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.BackoffLimitPerIndex">
            <summary>
            Specifies the limit for the number of retries within an index before marking
            this index as failed. When enabled the number of failures per index is kept in
            the pod&apos;s batch.kubernetes.io/job-index-failure-count annotation. It can only be
            set when Job&apos;s completionMode=Indexed, and the Pod&apos;s restart policy is Never.
            The field is immutable. This field is alpha-level. It can be used when the
            `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.CompletionMode">
            <summary>
            completionMode specifies how Pod completions are tracked. It can be `NonIndexed`
            (default) or `Indexed`.
            
            `NonIndexed` means that the Job is considered complete when there have been
            .spec.completions successfully completed Pods. Each Pod completion is homologous
            to each other.
            
            `Indexed` means that the Pods of a Job get an associated completion index from 0
            to (.spec.completions - 1), available in the annotation
            batch.kubernetes.io/job-completion-index. The Job is considered complete when
            there is one successfully completed Pod for each index. When value is `Indexed`,
            .spec.completions must be specified and `.spec.parallelism` must be less than or
            equal to 10^5. In addition, The Pod name takes the form
            `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form
            `$(job-name)-$(index)`.
            
            More completion modes can be added in the future. If the Job controller observes
            a mode that it doesn&apos;t recognize, which is possible during upgrades due to
            version skew, the controller skips updates for the Job.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.Completions">
            <summary>
            Specifies the desired number of successfully finished pods the job should be run
            with.  Setting to null means that the success of any pod signals the success of
            all pods, and allows parallelism to have any positive value.  Setting to 1 means
            that parallelism is limited to 1 and the success of that pod signals the success
            of the job. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.ManualSelector">
            <summary>
            manualSelector controls generation of pod labels and pod selectors. Leave
            `manualSelector` unset unless you are certain what you are doing. When false or
            unset, the system pick labels unique to this job and appends those labels to the
            pod template.  When true, the user is responsible for picking unique labels and
            specifying the selector.  Failure to pick a unique label may cause this and
            other jobs to not function correctly.  However, You may see
            `manualSelector=true` in jobs that were created with the old
            `extensions/v1beta1` API. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.MaxFailedIndexes">
            <summary>
            Specifies the maximal number of failed indexes before marking the Job as failed,
            when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this
            number the entire Job is marked as Failed and its execution is terminated. When
            left as null the job continues execution of all of its indexes and is marked
            with the `Complete` Job condition. It can only be specified when
            backoffLimitPerIndex is set. It can be null or up to completions. It is required
            and must be less than or equal to 10^4 when is completions greater than 10^5.
            This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex`
            feature gate is enabled (disabled by default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.Parallelism">
            <summary>
            Specifies the maximum desired number of pods the job should run at any given
            time. The actual number of pods running in steady state will be less than this
            number when ((.spec.completions - .status.successful) &lt; .spec.parallelism), i.e.
            when the work left to do is less than max parallelism. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.PodFailurePolicy">
            <summary>
            Specifies the policy of handling failed pods. In particular, it allows to
            specify the set of actions and conditions which need to be satisfied to take the
            associated action. If empty, the default behaviour applies - the counter of
            failed pods, represented by the jobs&apos;s .status.failed field, is incremented and
            it is checked against the backoffLimit. This field cannot be used in combination
            with restartPolicy=OnFailure.
            
            This field is beta-level. It can be used when the `JobPodFailurePolicy` feature
            gate is enabled (enabled by default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.PodReplacementPolicy">
            <summary>
            podReplacementPolicy specifies when to create replacement Pods. Possible values
            are: - TerminatingOrFailed means that we recreate pods
            when they are terminating (has a metadata.deletionTimestamp) or failed.
            - Failed means to wait until a previously created Pod is fully terminated (has
            phase
            Failed or Succeeded) before creating a replacement Pod.
            
            When using podFailurePolicy, Failed is the the only allowed value.
            TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not
            in use. This is an alpha field. Enable JobPodReplacementPolicy to be able to use
            this field.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.Selector">
            <summary>
            A label query over pods that should match the pod count. Normally, the system
            sets this field for you. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.Suspend">
            <summary>
            suspend specifies whether the Job controller should create Pods or not. If a Job
            is created with suspend set to true, no Pods are created by the Job controller.
            If a Job is suspended after creation (i.e. the flag goes from false to true),
            the Job controller will delete all active Pods associated with this Job. Users
            must design their workload to gracefully handle this. Suspending a Job will
            reset the StartTime field of the Job, effectively resetting the
            ActiveDeadlineSeconds timer too. Defaults to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.Template">
            <summary>
            Describes the pod that will be created when executing a job. The only allowed
            template.spec.restartPolicy values are &quot;Never&quot; or &quot;OnFailure&quot;. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobSpec.TtlSecondsAfterFinished">
            <summary>
            ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution
            (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after
            the Job finishes, it is eligible to be automatically deleted. When the Job is
            being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If
            this field is unset, the Job won&apos;t be automatically deleted. If this field is
            set to zero, the Job becomes eligible to be deleted immediately after it
            finishes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1JobStatus">
            <summary>
            JobStatus represents the current state of a Job.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobStatus.#ctor">
            <summary>
            Initializes a new instance of the V1JobStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobStatus.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Collections.Generic.IList{k8s.Models.V1JobCondition},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1UncountedTerminatedPods)">
            <summary>
            Initializes a new instance of the V1JobStatus class.
            </summary>
            <param name="active">
            The number of pending and running pods.
            </param>
            <param name="completedIndexes">
            completedIndexes holds the completed indexes when .spec.completionMode =
            &quot;Indexed&quot; in a text format. The indexes are represented as decimal integers
            separated by commas. The numbers are listed in increasing order. Three or more
            consecutive numbers are compressed and represented by the first and last element
            of the series, separated by a hyphen. For example, if the completed indexes are
            1, 3, 4, 5 and 7, they are represented as &quot;1,3-5,7&quot;.
            </param>
            <param name="completionTime">
            Represents time when the job was completed. It is not guaranteed to be set in
            happens-before order across separate operations. It is represented in RFC3339
            form and is in UTC. The completion time is only set when the job finishes
            successfully.
            </param>
            <param name="conditions">
            The latest available observations of an object&apos;s current state. When a Job
            fails, one of the conditions will have type &quot;Failed&quot; and status true. When a Job
            is suspended, one of the conditions will have type &quot;Suspended&quot; and status true;
            when the Job is resumed, the status of this condition will become false. When a
            Job is completed, one of the conditions will have type &quot;Complete&quot; and status
            true. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </param>
            <param name="failed">
            The number of pods which reached phase Failed.
            </param>
            <param name="failedIndexes">
            FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The
            indexes are represented in the text format analogous as for the
            `completedIndexes` field, ie. they are kept as decimal integers separated by
            commas. The numbers are listed in increasing order. Three or more consecutive
            numbers are compressed and represented by the first and last element of the
            series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5
            and 7, they are represented as &quot;1,3-5,7&quot;. This field is alpha-level. It can be
            used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by
            default).
            </param>
            <param name="ready">
            The number of pods which have a Ready condition.
            
            This field is beta-level. The job controller populates the field when the
            feature gate JobReadyPods is enabled (enabled by default).
            </param>
            <param name="startTime">
            Represents time when the job controller started processing a job. When a Job is
            created in the suspended state, this field is not set until the first time it is
            resumed. This field is reset every time a Job is resumed from suspension. It is
            represented in RFC3339 form and is in UTC.
            </param>
            <param name="succeeded">
            The number of pods which reached phase Succeeded.
            </param>
            <param name="terminating">
            The number of pods which are terminating (in phase Pending or Running and have a
            deletionTimestamp).
            
            This field is alpha-level. The job controller populates the field when the
            feature gate JobPodReplacementPolicy is enabled (disabled by default).
            </param>
            <param name="uncountedTerminatedPods">
            uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job
            controller hasn&apos;t yet accounted for in the status counters.
            
            The job controller creates pods with a finalizer. When a pod terminates
            (succeeded or failed), the controller does three steps to account for it in the
            job status:
            
            1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3.
            Remove the pod UID from the arrays while increasing the corresponding
            counter.
            
            Old jobs might not be tracked using this field, in which case the field remains
            null.
            </param>
        </member>
        <member name="P:k8s.Models.V1JobStatus.Active">
            <summary>
            The number of pending and running pods.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.CompletedIndexes">
            <summary>
            completedIndexes holds the completed indexes when .spec.completionMode =
            &quot;Indexed&quot; in a text format. The indexes are represented as decimal integers
            separated by commas. The numbers are listed in increasing order. Three or more
            consecutive numbers are compressed and represented by the first and last element
            of the series, separated by a hyphen. For example, if the completed indexes are
            1, 3, 4, 5 and 7, they are represented as &quot;1,3-5,7&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.CompletionTime">
            <summary>
            Represents time when the job was completed. It is not guaranteed to be set in
            happens-before order across separate operations. It is represented in RFC3339
            form and is in UTC. The completion time is only set when the job finishes
            successfully.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.Conditions">
            <summary>
            The latest available observations of an object&apos;s current state. When a Job
            fails, one of the conditions will have type &quot;Failed&quot; and status true. When a Job
            is suspended, one of the conditions will have type &quot;Suspended&quot; and status true;
            when the Job is resumed, the status of this condition will become false. When a
            Job is completed, one of the conditions will have type &quot;Complete&quot; and status
            true. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.Failed">
            <summary>
            The number of pods which reached phase Failed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.FailedIndexes">
            <summary>
            FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The
            indexes are represented in the text format analogous as for the
            `completedIndexes` field, ie. they are kept as decimal integers separated by
            commas. The numbers are listed in increasing order. Three or more consecutive
            numbers are compressed and represented by the first and last element of the
            series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5
            and 7, they are represented as &quot;1,3-5,7&quot;. This field is alpha-level. It can be
            used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by
            default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.Ready">
            <summary>
            The number of pods which have a Ready condition.
            
            This field is beta-level. The job controller populates the field when the
            feature gate JobReadyPods is enabled (enabled by default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.StartTime">
            <summary>
            Represents time when the job controller started processing a job. When a Job is
            created in the suspended state, this field is not set until the first time it is
            resumed. This field is reset every time a Job is resumed from suspension. It is
            represented in RFC3339 form and is in UTC.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.Succeeded">
            <summary>
            The number of pods which reached phase Succeeded.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.Terminating">
            <summary>
            The number of pods which are terminating (in phase Pending or Running and have a
            deletionTimestamp).
            
            This field is alpha-level. The job controller populates the field when the
            feature gate JobPodReplacementPolicy is enabled (disabled by default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobStatus.UncountedTerminatedPods">
            <summary>
            uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job
            controller hasn&apos;t yet accounted for in the status counters.
            
            The job controller creates pods with a finalizer. When a pod terminates
            (succeeded or failed), the controller does three steps to account for it in the
            job status:
            
            1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3.
            Remove the pod UID from the arrays while increasing the corresponding
            counter.
            
            Old jobs might not be tracked using this field, in which case the field remains
            null.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1JobTemplateSpec">
            <summary>
            JobTemplateSpec describes the data a Job should have when created from a
            template
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobTemplateSpec.#ctor">
            <summary>
            Initializes a new instance of the V1JobTemplateSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobTemplateSpec.#ctor(k8s.Models.V1ObjectMeta,k8s.Models.V1JobSpec)">
            <summary>
            Initializes a new instance of the V1JobTemplateSpec class.
            </summary>
            <param name="metadata">
            Standard object&apos;s metadata of the jobs created from this template. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Specification of the desired behavior of the job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1JobTemplateSpec.Metadata">
            <summary>
            Standard object&apos;s metadata of the jobs created from this template. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1JobTemplateSpec.Spec">
            <summary>
            Specification of the desired behavior of the job. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1JobTemplateSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodFailurePolicy">
            <summary>
            PodFailurePolicy describes how failed pods influence the backoffLimit.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicy.#ctor">
            <summary>
            Initializes a new instance of the V1PodFailurePolicy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicy.#ctor(System.Collections.Generic.IList{k8s.Models.V1PodFailurePolicyRule})">
            <summary>
            Initializes a new instance of the V1PodFailurePolicy class.
            </summary>
            <param name="rules">
            A list of pod failure policy rules. The rules are evaluated in order. Once a
            rule matches a Pod failure, the remaining of the rules are ignored. When no rule
            matches the Pod failure, the default handling applies - the counter of pod
            failures is incremented and it is checked against the backoffLimit. At most 20
            elements are allowed.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicy.Rules">
            <summary>
            A list of pod failure policy rules. The rules are evaluated in order. Once a
            rule matches a Pod failure, the remaining of the rules are ignored. When no rule
            matches the Pod failure, the default handling applies - the counter of pod
            failures is incremented and it is checked against the backoffLimit. At most 20
            elements are allowed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodFailurePolicyOnExitCodesRequirement">
            <summary>
            PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a
            failed pod based on its container exit codes. In particular, it lookups the
            .state.terminated.exitCode for each app container and init container status,
            represented by the .status.containerStatuses and .status.initContainerStatuses
            fields in the Pod status, respectively. Containers completed with success (exit
            code 0) are excluded from the requirement check.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyOnExitCodesRequirement.#ctor">
            <summary>
            Initializes a new instance of the V1PodFailurePolicyOnExitCodesRequirement class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyOnExitCodesRequirement.#ctor(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the V1PodFailurePolicyOnExitCodesRequirement class.
            </summary>
            <param name="operatorProperty">
            Represents the relationship between the container exit code(s) and the specified
            values. Containers completed with success (exit code 0) are excluded from the
            requirement check. Possible values are:
            
            - In: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted
            by the &apos;containerName&apos; field) is in the set of specified values.
            - NotIn: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted
            by the &apos;containerName&apos; field) is not in the set of specified values.
            Additional values are considered to be added in the future. Clients should react
            to an unknown operator by assuming the requirement is not satisfied.
            </param>
            <param name="values">
            Specifies the set of values. Each returned container exit code (might be
            multiple in case of multiple containers) is checked against this set of values
            with respect to the operator. The list of values must be ordered and must not
            contain duplicates. Value &apos;0&apos; cannot be used for the In operator. At least one
            element is required. At most 255 elements are allowed.
            </param>
            <param name="containerName">
            Restricts the check for exit codes to the container with the specified name.
            When null, the rule applies to all containers. When specified, it should match
            one the container or initContainer names in the pod template.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyOnExitCodesRequirement.ContainerName">
            <summary>
            Restricts the check for exit codes to the container with the specified name.
            When null, the rule applies to all containers. When specified, it should match
            one the container or initContainer names in the pod template.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyOnExitCodesRequirement.OperatorProperty">
            <summary>
            Represents the relationship between the container exit code(s) and the specified
            values. Containers completed with success (exit code 0) are excluded from the
            requirement check. Possible values are:
            
            - In: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted
            by the &apos;containerName&apos; field) is in the set of specified values.
            - NotIn: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted
            by the &apos;containerName&apos; field) is not in the set of specified values.
            Additional values are considered to be added in the future. Clients should react
            to an unknown operator by assuming the requirement is not satisfied.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyOnExitCodesRequirement.Values">
            <summary>
            Specifies the set of values. Each returned container exit code (might be
            multiple in case of multiple containers) is checked against this set of values
            with respect to the operator. The list of values must be ordered and must not
            contain duplicates. Value &apos;0&apos; cannot be used for the In operator. At least one
            element is required. At most 255 elements are allowed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyOnExitCodesRequirement.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodFailurePolicyOnPodConditionsPattern">
            <summary>
            PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an
            actual pod condition type.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyOnPodConditionsPattern.#ctor">
            <summary>
            Initializes a new instance of the V1PodFailurePolicyOnPodConditionsPattern class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyOnPodConditionsPattern.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PodFailurePolicyOnPodConditionsPattern class.
            </summary>
            <param name="status">
            Specifies the required Pod condition status. To match a pod condition it is
            required that the specified status equals the pod condition status. Defaults to
            True.
            </param>
            <param name="type">
            Specifies the required Pod condition type. To match a pod condition it is
            required that specified type equals the pod condition type.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyOnPodConditionsPattern.Status">
            <summary>
            Specifies the required Pod condition status. To match a pod condition it is
            required that the specified status equals the pod condition status. Defaults to
            True.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyOnPodConditionsPattern.Type">
            <summary>
            Specifies the required Pod condition type. To match a pod condition it is
            required that specified type equals the pod condition type.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyOnPodConditionsPattern.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodFailurePolicyRule">
            <summary>
            PodFailurePolicyRule describes how a pod failure is handled when the
            requirements are met. One of onExitCodes and onPodConditions, but not both, can
            be used in each rule.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyRule.#ctor">
            <summary>
            Initializes a new instance of the V1PodFailurePolicyRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyRule.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1PodFailurePolicyOnPodConditionsPattern},k8s.Models.V1PodFailurePolicyOnExitCodesRequirement)">
            <summary>
            Initializes a new instance of the V1PodFailurePolicyRule class.
            </summary>
            <param name="action">
            Specifies the action taken on a pod failure when the requirements are satisfied.
            Possible values are:
            
            - FailJob: indicates that the pod&apos;s job is marked as Failed and all
            running pods are terminated.
            - FailIndex: indicates that the pod&apos;s index is marked as Failed and will
            not be restarted.
            This value is alpha-level. It can be used when the
            `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).
            - Ignore: indicates that the counter towards the .backoffLimit is not
            incremented and a replacement pod is created.
            - Count: indicates that the pod is handled in the default way - the
            counter towards the .backoffLimit is incremented.
            Additional values are considered to be added in the future. Clients should react
            to an unknown action by skipping the rule.
            </param>
            <param name="onPodConditions">
            Represents the requirement on the pod conditions. The requirement is represented
            as a list of pod condition patterns. The requirement is satisfied if at least
            one pattern matches an actual pod condition. At most 20 elements are allowed.
            </param>
            <param name="onExitCodes">
            Represents the requirement on the container exit codes.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyRule.Action">
            <summary>
            Specifies the action taken on a pod failure when the requirements are satisfied.
            Possible values are:
            
            - FailJob: indicates that the pod&apos;s job is marked as Failed and all
            running pods are terminated.
            - FailIndex: indicates that the pod&apos;s index is marked as Failed and will
            not be restarted.
            This value is alpha-level. It can be used when the
            `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).
            - Ignore: indicates that the counter towards the .backoffLimit is not
            incremented and a replacement pod is created.
            - Count: indicates that the pod is handled in the default way - the
            counter towards the .backoffLimit is incremented.
            Additional values are considered to be added in the future. Clients should react
            to an unknown action by skipping the rule.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyRule.OnExitCodes">
            <summary>
            Represents the requirement on the container exit codes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodFailurePolicyRule.OnPodConditions">
            <summary>
            Represents the requirement on the pod conditions. The requirement is represented
            as a list of pod condition patterns. The requirement is satisfied if at least
            one pattern matches an actual pod condition. At most 20 elements are allowed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodFailurePolicyRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1UncountedTerminatedPods">
            <summary>
            UncountedTerminatedPods holds UIDs of Pods that have terminated but haven&apos;t been
            accounted in Job status counters.
            </summary>
        </member>
        <member name="M:k8s.Models.V1UncountedTerminatedPods.#ctor">
            <summary>
            Initializes a new instance of the V1UncountedTerminatedPods class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1UncountedTerminatedPods.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1UncountedTerminatedPods class.
            </summary>
            <param name="failed">
            failed holds UIDs of failed Pods.
            </param>
            <param name="succeeded">
            succeeded holds UIDs of succeeded Pods.
            </param>
        </member>
        <member name="P:k8s.Models.V1UncountedTerminatedPods.Failed">
            <summary>
            failed holds UIDs of failed Pods.
            </summary>
        </member>
        <member name="P:k8s.Models.V1UncountedTerminatedPods.Succeeded">
            <summary>
            succeeded holds UIDs of succeeded Pods.
            </summary>
        </member>
        <member name="M:k8s.Models.V1UncountedTerminatedPods.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CertificateSigningRequest">
            <summary>
            CertificateSigningRequest objects provide a mechanism to obtain x509
            certificates by submitting a certificate signing request, and having it
            asynchronously approved and issued.
            
            Kubelets use this API to obtain:
            1. client certificates to authenticate to kube-apiserver (with the
            &quot;kubernetes.io/kube-apiserver-client-kubelet&quot; signerName).
            2. serving certificates for TLS endpoints kube-apiserver can connect to securely
            (with the &quot;kubernetes.io/kubelet-serving&quot; signerName).
            
            This API can be used to request client certificates to authenticate to
            kube-apiserver (with the &quot;kubernetes.io/kube-apiserver-client&quot; signerName), or
            to obtain certificates from custom non-Kubernetes signers.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequest.#ctor">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequest class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequest.#ctor(k8s.Models.V1CertificateSigningRequestSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1CertificateSigningRequestStatus)">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequest class.
            </summary>
            <param name="spec">
            spec contains the certificate request, and is immutable after creation. Only the
            request, signerName, expirationSeconds, and usages fields can be set on
            creation. Other fields are derived by Kubernetes and cannot be modified by
            users.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            
            </param>
            <param name="status">
            status contains information about whether the request is approved or denied, and
            the certificate issued by the signer, or the failure condition indicating signer
            failure.
            </param>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequest.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequest.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequest.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequest.Spec">
            <summary>
            spec contains the certificate request, and is immutable after creation. Only the
            request, signerName, expirationSeconds, and usages fields can be set on
            creation. Other fields are derived by Kubernetes and cannot be modified by
            users.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequest.Status">
            <summary>
            status contains information about whether the request is approved or denied, and
            the certificate issued by the signer, or the failure condition indicating signer
            failure.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CertificateSigningRequestCondition">
            <summary>
            CertificateSigningRequestCondition describes a condition of a
            CertificateSigningRequest object
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestCondition.#ctor">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestCondition class.
            </summary>
            <param name="status">
            status of the condition, one of True, False, Unknown. Approved, Denied, and
            Failed conditions may not be &quot;False&quot; or &quot;Unknown&quot;.
            </param>
            <param name="type">
            type of the condition. Known conditions are &quot;Approved&quot;, &quot;Denied&quot;, and &quot;Failed&quot;.
            
            An &quot;Approved&quot; condition is added via the /approval subresource, indicating the
            request was approved and should be issued by the signer.
            
            A &quot;Denied&quot; condition is added via the /approval subresource, indicating the
            request was denied and should not be issued by the signer.
            
            A &quot;Failed&quot; condition is added via the /status subresource, indicating the signer
            failed to issue the certificate.
            
            Approved and Denied conditions are mutually exclusive. Approved, Denied, and
            Failed conditions cannot be removed once added.
            
            Only one condition of a given type is allowed.
            </param>
            <param name="lastTransitionTime">
            lastTransitionTime is the time the condition last transitioned from one status
            to another. If unset, when a new condition type is added or an existing
            condition&apos;s status is changed, the server defaults this to the current time.
            </param>
            <param name="lastUpdateTime">
            lastUpdateTime is the time of the last update to this condition
            </param>
            <param name="message">
            message contains a human readable message with details about the request state
            </param>
            <param name="reason">
            reason indicates a brief reason for the request state
            </param>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestCondition.LastTransitionTime">
            <summary>
            lastTransitionTime is the time the condition last transitioned from one status
            to another. If unset, when a new condition type is added or an existing
            condition&apos;s status is changed, the server defaults this to the current time.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestCondition.LastUpdateTime">
            <summary>
            lastUpdateTime is the time of the last update to this condition
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestCondition.Message">
            <summary>
            message contains a human readable message with details about the request state
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestCondition.Reason">
            <summary>
            reason indicates a brief reason for the request state
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestCondition.Status">
            <summary>
            status of the condition, one of True, False, Unknown. Approved, Denied, and
            Failed conditions may not be &quot;False&quot; or &quot;Unknown&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestCondition.Type">
            <summary>
            type of the condition. Known conditions are &quot;Approved&quot;, &quot;Denied&quot;, and &quot;Failed&quot;.
            
            An &quot;Approved&quot; condition is added via the /approval subresource, indicating the
            request was approved and should be issued by the signer.
            
            A &quot;Denied&quot; condition is added via the /approval subresource, indicating the
            request was denied and should not be issued by the signer.
            
            A &quot;Failed&quot; condition is added via the /status subresource, indicating the signer
            failed to issue the certificate.
            
            Approved and Denied conditions are mutually exclusive. Approved, Denied, and
            Failed conditions cannot be removed once added.
            
            Only one condition of a given type is allowed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CertificateSigningRequestList">
            <summary>
            CertificateSigningRequestList is a collection of CertificateSigningRequest
            objects
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestList.#ctor">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestList.#ctor(System.Collections.Generic.IList{k8s.Models.V1CertificateSigningRequest},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestList class.
            </summary>
            <param name="items">
            items is a collection of CertificateSigningRequest objects
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            
            </param>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestList.Items">
            <summary>
            items is a collection of CertificateSigningRequest objects
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestList.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CertificateSigningRequestSpec">
            <summary>
            CertificateSigningRequestSpec contains the certificate request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestSpec.#ctor">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestSpec.#ctor(System.Byte[],System.String,System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestSpec class.
            </summary>
            <param name="request">
            request contains an x509 certificate signing request encoded in a &quot;CERTIFICATE
            REQUEST&quot; PEM block. When serialized as JSON or YAML, the data is additionally
            base64-encoded.
            </param>
            <param name="signerName">
            signerName indicates the requested signer, and is a qualified name.
            
            List/watch requests for CertificateSigningRequests can filter on this field
            using a &quot;spec.signerName=NAME&quot; fieldSelector.
            
            Well-known Kubernetes signers are:
            1. &quot;kubernetes.io/kube-apiserver-client&quot;: issues client certificates that can be
            used to authenticate to kube-apiserver.
            Requests for this signer are never auto-approved by kube-controller-manager, can
            be issued by the &quot;csrsigning&quot; controller in kube-controller-manager.
            2. &quot;kubernetes.io/kube-apiserver-client-kubelet&quot;: issues client certificates
            that kubelets use to authenticate to kube-apiserver.
            Requests for this signer can be auto-approved by the &quot;csrapproving&quot; controller
            in kube-controller-manager, and can be issued by the &quot;csrsigning&quot; controller in
            kube-controller-manager.
            3. &quot;kubernetes.io/kubelet-serving&quot; issues serving certificates that kubelets use
            to serve TLS endpoints, which kube-apiserver can connect to securely.
            Requests for this signer are never auto-approved by kube-controller-manager, and
            can be issued by the &quot;csrsigning&quot; controller in kube-controller-manager.
            
            More details are available at
            https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
            
            Custom signerNames can also be specified. The signer defines:
            1. Trust distribution: how trust (CA bundles) are distributed.
            2. Permitted subjects: and behavior when a disallowed subject is requested.
            3. Required, permitted, or forbidden x509 extensions in the request (including
            whether subjectAltNames are allowed, which types, restrictions on allowed
            values) and behavior when a disallowed extension is requested.
            4. Required, permitted, or forbidden key usages / extended key usages.
            5. Expiration/certificate lifetime: whether it is fixed by the signer,
            configurable by the admin.
            6. Whether or not requests for CA certificates are allowed.
            </param>
            <param name="expirationSeconds">
            expirationSeconds is the requested duration of validity of the issued
            certificate. The certificate signer may issue a certificate with a different
            validity duration so a client must check the delta between the notBefore and and
            notAfter fields in the issued certificate to determine the actual duration.
            
            The v1.22+ in-tree implementations of the well-known Kubernetes signers will
            honor this field as long as the requested duration is not greater than the
            maximum duration they will honor per the --cluster-signing-duration CLI flag to
            the Kubernetes controller manager.
            
            Certificate signers may not honor this field for various reasons:
            
            1. Old signer that is unaware of the field (such as the in-tree
            implementations prior to v1.22)
            2. Signer whose configured maximum is shorter than the requested duration
            3. Signer whose configured minimum is longer than the requested duration
            
            The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
            </param>
            <param name="extra">
            extra contains extra attributes of the user that created the
            CertificateSigningRequest. Populated by the API server on creation and
            immutable.
            </param>
            <param name="groups">
            groups contains group membership of the user that created the
            CertificateSigningRequest. Populated by the API server on creation and
            immutable.
            </param>
            <param name="uid">
            uid contains the uid of the user that created the CertificateSigningRequest.
            Populated by the API server on creation and immutable.
            </param>
            <param name="usages">
            usages specifies a set of key usages requested in the issued certificate.
            
            Requests for TLS client certificates typically request: &quot;digital signature&quot;,
            &quot;key encipherment&quot;, &quot;client auth&quot;.
            
            Requests for TLS serving certificates typically request: &quot;key encipherment&quot;,
            &quot;digital signature&quot;, &quot;server auth&quot;.
            
            Valid values are:
            &quot;signing&quot;, &quot;digital signature&quot;, &quot;content commitment&quot;,
            &quot;key encipherment&quot;, &quot;key agreement&quot;, &quot;data encipherment&quot;,
            &quot;cert sign&quot;, &quot;crl sign&quot;, &quot;encipher only&quot;, &quot;decipher only&quot;, &quot;any&quot;,
            &quot;server auth&quot;, &quot;client auth&quot;,
            &quot;code signing&quot;, &quot;email protection&quot;, &quot;s/mime&quot;,
            &quot;ipsec end system&quot;, &quot;ipsec tunnel&quot;, &quot;ipsec user&quot;,
            &quot;timestamping&quot;, &quot;ocsp signing&quot;, &quot;microsoft sgc&quot;, &quot;netscape sgc&quot;
            </param>
            <param name="username">
            username contains the name of the user that created the
            CertificateSigningRequest. Populated by the API server on creation and
            immutable.
            </param>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.ExpirationSeconds">
            <summary>
            expirationSeconds is the requested duration of validity of the issued
            certificate. The certificate signer may issue a certificate with a different
            validity duration so a client must check the delta between the notBefore and and
            notAfter fields in the issued certificate to determine the actual duration.
            
            The v1.22+ in-tree implementations of the well-known Kubernetes signers will
            honor this field as long as the requested duration is not greater than the
            maximum duration they will honor per the --cluster-signing-duration CLI flag to
            the Kubernetes controller manager.
            
            Certificate signers may not honor this field for various reasons:
            
            1. Old signer that is unaware of the field (such as the in-tree
            implementations prior to v1.22)
            2. Signer whose configured maximum is shorter than the requested duration
            3. Signer whose configured minimum is longer than the requested duration
            
            The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.Extra">
            <summary>
            extra contains extra attributes of the user that created the
            CertificateSigningRequest. Populated by the API server on creation and
            immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.Groups">
            <summary>
            groups contains group membership of the user that created the
            CertificateSigningRequest. Populated by the API server on creation and
            immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.Request">
            <summary>
            request contains an x509 certificate signing request encoded in a &quot;CERTIFICATE
            REQUEST&quot; PEM block. When serialized as JSON or YAML, the data is additionally
            base64-encoded.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.SignerName">
            <summary>
            signerName indicates the requested signer, and is a qualified name.
            
            List/watch requests for CertificateSigningRequests can filter on this field
            using a &quot;spec.signerName=NAME&quot; fieldSelector.
            
            Well-known Kubernetes signers are:
            1. &quot;kubernetes.io/kube-apiserver-client&quot;: issues client certificates that can be
            used to authenticate to kube-apiserver.
            Requests for this signer are never auto-approved by kube-controller-manager, can
            be issued by the &quot;csrsigning&quot; controller in kube-controller-manager.
            2. &quot;kubernetes.io/kube-apiserver-client-kubelet&quot;: issues client certificates
            that kubelets use to authenticate to kube-apiserver.
            Requests for this signer can be auto-approved by the &quot;csrapproving&quot; controller
            in kube-controller-manager, and can be issued by the &quot;csrsigning&quot; controller in
            kube-controller-manager.
            3. &quot;kubernetes.io/kubelet-serving&quot; issues serving certificates that kubelets use
            to serve TLS endpoints, which kube-apiserver can connect to securely.
            Requests for this signer are never auto-approved by kube-controller-manager, and
            can be issued by the &quot;csrsigning&quot; controller in kube-controller-manager.
            
            More details are available at
            https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
            
            Custom signerNames can also be specified. The signer defines:
            1. Trust distribution: how trust (CA bundles) are distributed.
            2. Permitted subjects: and behavior when a disallowed subject is requested.
            3. Required, permitted, or forbidden x509 extensions in the request (including
            whether subjectAltNames are allowed, which types, restrictions on allowed
            values) and behavior when a disallowed extension is requested.
            4. Required, permitted, or forbidden key usages / extended key usages.
            5. Expiration/certificate lifetime: whether it is fixed by the signer,
            configurable by the admin.
            6. Whether or not requests for CA certificates are allowed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.Uid">
            <summary>
            uid contains the uid of the user that created the CertificateSigningRequest.
            Populated by the API server on creation and immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.Usages">
            <summary>
            usages specifies a set of key usages requested in the issued certificate.
            
            Requests for TLS client certificates typically request: &quot;digital signature&quot;,
            &quot;key encipherment&quot;, &quot;client auth&quot;.
            
            Requests for TLS serving certificates typically request: &quot;key encipherment&quot;,
            &quot;digital signature&quot;, &quot;server auth&quot;.
            
            Valid values are:
            &quot;signing&quot;, &quot;digital signature&quot;, &quot;content commitment&quot;,
            &quot;key encipherment&quot;, &quot;key agreement&quot;, &quot;data encipherment&quot;,
            &quot;cert sign&quot;, &quot;crl sign&quot;, &quot;encipher only&quot;, &quot;decipher only&quot;, &quot;any&quot;,
            &quot;server auth&quot;, &quot;client auth&quot;,
            &quot;code signing&quot;, &quot;email protection&quot;, &quot;s/mime&quot;,
            &quot;ipsec end system&quot;, &quot;ipsec tunnel&quot;, &quot;ipsec user&quot;,
            &quot;timestamping&quot;, &quot;ocsp signing&quot;, &quot;microsoft sgc&quot;, &quot;netscape sgc&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestSpec.Username">
            <summary>
            username contains the name of the user that created the
            CertificateSigningRequest. Populated by the API server on creation and
            immutable.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CertificateSigningRequestStatus">
            <summary>
            CertificateSigningRequestStatus contains conditions used to indicate
            approved/denied/failed status of the request, and the issued certificate.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestStatus.#ctor">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestStatus.#ctor(System.Byte[],System.Collections.Generic.IList{k8s.Models.V1CertificateSigningRequestCondition})">
            <summary>
            Initializes a new instance of the V1CertificateSigningRequestStatus class.
            </summary>
            <param name="certificate">
            certificate is populated with an issued certificate by the signer after an
            Approved condition is present. This field is set via the /status subresource.
            Once populated, this field is immutable.
            
            If the certificate signing request is denied, a condition of type &quot;Denied&quot; is
            added and this field remains empty. If the signer cannot issue the certificate,
            a condition of type &quot;Failed&quot; is added and this field remains empty.
            
            Validation requirements:
            1. certificate must contain one or more PEM blocks.
            2. All PEM blocks must have the &quot;CERTIFICATE&quot; label, contain no headers, and the
            encoded data
            must be a BER-encoded ASN.1 Certificate structure as described in section 4 of
            RFC5280.
            3. Non-PEM content may appear before or after the &quot;CERTIFICATE&quot; PEM blocks and
            is unvalidated,
            to allow for explanatory text as described in section 5.2 of RFC7468.
            
            If more than one PEM block is present, and the definition of the requested
            spec.signerName does not indicate otherwise, the first block is the issued
            certificate, and subsequent blocks should be treated as intermediate
            certificates and presented in TLS handshakes.
            
            The certificate is encoded in PEM format.
            
            When serialized as JSON or YAML, the data is additionally base64-encoded, so it
            consists of:
            
            base64(
            -----BEGIN CERTIFICATE-----
            ...
            -----END CERTIFICATE-----
            )
            </param>
            <param name="conditions">
            conditions applied to the request. Known conditions are &quot;Approved&quot;, &quot;Denied&quot;,
            and &quot;Failed&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestStatus.Certificate">
            <summary>
            certificate is populated with an issued certificate by the signer after an
            Approved condition is present. This field is set via the /status subresource.
            Once populated, this field is immutable.
            
            If the certificate signing request is denied, a condition of type &quot;Denied&quot; is
            added and this field remains empty. If the signer cannot issue the certificate,
            a condition of type &quot;Failed&quot; is added and this field remains empty.
            
            Validation requirements:
            1. certificate must contain one or more PEM blocks.
            2. All PEM blocks must have the &quot;CERTIFICATE&quot; label, contain no headers, and the
            encoded data
            must be a BER-encoded ASN.1 Certificate structure as described in section 4 of
            RFC5280.
            3. Non-PEM content may appear before or after the &quot;CERTIFICATE&quot; PEM blocks and
            is unvalidated,
            to allow for explanatory text as described in section 5.2 of RFC7468.
            
            If more than one PEM block is present, and the definition of the requested
            spec.signerName does not indicate otherwise, the first block is the issued
            certificate, and subsequent blocks should be treated as intermediate
            certificates and presented in TLS handshakes.
            
            The certificate is encoded in PEM format.
            
            When serialized as JSON or YAML, the data is additionally base64-encoded, so it
            consists of:
            
            base64(
            -----BEGIN CERTIFICATE-----
            ...
            -----END CERTIFICATE-----
            )
            </summary>
        </member>
        <member name="P:k8s.Models.V1CertificateSigningRequestStatus.Conditions">
            <summary>
            conditions applied to the request. Known conditions are &quot;Approved&quot;, &quot;Denied&quot;,
            and &quot;Failed&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CertificateSigningRequestStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ClusterTrustBundle">
            <summary>
            ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root
            certificates).
            
            ClusterTrustBundle objects are considered to be readable by any authenticated
            user in the cluster, because they can be mounted by pods using the
            `clusterTrustBundle` projection.  All service accounts have read access to
            ClusterTrustBundles by default.  Users who only have namespace-level access to a
            cluster can read ClusterTrustBundles by impersonating a serviceaccount that they
            have access to.
            
            It can be optionally associated with a particular assigner, in which case it
            contains one valid set of trust anchors for that signer. Signers may have
            multiple associated ClusterTrustBundles; each is an independent set of trust
            anchors for that signer. Admission control is used to enforce that only users
            with permissions on the signer can create or modify the corresponding bundle.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundle.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ClusterTrustBundle class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundle.#ctor(k8s.Models.V1alpha1ClusterTrustBundleSpec,System.String,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1alpha1ClusterTrustBundle class.
            </summary>
            <param name="spec">
            spec contains the signer (if any) and trust anchors.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            metadata contains the object metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundle.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundle.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundle.Metadata">
            <summary>
            metadata contains the object metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundle.Spec">
            <summary>
            spec contains the signer (if any) and trust anchors.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundle.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ClusterTrustBundleList">
            <summary>
            ClusterTrustBundleList is a collection of ClusterTrustBundle objects
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundleList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ClusterTrustBundleList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundleList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha1ClusterTrustBundle},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha1ClusterTrustBundleList class.
            </summary>
            <param name="items">
            items is a collection of ClusterTrustBundle objects
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            metadata contains the list metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundleList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundleList.Items">
            <summary>
            items is a collection of ClusterTrustBundle objects
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundleList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundleList.Metadata">
            <summary>
            metadata contains the list metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundleList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ClusterTrustBundleSpec">
            <summary>
            ClusterTrustBundleSpec contains the signer and trust anchors.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundleSpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ClusterTrustBundleSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundleSpec.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1ClusterTrustBundleSpec class.
            </summary>
            <param name="trustBundle">
            trustBundle contains the individual X.509 trust anchors for this bundle, as PEM
            bundle of PEM-wrapped, DER-formatted X.509 certificates.
            
            The data must consist only of PEM certificate blocks that parse as valid X.509
            certificates.  Each certificate must include a basic constraints extension with
            the CA bit set.  The API server will reject objects that contain duplicate
            certificates, or that use PEM block headers.
            
            Users of ClusterTrustBundles, including Kubelet, are free to reorder and
            deduplicate certificate blocks in this file according to their own logic, as
            well as to drop PEM block headers and inter-block data.
            </param>
            <param name="signerName">
            signerName indicates the associated signer, if any.
            
            In order to create or update a ClusterTrustBundle that sets signerName, you must
            have the following cluster-scoped permission: group=certificates.k8s.io
            resource=signers resourceName=&lt;the signer name&gt; verb=attest.
            
            If signerName is not empty, then the ClusterTrustBundle object must be named
            with the signer name as a prefix (translating slashes to colons). For example,
            for the signer name `example.com/foo`, valid ClusterTrustBundle object names
            include `example.com:foo:abc` and `example.com:foo:v1`.
            
            If signerName is empty, then the ClusterTrustBundle object&apos;s name must not have
            such a prefix.
            
            List/watch requests for ClusterTrustBundles can filter on this field using a
            `spec.signerName=NAME` field selector.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundleSpec.SignerName">
            <summary>
            signerName indicates the associated signer, if any.
            
            In order to create or update a ClusterTrustBundle that sets signerName, you must
            have the following cluster-scoped permission: group=certificates.k8s.io
            resource=signers resourceName=&lt;the signer name&gt; verb=attest.
            
            If signerName is not empty, then the ClusterTrustBundle object must be named
            with the signer name as a prefix (translating slashes to colons). For example,
            for the signer name `example.com/foo`, valid ClusterTrustBundle object names
            include `example.com:foo:abc` and `example.com:foo:v1`.
            
            If signerName is empty, then the ClusterTrustBundle object&apos;s name must not have
            such a prefix.
            
            List/watch requests for ClusterTrustBundles can filter on this field using a
            `spec.signerName=NAME` field selector.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterTrustBundleSpec.TrustBundle">
            <summary>
            trustBundle contains the individual X.509 trust anchors for this bundle, as PEM
            bundle of PEM-wrapped, DER-formatted X.509 certificates.
            
            The data must consist only of PEM certificate blocks that parse as valid X.509
            certificates.  Each certificate must include a basic constraints extension with
            the CA bit set.  The API server will reject objects that contain duplicate
            certificates, or that use PEM block headers.
            
            Users of ClusterTrustBundles, including Kubelet, are free to reorder and
            deduplicate certificate blocks in this file according to their own logic, as
            well as to drop PEM block headers and inter-block data.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterTrustBundleSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Lease">
            <summary>
            Lease defines a lease concept.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Lease.#ctor">
            <summary>
            Initializes a new instance of the V1Lease class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Lease.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1LeaseSpec)">
            <summary>
            Initializes a new instance of the V1Lease class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec contains the specification of the Lease. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Lease.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Lease.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Lease.Metadata">
            <summary>
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Lease.Spec">
            <summary>
            spec contains the specification of the Lease. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Lease.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LeaseList">
            <summary>
            LeaseList is a list of Lease objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LeaseList.#ctor">
            <summary>
            Initializes a new instance of the V1LeaseList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LeaseList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Lease},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1LeaseList class.
            </summary>
            <param name="items">
            items is a list of schema objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1LeaseList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1LeaseList.Items">
            <summary>
            items is a list of schema objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LeaseList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1LeaseList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1LeaseList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LeaseSpec">
            <summary>
            LeaseSpec is a specification of a Lease.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LeaseSpec.#ctor">
            <summary>
            Initializes a new instance of the V1LeaseSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LeaseSpec.#ctor(System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the V1LeaseSpec class.
            </summary>
            <param name="acquireTime">
            acquireTime is a time when the current lease was acquired.
            </param>
            <param name="holderIdentity">
            holderIdentity contains the identity of the holder of a current lease.
            </param>
            <param name="leaseDurationSeconds">
            leaseDurationSeconds is a duration that candidates for a lease need to wait to
            force acquire it. This is measure against time of last observed renewTime.
            </param>
            <param name="leaseTransitions">
            leaseTransitions is the number of transitions of a lease between holders.
            </param>
            <param name="renewTime">
            renewTime is a time when the current holder of a lease has last updated the
            lease.
            </param>
        </member>
        <member name="P:k8s.Models.V1LeaseSpec.AcquireTime">
            <summary>
            acquireTime is a time when the current lease was acquired.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LeaseSpec.HolderIdentity">
            <summary>
            holderIdentity contains the identity of the holder of a current lease.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LeaseSpec.LeaseDurationSeconds">
            <summary>
            leaseDurationSeconds is a duration that candidates for a lease need to wait to
            force acquire it. This is measure against time of last observed renewTime.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LeaseSpec.LeaseTransitions">
            <summary>
            leaseTransitions is the number of transitions of a lease between holders.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LeaseSpec.RenewTime">
            <summary>
            renewTime is a time when the current holder of a lease has last updated the
            lease.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LeaseSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1AWSElasticBlockStoreVolumeSource">
            <summary>
            Represents a Persistent Disk resource in AWS.
            
            An AWS EBS disk must exist before mounting to a container. The disk must also be
            in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as
            read/write once. AWS EBS volumes support ownership management and SELinux
            relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AWSElasticBlockStoreVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1AWSElasticBlockStoreVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AWSElasticBlockStoreVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1AWSElasticBlockStoreVolumeSource class.
            </summary>
            <param name="volumeID">
            volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS
            volume). More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </param>
            <param name="fsType">
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </param>
            <param name="partition">
            partition is the partition in the volume that you want to mount. If omitted, the
            default is to mount by volume name. Examples: For volume /dev/sda1, you specify
            the partition as &quot;1&quot;. Similarly, the volume partition for /dev/sda is &quot;0&quot; (or
            you can leave the property empty).
            </param>
            <param name="readOnlyProperty">
            readOnly value true will force the readOnly setting in VolumeMounts. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </param>
        </member>
        <member name="P:k8s.Models.V1AWSElasticBlockStoreVolumeSource.FsType">
            <summary>
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </summary>
        </member>
        <member name="P:k8s.Models.V1AWSElasticBlockStoreVolumeSource.Partition">
            <summary>
            partition is the partition in the volume that you want to mount. If omitted, the
            default is to mount by volume name. Examples: For volume /dev/sda1, you specify
            the partition as &quot;1&quot;. Similarly, the volume partition for /dev/sda is &quot;0&quot; (or
            you can leave the property empty).
            </summary>
        </member>
        <member name="P:k8s.Models.V1AWSElasticBlockStoreVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly value true will force the readOnly setting in VolumeMounts. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </summary>
        </member>
        <member name="P:k8s.Models.V1AWSElasticBlockStoreVolumeSource.VolumeID">
            <summary>
            volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS
            volume). More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </summary>
        </member>
        <member name="M:k8s.Models.V1AWSElasticBlockStoreVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Affinity">
            <summary>
            Affinity is a group of affinity scheduling rules.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Affinity.#ctor">
            <summary>
            Initializes a new instance of the V1Affinity class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Affinity.#ctor(k8s.Models.V1NodeAffinity,k8s.Models.V1PodAffinity,k8s.Models.V1PodAntiAffinity)">
            <summary>
            Initializes a new instance of the V1Affinity class.
            </summary>
            <param name="nodeAffinity">
            Describes node affinity scheduling rules for the pod.
            </param>
            <param name="podAffinity">
            Describes pod affinity scheduling rules (e.g. co-locate this pod in the same
            node, zone, etc. as some other pod(s)).
            </param>
            <param name="podAntiAffinity">
            Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the
            same node, zone, etc. as some other pod(s)).
            </param>
        </member>
        <member name="P:k8s.Models.V1Affinity.NodeAffinity">
            <summary>
            Describes node affinity scheduling rules for the pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Affinity.PodAffinity">
            <summary>
            Describes pod affinity scheduling rules (e.g. co-locate this pod in the same
            node, zone, etc. as some other pod(s)).
            </summary>
        </member>
        <member name="P:k8s.Models.V1Affinity.PodAntiAffinity">
            <summary>
            Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the
            same node, zone, etc. as some other pod(s)).
            </summary>
        </member>
        <member name="M:k8s.Models.V1Affinity.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1AttachedVolume">
            <summary>
            AttachedVolume describes a volume attached to a node
            </summary>
        </member>
        <member name="M:k8s.Models.V1AttachedVolume.#ctor">
            <summary>
            Initializes a new instance of the V1AttachedVolume class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AttachedVolume.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1AttachedVolume class.
            </summary>
            <param name="devicePath">
            DevicePath represents the device path where the volume should be available
            </param>
            <param name="name">
            Name of the attached volume
            </param>
        </member>
        <member name="P:k8s.Models.V1AttachedVolume.DevicePath">
            <summary>
            DevicePath represents the device path where the volume should be available
            </summary>
        </member>
        <member name="P:k8s.Models.V1AttachedVolume.Name">
            <summary>
            Name of the attached volume
            </summary>
        </member>
        <member name="M:k8s.Models.V1AttachedVolume.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1AzureDiskVolumeSource">
            <summary>
            AzureDisk represents an Azure Data Disk mount on the host and bind mount to the
            pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureDiskVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1AzureDiskVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureDiskVolumeSource.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1AzureDiskVolumeSource class.
            </summary>
            <param name="diskName">
            diskName is the Name of the data disk in the blob storage
            </param>
            <param name="diskURI">
            diskURI is the URI of data disk in the blob storage
            </param>
            <param name="cachingMode">
            cachingMode is the Host Caching mode: None, Read Only, Read Write.
            </param>
            <param name="fsType">
            fsType is Filesystem type to mount. Must be a filesystem type supported by the
            host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </param>
            <param name="kind">
            kind expected values are Shared: multiple blob disks per storage account 
            Dedicated: single blob disk per storage account  Managed: azure managed data
            disk (only in managed availability set). defaults to shared
            </param>
            <param name="readOnlyProperty">
            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
        </member>
        <member name="P:k8s.Models.V1AzureDiskVolumeSource.CachingMode">
            <summary>
            cachingMode is the Host Caching mode: None, Read Only, Read Write.
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureDiskVolumeSource.DiskName">
            <summary>
            diskName is the Name of the data disk in the blob storage
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureDiskVolumeSource.DiskURI">
            <summary>
            diskURI is the URI of data disk in the blob storage
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureDiskVolumeSource.FsType">
            <summary>
            fsType is Filesystem type to mount. Must be a filesystem type supported by the
            host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureDiskVolumeSource.Kind">
            <summary>
            kind expected values are Shared: multiple blob disks per storage account 
            Dedicated: single blob disk per storage account  Managed: azure managed data
            disk (only in managed availability set). defaults to shared
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureDiskVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureDiskVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1AzureFilePersistentVolumeSource">
            <summary>
            AzureFile represents an Azure File Service mount on the host and bind mount to
            the pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureFilePersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1AzureFilePersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureFilePersistentVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the V1AzureFilePersistentVolumeSource class.
            </summary>
            <param name="secretName">
            secretName is the name of secret that contains Azure Storage Account Name and
            Key
            </param>
            <param name="shareName">
            shareName is the azure Share Name
            </param>
            <param name="readOnlyProperty">
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
            <param name="secretNamespace">
            secretNamespace is the namespace of the secret that contains Azure Storage
            Account Name and Key default is the same as the Pod
            </param>
        </member>
        <member name="P:k8s.Models.V1AzureFilePersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureFilePersistentVolumeSource.SecretName">
            <summary>
            secretName is the name of secret that contains Azure Storage Account Name and
            Key
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureFilePersistentVolumeSource.SecretNamespace">
            <summary>
            secretNamespace is the namespace of the secret that contains Azure Storage
            Account Name and Key default is the same as the Pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureFilePersistentVolumeSource.ShareName">
            <summary>
            shareName is the azure Share Name
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureFilePersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1AzureFileVolumeSource">
            <summary>
            AzureFile represents an Azure File Service mount on the host and bind mount to
            the pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureFileVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1AzureFileVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureFileVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1AzureFileVolumeSource class.
            </summary>
            <param name="secretName">
            secretName is the  name of secret that contains Azure Storage Account Name and
            Key
            </param>
            <param name="shareName">
            shareName is the azure share Name
            </param>
            <param name="readOnlyProperty">
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
        </member>
        <member name="P:k8s.Models.V1AzureFileVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureFileVolumeSource.SecretName">
            <summary>
            secretName is the  name of secret that contains Azure Storage Account Name and
            Key
            </summary>
        </member>
        <member name="P:k8s.Models.V1AzureFileVolumeSource.ShareName">
            <summary>
            shareName is the azure share Name
            </summary>
        </member>
        <member name="M:k8s.Models.V1AzureFileVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Binding">
            <summary>
            Binding ties one object to another; for example, a pod is bound to a node by a
            scheduler. Deprecated in 1.7, please use the bindings subresource of pods
            instead.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Binding.#ctor">
            <summary>
            Initializes a new instance of the V1Binding class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Binding.#ctor(k8s.Models.V1ObjectReference,System.String,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1Binding class.
            </summary>
            <param name="target">
            The target object that you want to bind to the standard object.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1Binding.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Binding.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Binding.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Binding.Target">
            <summary>
            The target object that you want to bind to the standard object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Binding.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSIPersistentVolumeSource">
            <summary>
            Represents storage that is managed by an external CSI volume driver (Beta
            feature)
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1CSIPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIPersistentVolumeSource.#ctor(System.String,System.String,k8s.Models.V1SecretReference,k8s.Models.V1SecretReference,System.String,k8s.Models.V1SecretReference,k8s.Models.V1SecretReference,k8s.Models.V1SecretReference,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the V1CSIPersistentVolumeSource class.
            </summary>
            <param name="driver">
            driver is the name of the driver to use for this volume. Required.
            </param>
            <param name="volumeHandle">
            volumeHandle is the unique volume name returned by the CSI volume plugin’s
            CreateVolume to refer to the volume on all subsequent calls. Required.
            </param>
            <param name="controllerExpandSecretRef">
            controllerExpandSecretRef is a reference to the secret object containing
            sensitive information to pass to the CSI driver to complete the CSI
            ControllerExpandVolume call. This field is optional, and may be empty if no
            secret is required. If the secret object contains more than one secret, all
            secrets are passed.
            </param>
            <param name="controllerPublishSecretRef">
            controllerPublishSecretRef is a reference to the secret object containing
            sensitive information to pass to the CSI driver to complete the CSI
            ControllerPublishVolume and ControllerUnpublishVolume calls. This field is
            optional, and may be empty if no secret is required. If the secret object
            contains more than one secret, all secrets are passed.
            </param>
            <param name="fsType">
            fsType to mount. Must be a filesystem type supported by the host operating
            system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;.
            </param>
            <param name="nodeExpandSecretRef">
            nodeExpandSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodeExpandVolume call.
            This is a beta field which is enabled default by CSINodeExpandSecret feature
            gate. This field is optional, may be omitted if no secret is required. If the
            secret object contains more than one secret, all secrets are passed.
            </param>
            <param name="nodePublishSecretRef">
            nodePublishSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodePublishVolume and
            NodeUnpublishVolume calls. This field is optional, and may be empty if no secret
            is required. If the secret object contains more than one secret, all secrets are
            passed.
            </param>
            <param name="nodeStageSecretRef">
            nodeStageSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodeStageVolume and
            NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be
            empty if no secret is required. If the secret object contains more than one
            secret, all secrets are passed.
            </param>
            <param name="readOnlyProperty">
            readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false
            (read/write).
            </param>
            <param name="volumeAttributes">
            volumeAttributes of the volume to publish.
            </param>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.ControllerExpandSecretRef">
            <summary>
            controllerExpandSecretRef is a reference to the secret object containing
            sensitive information to pass to the CSI driver to complete the CSI
            ControllerExpandVolume call. This field is optional, and may be empty if no
            secret is required. If the secret object contains more than one secret, all
            secrets are passed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.ControllerPublishSecretRef">
            <summary>
            controllerPublishSecretRef is a reference to the secret object containing
            sensitive information to pass to the CSI driver to complete the CSI
            ControllerPublishVolume and ControllerUnpublishVolume calls. This field is
            optional, and may be empty if no secret is required. If the secret object
            contains more than one secret, all secrets are passed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.Driver">
            <summary>
            driver is the name of the driver to use for this volume. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.FsType">
            <summary>
            fsType to mount. Must be a filesystem type supported by the host operating
            system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.NodeExpandSecretRef">
            <summary>
            nodeExpandSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodeExpandVolume call.
            This is a beta field which is enabled default by CSINodeExpandSecret feature
            gate. This field is optional, may be omitted if no secret is required. If the
            secret object contains more than one secret, all secrets are passed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.NodePublishSecretRef">
            <summary>
            nodePublishSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodePublishVolume and
            NodeUnpublishVolume calls. This field is optional, and may be empty if no secret
            is required. If the secret object contains more than one secret, all secrets are
            passed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.NodeStageSecretRef">
            <summary>
            nodeStageSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodeStageVolume and
            NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be
            empty if no secret is required. If the secret object contains more than one
            secret, all secrets are passed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false
            (read/write).
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.VolumeAttributes">
            <summary>
            volumeAttributes of the volume to publish.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIPersistentVolumeSource.VolumeHandle">
            <summary>
            volumeHandle is the unique volume name returned by the CSI volume plugin’s
            CreateVolume to refer to the volume on all subsequent calls. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSIVolumeSource">
            <summary>
            Represents a source location of a volume to mount, managed by an external CSI
            driver
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1CSIVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIVolumeSource.#ctor(System.String,System.String,k8s.Models.V1LocalObjectReference,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the V1CSIVolumeSource class.
            </summary>
            <param name="driver">
            driver is the name of the CSI driver that handles this volume. Consult with your
            admin for the correct name as registered in the cluster.
            </param>
            <param name="fsType">
            fsType to mount. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. If not provided, the empty value is
            passed to the associated CSI driver which will determine the default filesystem
            to apply.
            </param>
            <param name="nodePublishSecretRef">
            nodePublishSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodePublishVolume and
            NodeUnpublishVolume calls. This field is optional, and  may be empty if no
            secret is required. If the secret object contains more than one secret, all
            secret references are passed.
            </param>
            <param name="readOnlyProperty">
            readOnly specifies a read-only configuration for the volume. Defaults to false
            (read/write).
            </param>
            <param name="volumeAttributes">
            volumeAttributes stores driver-specific properties that are passed to the CSI
            driver. Consult your driver&apos;s documentation for supported values.
            </param>
        </member>
        <member name="P:k8s.Models.V1CSIVolumeSource.Driver">
            <summary>
            driver is the name of the CSI driver that handles this volume. Consult with your
            admin for the correct name as registered in the cluster.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIVolumeSource.FsType">
            <summary>
            fsType to mount. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. If not provided, the empty value is
            passed to the associated CSI driver which will determine the default filesystem
            to apply.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIVolumeSource.NodePublishSecretRef">
            <summary>
            nodePublishSecretRef is a reference to the secret object containing sensitive
            information to pass to the CSI driver to complete the CSI NodePublishVolume and
            NodeUnpublishVolume calls. This field is optional, and  may be empty if no
            secret is required. If the secret object contains more than one secret, all
            secret references are passed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly specifies a read-only configuration for the volume. Defaults to false
            (read/write).
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIVolumeSource.VolumeAttributes">
            <summary>
            volumeAttributes stores driver-specific properties that are passed to the CSI
            driver. Consult your driver&apos;s documentation for supported values.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Capabilities">
            <summary>
            Adds and removes POSIX capabilities from running containers.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Capabilities.#ctor">
            <summary>
            Initializes a new instance of the V1Capabilities class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Capabilities.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1Capabilities class.
            </summary>
            <param name="add">
            Added capabilities
            </param>
            <param name="drop">
            Removed capabilities
            </param>
        </member>
        <member name="P:k8s.Models.V1Capabilities.Add">
            <summary>
            Added capabilities
            </summary>
        </member>
        <member name="P:k8s.Models.V1Capabilities.Drop">
            <summary>
            Removed capabilities
            </summary>
        </member>
        <member name="M:k8s.Models.V1Capabilities.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CephFSPersistentVolumeSource">
            <summary>
            Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs
            volumes do not support ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CephFSPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1CephFSPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CephFSPersistentVolumeSource.#ctor(System.Collections.Generic.IList{System.String},System.String,System.Nullable{System.Boolean},System.String,k8s.Models.V1SecretReference,System.String)">
            <summary>
            Initializes a new instance of the V1CephFSPersistentVolumeSource class.
            </summary>
            <param name="monitors">
            monitors is Required: Monitors is a collection of Ceph monitors More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="path">
            path is Optional: Used as the mounted root, rather than the full Ceph tree,
            default is /
            </param>
            <param name="readOnlyProperty">
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="secretFile">
            secretFile is Optional: SecretFile is the path to key ring for User, default is
            /etc/ceph/user.secret More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="secretRef">
            secretRef is Optional: SecretRef is reference to the authentication secret for
            User, default is empty. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="user">
            user is Optional: User is the rados user name, default is admin More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
        </member>
        <member name="P:k8s.Models.V1CephFSPersistentVolumeSource.Monitors">
            <summary>
            monitors is Required: Monitors is a collection of Ceph monitors More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSPersistentVolumeSource.Path">
            <summary>
            path is Optional: Used as the mounted root, rather than the full Ceph tree,
            default is /
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSPersistentVolumeSource.SecretFile">
            <summary>
            secretFile is Optional: SecretFile is the path to key ring for User, default is
            /etc/ceph/user.secret More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSPersistentVolumeSource.SecretRef">
            <summary>
            secretRef is Optional: SecretRef is reference to the authentication secret for
            User, default is empty. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSPersistentVolumeSource.User">
            <summary>
            user is Optional: User is the rados user name, default is admin More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="M:k8s.Models.V1CephFSPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CephFSVolumeSource">
            <summary>
            Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs
            volumes do not support ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CephFSVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1CephFSVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CephFSVolumeSource.#ctor(System.Collections.Generic.IList{System.String},System.String,System.Nullable{System.Boolean},System.String,k8s.Models.V1LocalObjectReference,System.String)">
            <summary>
            Initializes a new instance of the V1CephFSVolumeSource class.
            </summary>
            <param name="monitors">
            monitors is Required: Monitors is a collection of Ceph monitors More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="path">
            path is Optional: Used as the mounted root, rather than the full Ceph tree,
            default is /
            </param>
            <param name="readOnlyProperty">
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="secretFile">
            secretFile is Optional: SecretFile is the path to key ring for User, default is
            /etc/ceph/user.secret More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="secretRef">
            secretRef is Optional: SecretRef is reference to the authentication secret for
            User, default is empty. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
            <param name="user">
            user is optional: User is the rados user name, default is admin More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </param>
        </member>
        <member name="P:k8s.Models.V1CephFSVolumeSource.Monitors">
            <summary>
            monitors is Required: Monitors is a collection of Ceph monitors More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSVolumeSource.Path">
            <summary>
            path is Optional: Used as the mounted root, rather than the full Ceph tree,
            default is /
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSVolumeSource.SecretFile">
            <summary>
            secretFile is Optional: SecretFile is the path to key ring for User, default is
            /etc/ceph/user.secret More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSVolumeSource.SecretRef">
            <summary>
            secretRef is Optional: SecretRef is reference to the authentication secret for
            User, default is empty. More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1CephFSVolumeSource.User">
            <summary>
            user is optional: User is the rados user name, default is admin More info:
            https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            </summary>
        </member>
        <member name="M:k8s.Models.V1CephFSVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CinderPersistentVolumeSource">
            <summary>
            Represents a cinder volume resource in Openstack. A Cinder volume must exist
            before mounting to a container. The volume must also be in the same region as
            the kubelet. Cinder volumes support ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CinderPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1CinderPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CinderPersistentVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Boolean},k8s.Models.V1SecretReference)">
            <summary>
            Initializes a new instance of the V1CinderPersistentVolumeSource class.
            </summary>
            <param name="volumeID">
            volumeID used to identify the volume in cinder. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="fsType">
            fsType Filesystem type to mount. Must be a filesystem type supported by the host
            operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="readOnlyProperty">
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="secretRef">
            secretRef is Optional: points to a secret object containing parameters used to
            connect to OpenStack.
            </param>
        </member>
        <member name="P:k8s.Models.V1CinderPersistentVolumeSource.FsType">
            <summary>
            fsType Filesystem type to mount. Must be a filesystem type supported by the host
            operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1CinderPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1CinderPersistentVolumeSource.SecretRef">
            <summary>
            secretRef is Optional: points to a secret object containing parameters used to
            connect to OpenStack.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CinderPersistentVolumeSource.VolumeID">
            <summary>
            volumeID used to identify the volume in cinder. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="M:k8s.Models.V1CinderPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CinderVolumeSource">
            <summary>
            Represents a cinder volume resource in Openstack. A Cinder volume must exist
            before mounting to a container. The volume must also be in the same region as
            the kubelet. Cinder volumes support ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CinderVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1CinderVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CinderVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Boolean},k8s.Models.V1LocalObjectReference)">
            <summary>
            Initializes a new instance of the V1CinderVolumeSource class.
            </summary>
            <param name="volumeID">
            volumeID used to identify the volume in cinder. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred
            to be &quot;ext4&quot; if unspecified. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="readOnlyProperty">
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="secretRef">
            secretRef is optional: points to a secret object containing parameters used to
            connect to OpenStack.
            </param>
        </member>
        <member name="P:k8s.Models.V1CinderVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred
            to be &quot;ext4&quot; if unspecified. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1CinderVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1CinderVolumeSource.SecretRef">
            <summary>
            secretRef is optional: points to a secret object containing parameters used to
            connect to OpenStack.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CinderVolumeSource.VolumeID">
            <summary>
            volumeID used to identify the volume in cinder. More info:
            https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="M:k8s.Models.V1CinderVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ClaimSource">
            <summary>
            ClaimSource describes a reference to a ResourceClaim.
            
            Exactly one of these fields should be set.  Consumers of this type must treat an
            empty object as if it has an unknown value.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClaimSource.#ctor">
            <summary>
            Initializes a new instance of the V1ClaimSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClaimSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ClaimSource class.
            </summary>
            <param name="resourceClaimName">
            ResourceClaimName is the name of a ResourceClaim object in the same namespace as
            this pod.
            </param>
            <param name="resourceClaimTemplateName">
            ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the
            same namespace as this pod.
            
            The template will be used to create a new ResourceClaim, which will be bound to
            this pod. When this pod is deleted, the ResourceClaim will also be deleted. The
            pod name and resource name, along with a generated component, will be used to
            form a unique name for the ResourceClaim, which will be recorded in
            pod.status.resourceClaimStatuses.
            
            This field is immutable and no changes will be made to the corresponding
            ResourceClaim by the control plane after creating the ResourceClaim.
            </param>
        </member>
        <member name="P:k8s.Models.V1ClaimSource.ResourceClaimName">
            <summary>
            ResourceClaimName is the name of a ResourceClaim object in the same namespace as
            this pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClaimSource.ResourceClaimTemplateName">
            <summary>
            ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the
            same namespace as this pod.
            
            The template will be used to create a new ResourceClaim, which will be bound to
            this pod. When this pod is deleted, the ResourceClaim will also be deleted. The
            pod name and resource name, along with a generated component, will be used to
            form a unique name for the ResourceClaim, which will be recorded in
            pod.status.resourceClaimStatuses.
            
            This field is immutable and no changes will be made to the corresponding
            ResourceClaim by the control plane after creating the ResourceClaim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClaimSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ClientIPConfig">
            <summary>
            ClientIPConfig represents the configurations of Client IP based session
            affinity.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClientIPConfig.#ctor">
            <summary>
            Initializes a new instance of the V1ClientIPConfig class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClientIPConfig.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1ClientIPConfig class.
            </summary>
            <param name="timeoutSeconds">
            timeoutSeconds specifies the seconds of ClientIP type session sticky time. The
            value must be &gt;0 &amp;&amp; &lt;=86400(for 1 day) if ServiceAffinity == &quot;ClientIP&quot;. Default
            value is 10800(for 3 hours).
            </param>
        </member>
        <member name="P:k8s.Models.V1ClientIPConfig.TimeoutSeconds">
            <summary>
            timeoutSeconds specifies the seconds of ClientIP type session sticky time. The
            value must be &gt;0 &amp;&amp; &lt;=86400(for 1 day) if ServiceAffinity == &quot;ClientIP&quot;. Default
            value is 10800(for 3 hours).
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClientIPConfig.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ComponentCondition">
            <summary>
            Information about the condition of a component.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentCondition.#ctor">
            <summary>
            Initializes a new instance of the V1ComponentCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentCondition.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ComponentCondition class.
            </summary>
            <param name="status">
            Status of the condition for a component. Valid values for &quot;Healthy&quot;: &quot;True&quot;,
            &quot;False&quot;, or &quot;Unknown&quot;.
            </param>
            <param name="type">
            Type of condition for a component. Valid value: &quot;Healthy&quot;
            </param>
            <param name="error">
            Condition error code for a component. For example, a health check error code.
            </param>
            <param name="message">
            Message about the condition for a component. For example, information about a
            health check.
            </param>
        </member>
        <member name="P:k8s.Models.V1ComponentCondition.Error">
            <summary>
            Condition error code for a component. For example, a health check error code.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentCondition.Message">
            <summary>
            Message about the condition for a component. For example, information about a
            health check.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentCondition.Status">
            <summary>
            Status of the condition for a component. Valid values for &quot;Healthy&quot;: &quot;True&quot;,
            &quot;False&quot;, or &quot;Unknown&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentCondition.Type">
            <summary>
            Type of condition for a component. Valid value: &quot;Healthy&quot;
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ComponentStatus">
            <summary>
            ComponentStatus (and ComponentStatusList) holds the cluster validation info.
            Deprecated: This API is deprecated in v1.19+
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentStatus.#ctor">
            <summary>
            Initializes a new instance of the V1ComponentStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentStatus.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1ComponentCondition},System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1ComponentStatus class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="conditions">
            List of component conditions observed
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1ComponentStatus.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentStatus.Conditions">
            <summary>
            List of component conditions observed
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentStatus.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentStatus.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ComponentStatusList">
            <summary>
            Status of all the conditions for the component as a list of ComponentStatus
            objects. Deprecated: This API is deprecated in v1.19+
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentStatusList.#ctor">
            <summary>
            Initializes a new instance of the V1ComponentStatusList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentStatusList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ComponentStatus},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ComponentStatusList class.
            </summary>
            <param name="items">
            List of ComponentStatus objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1ComponentStatusList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentStatusList.Items">
            <summary>
            List of ComponentStatus objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentStatusList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ComponentStatusList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1ComponentStatusList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ConfigMap">
            <summary>
            ConfigMap holds configuration data for pods to consume.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMap.#ctor">
            <summary>
            Initializes a new instance of the V1ConfigMap class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMap.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1ConfigMap class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="binaryData">
            BinaryData contains the binary data. Each key must consist of alphanumeric
            characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. BinaryData can contain byte sequences that are not
            in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones
            in the Data field, this is enforced during validation process. Using this field
            will require 1.10+ apiserver and kubelet.
            </param>
            <param name="data">
            Data contains the configuration data. Each key must consist of alphanumeric
            characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. Values with non-UTF-8 byte sequences must use the
            BinaryData field. The keys stored in Data must not overlap with the keys in the
            BinaryData field, this is enforced during validation process.
            </param>
            <param name="immutable">
            Immutable, if set to true, ensures that data stored in the ConfigMap cannot be
            updated (only object metadata can be modified). If not set to true, the field
            can be modified at any time. Defaulted to nil.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1ConfigMap.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMap.BinaryData">
            <summary>
            BinaryData contains the binary data. Each key must consist of alphanumeric
            characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. BinaryData can contain byte sequences that are not
            in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones
            in the Data field, this is enforced during validation process. Using this field
            will require 1.10+ apiserver and kubelet.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMap.Data">
            <summary>
            Data contains the configuration data. Each key must consist of alphanumeric
            characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. Values with non-UTF-8 byte sequences must use the
            BinaryData field. The keys stored in Data must not overlap with the keys in the
            BinaryData field, this is enforced during validation process.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMap.Immutable">
            <summary>
            Immutable, if set to true, ensures that data stored in the ConfigMap cannot be
            updated (only object metadata can be modified). If not set to true, the field
            can be modified at any time. Defaulted to nil.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMap.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMap.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMap.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ConfigMapEnvSource">
            <summary>
            ConfigMapEnvSource selects a ConfigMap to populate the environment variables
            with.
            
            The contents of the target ConfigMap&apos;s Data field will represent the key-value
            pairs as environment variables.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapEnvSource.#ctor">
            <summary>
            Initializes a new instance of the V1ConfigMapEnvSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapEnvSource.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1ConfigMapEnvSource class.
            </summary>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="optional">
            Specify whether the ConfigMap must be defined
            </param>
        </member>
        <member name="P:k8s.Models.V1ConfigMapEnvSource.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapEnvSource.Optional">
            <summary>
            Specify whether the ConfigMap must be defined
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapEnvSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ConfigMapKeySelector">
            <summary>
            Selects a key from a ConfigMap.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapKeySelector.#ctor">
            <summary>
            Initializes a new instance of the V1ConfigMapKeySelector class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapKeySelector.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1ConfigMapKeySelector class.
            </summary>
            <param name="key">
            The key to select.
            </param>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="optional">
            Specify whether the ConfigMap or its key must be defined
            </param>
        </member>
        <member name="P:k8s.Models.V1ConfigMapKeySelector.Key">
            <summary>
            The key to select.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapKeySelector.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapKeySelector.Optional">
            <summary>
            Specify whether the ConfigMap or its key must be defined
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapKeySelector.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ConfigMapList">
            <summary>
            ConfigMapList is a resource containing a list of ConfigMap objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapList.#ctor">
            <summary>
            Initializes a new instance of the V1ConfigMapList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ConfigMap},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ConfigMapList class.
            </summary>
            <param name="items">
            Items is the list of ConfigMaps.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1ConfigMapList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapList.Items">
            <summary>
            Items is the list of ConfigMaps.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapList.Metadata">
            <summary>
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ConfigMapNodeConfigSource">
            <summary>
            ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a
            config source for the Node. This API is deprecated since 1.22:
            https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapNodeConfigSource.#ctor">
            <summary>
            Initializes a new instance of the V1ConfigMapNodeConfigSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapNodeConfigSource.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ConfigMapNodeConfigSource class.
            </summary>
            <param name="kubeletConfigKey">
            KubeletConfigKey declares which key of the referenced ConfigMap corresponds to
            the KubeletConfiguration structure This field is required in all cases.
            </param>
            <param name="name">
            Name is the metadata.name of the referenced ConfigMap. This field is required in
            all cases.
            </param>
            <param name="namespaceProperty">
            Namespace is the metadata.namespace of the referenced ConfigMap. This field is
            required in all cases.
            </param>
            <param name="resourceVersion">
            ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap.
            This field is forbidden in Node.Spec, and required in Node.Status.
            </param>
            <param name="uid">
            UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in
            Node.Spec, and required in Node.Status.
            </param>
        </member>
        <member name="P:k8s.Models.V1ConfigMapNodeConfigSource.KubeletConfigKey">
            <summary>
            KubeletConfigKey declares which key of the referenced ConfigMap corresponds to
            the KubeletConfiguration structure This field is required in all cases.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapNodeConfigSource.Name">
            <summary>
            Name is the metadata.name of the referenced ConfigMap. This field is required in
            all cases.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapNodeConfigSource.NamespaceProperty">
            <summary>
            Namespace is the metadata.namespace of the referenced ConfigMap. This field is
            required in all cases.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapNodeConfigSource.ResourceVersion">
            <summary>
            ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap.
            This field is forbidden in Node.Spec, and required in Node.Status.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapNodeConfigSource.Uid">
            <summary>
            UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in
            Node.Spec, and required in Node.Status.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapNodeConfigSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ConfigMapProjection">
            <summary>
            Adapts a ConfigMap into a projected volume.
            
            The contents of the target ConfigMap&apos;s Data field will be presented in a
            projected volume as files using the keys in the Data field as the file names,
            unless the items element is populated with specific mappings of keys to paths.
            Note that this is identical to a configmap volume source without the default
            mode.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapProjection.#ctor">
            <summary>
            Initializes a new instance of the V1ConfigMapProjection class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapProjection.#ctor(System.Collections.Generic.IList{k8s.Models.V1KeyToPath},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1ConfigMapProjection class.
            </summary>
            <param name="items">
            items if unspecified, each key-value pair in the Data field of the referenced
            ConfigMap will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the ConfigMap, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </param>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="optional">
            optional specify whether the ConfigMap or its keys must be defined
            </param>
        </member>
        <member name="P:k8s.Models.V1ConfigMapProjection.Items">
            <summary>
            items if unspecified, each key-value pair in the Data field of the referenced
            ConfigMap will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the ConfigMap, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapProjection.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapProjection.Optional">
            <summary>
            optional specify whether the ConfigMap or its keys must be defined
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapProjection.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ConfigMapVolumeSource">
            <summary>
            Adapts a ConfigMap into a volume.
            
            The contents of the target ConfigMap&apos;s Data field will be presented in a volume
            as files using the keys in the Data field as the file names, unless the items
            element is populated with specific mappings of keys to paths. ConfigMap volumes
            support ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1ConfigMapVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapVolumeSource.#ctor(System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1KeyToPath},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1ConfigMapVolumeSource class.
            </summary>
            <param name="defaultMode">
            defaultMode is optional: mode bits used to set permissions on created files by
            default. Must be an octal value between 0000 and 0777 or a decimal value between
            0 and 511. YAML accepts both octal and decimal values, JSON requires decimal
            values for mode bits. Defaults to 0644. Directories within the path are not
            affected by this setting. This might be in conflict with other options that
            affect the file mode, like fsGroup, and the result can be other mode bits set.
            </param>
            <param name="items">
            items if unspecified, each key-value pair in the Data field of the referenced
            ConfigMap will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the ConfigMap, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </param>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="optional">
            optional specify whether the ConfigMap or its keys must be defined
            </param>
        </member>
        <member name="P:k8s.Models.V1ConfigMapVolumeSource.DefaultMode">
            <summary>
            defaultMode is optional: mode bits used to set permissions on created files by
            default. Must be an octal value between 0000 and 0777 or a decimal value between
            0 and 511. YAML accepts both octal and decimal values, JSON requires decimal
            values for mode bits. Defaults to 0644. Directories within the path are not
            affected by this setting. This might be in conflict with other options that
            affect the file mode, like fsGroup, and the result can be other mode bits set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapVolumeSource.Items">
            <summary>
            items if unspecified, each key-value pair in the Data field of the referenced
            ConfigMap will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the ConfigMap, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapVolumeSource.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1ConfigMapVolumeSource.Optional">
            <summary>
            optional specify whether the ConfigMap or its keys must be defined
            </summary>
        </member>
        <member name="M:k8s.Models.V1ConfigMapVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Container">
            <summary>
            A single application container that you want to run within a pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Container.#ctor">
            <summary>
            Initializes a new instance of the V1Container class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Container.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{k8s.Models.V1EnvVar},System.Collections.Generic.IList{k8s.Models.V1EnvFromSource},System.String,System.String,k8s.Models.V1Lifecycle,k8s.Models.V1Probe,System.Collections.Generic.IList{k8s.Models.V1ContainerPort},k8s.Models.V1Probe,System.Collections.Generic.IList{k8s.Models.V1ContainerResizePolicy},k8s.Models.V1ResourceRequirements,System.String,k8s.Models.V1SecurityContext,k8s.Models.V1Probe,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.V1VolumeDevice},System.Collections.Generic.IList{k8s.Models.V1VolumeMount},System.String)">
            <summary>
            Initializes a new instance of the V1Container class.
            </summary>
            <param name="name">
            Name of the container specified as a DNS_LABEL. Each container in a pod must
            have a unique name (DNS_LABEL). Cannot be updated.
            </param>
            <param name="args">
            Arguments to the entrypoint. The container image&apos;s CMD is used if this is not
            provided. Variable references $(VAR_NAME) are expanded using the container&apos;s
            environment. If a variable cannot be resolved, the reference in the input string
            will be unchanged. Double $$ are reduced to a single $, which allows for
            escaping the $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the string
            literal &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded, regardless of
            whether the variable exists or not. Cannot be updated. More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </param>
            <param name="command">
            Entrypoint array. Not executed within a shell. The container image&apos;s ENTRYPOINT
            is used if this is not provided. Variable references $(VAR_NAME) are expanded
            using the container&apos;s environment. If a variable cannot be resolved, the
            reference in the input string will be unchanged. Double $$ are reduced to a
            single $, which allows for escaping the $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot;
            will produce the string literal &quot;$(VAR_NAME)&quot;. Escaped references will never be
            expanded, regardless of whether the variable exists or not. Cannot be updated.
            More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </param>
            <param name="env">
            List of environment variables to set in the container. Cannot be updated.
            </param>
            <param name="envFrom">
            List of sources to populate environment variables in the container. The keys
            defined within a source must be a C_IDENTIFIER. All invalid keys will be
            reported as an event when the container is starting. When a key exists in
            multiple sources, the value associated with the last source will take
            precedence. Values defined by an Env with a duplicate key will take precedence.
            Cannot be updated.
            </param>
            <param name="image">
            Container image name. More info:
            https://kubernetes.io/docs/concepts/containers/images This field is optional to
            allow higher level config management to default or override container images in
            workload controllers like Deployments and StatefulSets.
            </param>
            <param name="imagePullPolicy">
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
            :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
            info: https://kubernetes.io/docs/concepts/containers/images#updating-images
            </param>
            <param name="lifecycle">
            Actions that the management system should take in response to container
            lifecycle events. Cannot be updated.
            </param>
            <param name="livenessProbe">
            Periodic probe of container liveness. Container will be restarted if the probe
            fails. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </param>
            <param name="ports">
            List of ports to expose from the container. Not specifying a port here DOES NOT
            prevent that port from being exposed. Any port which is listening on the default
            &quot;0.0.0.0&quot; address inside a container will be accessible from the network.
            Modifying this array with strategic merge patch may corrupt the data. For more
            information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot
            be updated.
            </param>
            <param name="readinessProbe">
            Periodic probe of container service readiness. Container will be removed from
            service endpoints if the probe fails. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </param>
            <param name="resizePolicy">
            Resources resize policy for the container.
            </param>
            <param name="resources">
            Compute Resources required by this container. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </param>
            <param name="restartPolicy">
            RestartPolicy defines the restart behavior of individual containers in a pod.
            This field may only be set for init containers, and the only allowed value is
            &quot;Always&quot;. For non-init containers or when this field is not specified, the
            restart behavior is defined by the Pod&apos;s restart policy and the container type.
            Setting the RestartPolicy as &quot;Always&quot; for the init container will have the
            following effect: this init container will be continually restarted on exit
            until all regular containers have terminated. Once all regular containers have
            completed, all init containers with restartPolicy &quot;Always&quot; will be shut down.
            This lifecycle differs from normal init containers and is often referred to as a
            &quot;sidecar&quot; container. Although this init container still starts in the init
            container sequence, it does not wait for the container to complete before
            proceeding to the next init container. Instead, the next init container starts
            immediately after this init container is started, or after any startupProbe has
            successfully completed.
            </param>
            <param name="securityContext">
            SecurityContext defines the security options the container should be run with.
            If set, the fields of SecurityContext override the equivalent fields of
            PodSecurityContext. More info:
            https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
            </param>
            <param name="startupProbe">
            StartupProbe indicates that the Pod has successfully initialized. If specified,
            no other probes are executed until this completes successfully. If this probe
            fails, the Pod will be restarted, just as if the livenessProbe failed. This can
            be used to provide different probe parameters at the beginning of a Pod&apos;s
            lifecycle, when it might take a long time to load data or warm a cache, than
            during steady-state operation. This cannot be updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </param>
            <param name="stdin">
            Whether this container should allocate a buffer for stdin in the container
            runtime. If this is not set, reads from stdin in the container will always
            result in EOF. Default is false.
            </param>
            <param name="stdinOnce">
            Whether the container runtime should close the stdin channel after it has been
            opened by a single attach. When stdin is true the stdin stream will remain open
            across multiple attach sessions. If stdinOnce is set to true, stdin is opened on
            container start, is empty until the first client attaches to stdin, and then
            remains open and accepts data until the client disconnects, at which time stdin
            is closed and remains closed until the container is restarted. If this flag is
            false, a container processes that reads from stdin will never receive an EOF.
            Default is false
            </param>
            <param name="terminationMessagePath">
            Optional: Path at which the file to which the container&apos;s termination message
            will be written is mounted into the container&apos;s filesystem. Message written is
            intended to be brief final status, such as an assertion failure message. Will be
            truncated by the node if greater than 4096 bytes. The total message length
            across all containers will be limited to 12kb. Defaults to /dev/termination-log.
            Cannot be updated.
            </param>
            <param name="terminationMessagePolicy">
            Indicate how the termination message should be populated. File will use the
            contents of terminationMessagePath to populate the container status message on
            both success and failure. FallbackToLogsOnError will use the last chunk of
            container log output if the termination message file is empty and the container
            exited with an error. The log output is limited to 2048 bytes or 80 lines,
            whichever is smaller. Defaults to File. Cannot be updated.
            </param>
            <param name="tty">
            Whether this container should allocate a TTY for itself, also requires &apos;stdin&apos;
            to be true. Default is false.
            </param>
            <param name="volumeDevices">
            volumeDevices is the list of block devices to be used by the container.
            </param>
            <param name="volumeMounts">
            Pod volumes to mount into the container&apos;s filesystem. Cannot be updated.
            </param>
            <param name="workingDir">
            Container&apos;s working directory. If not specified, the container runtime&apos;s default
            will be used, which might be configured in the container image. Cannot be
            updated.
            </param>
        </member>
        <member name="P:k8s.Models.V1Container.Args">
            <summary>
            Arguments to the entrypoint. The container image&apos;s CMD is used if this is not
            provided. Variable references $(VAR_NAME) are expanded using the container&apos;s
            environment. If a variable cannot be resolved, the reference in the input string
            will be unchanged. Double $$ are reduced to a single $, which allows for
            escaping the $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the string
            literal &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded, regardless of
            whether the variable exists or not. Cannot be updated. More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Command">
            <summary>
            Entrypoint array. Not executed within a shell. The container image&apos;s ENTRYPOINT
            is used if this is not provided. Variable references $(VAR_NAME) are expanded
            using the container&apos;s environment. If a variable cannot be resolved, the
            reference in the input string will be unchanged. Double $$ are reduced to a
            single $, which allows for escaping the $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot;
            will produce the string literal &quot;$(VAR_NAME)&quot;. Escaped references will never be
            expanded, regardless of whether the variable exists or not. Cannot be updated.
            More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Env">
            <summary>
            List of environment variables to set in the container. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.EnvFrom">
            <summary>
            List of sources to populate environment variables in the container. The keys
            defined within a source must be a C_IDENTIFIER. All invalid keys will be
            reported as an event when the container is starting. When a key exists in
            multiple sources, the value associated with the last source will take
            precedence. Values defined by an Env with a duplicate key will take precedence.
            Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Image">
            <summary>
            Container image name. More info:
            https://kubernetes.io/docs/concepts/containers/images This field is optional to
            allow higher level config management to default or override container images in
            workload controllers like Deployments and StatefulSets.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.ImagePullPolicy">
            <summary>
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
            :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
            info: https://kubernetes.io/docs/concepts/containers/images#updating-images
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Lifecycle">
            <summary>
            Actions that the management system should take in response to container
            lifecycle events. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.LivenessProbe">
            <summary>
            Periodic probe of container liveness. Container will be restarted if the probe
            fails. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Name">
            <summary>
            Name of the container specified as a DNS_LABEL. Each container in a pod must
            have a unique name (DNS_LABEL). Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Ports">
            <summary>
            List of ports to expose from the container. Not specifying a port here DOES NOT
            prevent that port from being exposed. Any port which is listening on the default
            &quot;0.0.0.0&quot; address inside a container will be accessible from the network.
            Modifying this array with strategic merge patch may corrupt the data. For more
            information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot
            be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.ReadinessProbe">
            <summary>
            Periodic probe of container service readiness. Container will be removed from
            service endpoints if the probe fails. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.ResizePolicy">
            <summary>
            Resources resize policy for the container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Resources">
            <summary>
            Compute Resources required by this container. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.RestartPolicy">
            <summary>
            RestartPolicy defines the restart behavior of individual containers in a pod.
            This field may only be set for init containers, and the only allowed value is
            &quot;Always&quot;. For non-init containers or when this field is not specified, the
            restart behavior is defined by the Pod&apos;s restart policy and the container type.
            Setting the RestartPolicy as &quot;Always&quot; for the init container will have the
            following effect: this init container will be continually restarted on exit
            until all regular containers have terminated. Once all regular containers have
            completed, all init containers with restartPolicy &quot;Always&quot; will be shut down.
            This lifecycle differs from normal init containers and is often referred to as a
            &quot;sidecar&quot; container. Although this init container still starts in the init
            container sequence, it does not wait for the container to complete before
            proceeding to the next init container. Instead, the next init container starts
            immediately after this init container is started, or after any startupProbe has
            successfully completed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.SecurityContext">
            <summary>
            SecurityContext defines the security options the container should be run with.
            If set, the fields of SecurityContext override the equivalent fields of
            PodSecurityContext. More info:
            https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.StartupProbe">
            <summary>
            StartupProbe indicates that the Pod has successfully initialized. If specified,
            no other probes are executed until this completes successfully. If this probe
            fails, the Pod will be restarted, just as if the livenessProbe failed. This can
            be used to provide different probe parameters at the beginning of a Pod&apos;s
            lifecycle, when it might take a long time to load data or warm a cache, than
            during steady-state operation. This cannot be updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Stdin">
            <summary>
            Whether this container should allocate a buffer for stdin in the container
            runtime. If this is not set, reads from stdin in the container will always
            result in EOF. Default is false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.StdinOnce">
            <summary>
            Whether the container runtime should close the stdin channel after it has been
            opened by a single attach. When stdin is true the stdin stream will remain open
            across multiple attach sessions. If stdinOnce is set to true, stdin is opened on
            container start, is empty until the first client attaches to stdin, and then
            remains open and accepts data until the client disconnects, at which time stdin
            is closed and remains closed until the container is restarted. If this flag is
            false, a container processes that reads from stdin will never receive an EOF.
            Default is false
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.TerminationMessagePath">
            <summary>
            Optional: Path at which the file to which the container&apos;s termination message
            will be written is mounted into the container&apos;s filesystem. Message written is
            intended to be brief final status, such as an assertion failure message. Will be
            truncated by the node if greater than 4096 bytes. The total message length
            across all containers will be limited to 12kb. Defaults to /dev/termination-log.
            Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.TerminationMessagePolicy">
            <summary>
            Indicate how the termination message should be populated. File will use the
            contents of terminationMessagePath to populate the container status message on
            both success and failure. FallbackToLogsOnError will use the last chunk of
            container log output if the termination message file is empty and the container
            exited with an error. The log output is limited to 2048 bytes or 80 lines,
            whichever is smaller. Defaults to File. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.Tty">
            <summary>
            Whether this container should allocate a TTY for itself, also requires &apos;stdin&apos;
            to be true. Default is false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.VolumeDevices">
            <summary>
            volumeDevices is the list of block devices to be used by the container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.VolumeMounts">
            <summary>
            Pod volumes to mount into the container&apos;s filesystem. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Container.WorkingDir">
            <summary>
            Container&apos;s working directory. If not specified, the container runtime&apos;s default
            will be used, which might be configured in the container image. Cannot be
            updated.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Container.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerImage">
            <summary>
            Describe a container image
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerImage.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerImage class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerImage.#ctor(System.Collections.Generic.IList{System.String},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V1ContainerImage class.
            </summary>
            <param name="names">
            Names by which this image is known. e.g. [&quot;kubernetes.example/hyperkube:v1.0.7&quot;,
            &quot;cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7&quot;]
            </param>
            <param name="sizeBytes">
            The size of the image in bytes.
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerImage.Names">
            <summary>
            Names by which this image is known. e.g. [&quot;kubernetes.example/hyperkube:v1.0.7&quot;,
            &quot;cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7&quot;]
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerImage.SizeBytes">
            <summary>
            The size of the image in bytes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerImage.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerPort">
            <summary>
            ContainerPort represents a network port in a single container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerPort.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerPort class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerPort.#ctor(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ContainerPort class.
            </summary>
            <param name="containerPort">
            Number of port to expose on the pod&apos;s IP address. This must be a valid port
            number, 0 &lt; x &lt; 65536.
            </param>
            <param name="hostIP">
            What host IP to bind the external port to.
            </param>
            <param name="hostPort">
            Number of port to expose on the host. If specified, this must be a valid port
            number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match
            ContainerPort. Most containers do not need this.
            </param>
            <param name="name">
            If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
            named port in a pod must have a unique name. Name for the port that can be
            referred to by services.
            </param>
            <param name="protocol">
            Protocol for port. Must be UDP, TCP, or SCTP. Defaults to &quot;TCP&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerPort.ContainerPort">
            <summary>
            Number of port to expose on the pod&apos;s IP address. This must be a valid port
            number, 0 &lt; x &lt; 65536.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerPort.HostIP">
            <summary>
            What host IP to bind the external port to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerPort.HostPort">
            <summary>
            Number of port to expose on the host. If specified, this must be a valid port
            number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match
            ContainerPort. Most containers do not need this.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerPort.Name">
            <summary>
            If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
            named port in a pod must have a unique name. Name for the port that can be
            referred to by services.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerPort.Protocol">
            <summary>
            Protocol for port. Must be UDP, TCP, or SCTP. Defaults to &quot;TCP&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerPort.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerResizePolicy">
            <summary>
            ContainerResizePolicy represents resource resize policy for the container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerResizePolicy.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerResizePolicy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerResizePolicy.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ContainerResizePolicy class.
            </summary>
            <param name="resourceName">
            Name of the resource to which this resource resize policy applies. Supported
            values: cpu, memory.
            </param>
            <param name="restartPolicy">
            Restart policy to apply when specified resource is resized. If not specified, it
            defaults to NotRequired.
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerResizePolicy.ResourceName">
            <summary>
            Name of the resource to which this resource resize policy applies. Supported
            values: cpu, memory.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerResizePolicy.RestartPolicy">
            <summary>
            Restart policy to apply when specified resource is resized. If not specified, it
            defaults to NotRequired.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerResizePolicy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerState">
            <summary>
            ContainerState holds a possible state of container. Only one of its members may
            be specified. If none of them is specified, the default one is
            ContainerStateWaiting.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerState.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerState class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerState.#ctor(k8s.Models.V1ContainerStateRunning,k8s.Models.V1ContainerStateTerminated,k8s.Models.V1ContainerStateWaiting)">
            <summary>
            Initializes a new instance of the V1ContainerState class.
            </summary>
            <param name="running">
            Details about a running container
            </param>
            <param name="terminated">
            Details about a terminated container
            </param>
            <param name="waiting">
            Details about a waiting container
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerState.Running">
            <summary>
            Details about a running container
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerState.Terminated">
            <summary>
            Details about a terminated container
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerState.Waiting">
            <summary>
            Details about a waiting container
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerState.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerStateRunning">
            <summary>
            ContainerStateRunning is a running state of a container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateRunning.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerStateRunning class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateRunning.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the V1ContainerStateRunning class.
            </summary>
            <param name="startedAt">
            Time at which the container was last (re-)started
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerStateRunning.StartedAt">
            <summary>
            Time at which the container was last (re-)started
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateRunning.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerStateTerminated">
            <summary>
            ContainerStateTerminated is a terminated state of a container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateTerminated.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerStateTerminated class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateTerminated.#ctor(System.Int32,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the V1ContainerStateTerminated class.
            </summary>
            <param name="exitCode">
            Exit status from the last termination of the container
            </param>
            <param name="containerID">
            Container&apos;s ID in the format &apos;&lt;type&gt;://&lt;container_id&gt;&apos;
            </param>
            <param name="finishedAt">
            Time at which the container last terminated
            </param>
            <param name="message">
            Message regarding the last termination of the container
            </param>
            <param name="reason">
            (brief) reason from the last termination of the container
            </param>
            <param name="signal">
            Signal from the last termination of the container
            </param>
            <param name="startedAt">
            Time at which previous execution of the container started
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerStateTerminated.ContainerID">
            <summary>
            Container&apos;s ID in the format &apos;&lt;type&gt;://&lt;container_id&gt;&apos;
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStateTerminated.ExitCode">
            <summary>
            Exit status from the last termination of the container
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStateTerminated.FinishedAt">
            <summary>
            Time at which the container last terminated
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStateTerminated.Message">
            <summary>
            Message regarding the last termination of the container
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStateTerminated.Reason">
            <summary>
            (brief) reason from the last termination of the container
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStateTerminated.Signal">
            <summary>
            Signal from the last termination of the container
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStateTerminated.StartedAt">
            <summary>
            Time at which previous execution of the container started
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateTerminated.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerStateWaiting">
            <summary>
            ContainerStateWaiting is a waiting state of a container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateWaiting.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerStateWaiting class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateWaiting.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ContainerStateWaiting class.
            </summary>
            <param name="message">
            Message regarding why the container is not yet running.
            </param>
            <param name="reason">
            (brief) reason the container is not yet running.
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerStateWaiting.Message">
            <summary>
            Message regarding why the container is not yet running.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStateWaiting.Reason">
            <summary>
            (brief) reason the container is not yet running.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStateWaiting.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ContainerStatus">
            <summary>
            ContainerStatus contains details for the current status of this container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStatus.#ctor">
            <summary>
            Initializes a new instance of the V1ContainerStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStatus.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32,System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.String,k8s.Models.V1ContainerState,k8s.Models.V1ResourceRequirements,System.Nullable{System.Boolean},k8s.Models.V1ContainerState)">
            <summary>
            Initializes a new instance of the V1ContainerStatus class.
            </summary>
            <param name="image">
            Image is the name of container image that the container is running. The
            container image may not match the image used in the PodSpec, as it may have been
            resolved by the runtime. More info:
            https://kubernetes.io/docs/concepts/containers/images.
            </param>
            <param name="imageID">
            ImageID is the image ID of the container&apos;s image. The image ID may not match the
            image ID of the image used in the PodSpec, as it may have been resolved by the
            runtime.
            </param>
            <param name="name">
            Name is a DNS_LABEL representing the unique name of the container. Each
            container in a pod must have a unique name across all container types. Cannot be
            updated.
            </param>
            <param name="ready">
            Ready specifies whether the container is currently passing its readiness check.
            The value will change as readiness probes keep executing. If no readiness probes
            are specified, this field defaults to true once the container is fully started
            (see Started field).
            
            The value is typically used to determine whether a container is ready to accept
            traffic.
            </param>
            <param name="restartCount">
            RestartCount holds the number of times the container has been restarted. Kubelet
            makes an effort to always increment the value, but there are cases when the
            state may be lost due to node restarts and then the value may be reset to 0. The
            value is never negative.
            </param>
            <param name="allocatedResources">
            AllocatedResources represents the compute resources allocated for this container
            by the node. Kubelet sets this value to Container.Resources.Requests upon
            successful pod admission and after successfully admitting desired pod resize.
            </param>
            <param name="containerID">
            ContainerID is the ID of the container in the format &apos;&lt;type&gt;://&lt;container_id&gt;&apos;.
            Where type is a container runtime identifier, returned from Version call of CRI
            API (for example &quot;containerd&quot;).
            </param>
            <param name="lastState">
            LastTerminationState holds the last termination state of the container to help
            debug container crashes and restarts. This field is not populated if the
            container is still running and RestartCount is 0.
            </param>
            <param name="resources">
            Resources represents the compute resource requests and limits that have been
            successfully enacted on the running container after it has been started or has
            been successfully resized.
            </param>
            <param name="started">
            Started indicates whether the container has finished its postStart lifecycle
            hook and passed its startup probe. Initialized as false, becomes true after
            startupProbe is considered successful. Resets to false when the container is
            restarted, or if kubelet loses state temporarily. In both cases, startup probes
            will run again. Is always true when no startupProbe is defined and container is
            running and has passed the postStart lifecycle hook. The null value must be
            treated the same as false.
            </param>
            <param name="state">
            State holds details about the container&apos;s current condition.
            </param>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.AllocatedResources">
            <summary>
            AllocatedResources represents the compute resources allocated for this container
            by the node. Kubelet sets this value to Container.Resources.Requests upon
            successful pod admission and after successfully admitting desired pod resize.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.ContainerID">
            <summary>
            ContainerID is the ID of the container in the format &apos;&lt;type&gt;://&lt;container_id&gt;&apos;.
            Where type is a container runtime identifier, returned from Version call of CRI
            API (for example &quot;containerd&quot;).
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.Image">
            <summary>
            Image is the name of container image that the container is running. The
            container image may not match the image used in the PodSpec, as it may have been
            resolved by the runtime. More info:
            https://kubernetes.io/docs/concepts/containers/images.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.ImageID">
            <summary>
            ImageID is the image ID of the container&apos;s image. The image ID may not match the
            image ID of the image used in the PodSpec, as it may have been resolved by the
            runtime.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.LastState">
            <summary>
            LastTerminationState holds the last termination state of the container to help
            debug container crashes and restarts. This field is not populated if the
            container is still running and RestartCount is 0.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.Name">
            <summary>
            Name is a DNS_LABEL representing the unique name of the container. Each
            container in a pod must have a unique name across all container types. Cannot be
            updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.Ready">
            <summary>
            Ready specifies whether the container is currently passing its readiness check.
            The value will change as readiness probes keep executing. If no readiness probes
            are specified, this field defaults to true once the container is fully started
            (see Started field).
            
            The value is typically used to determine whether a container is ready to accept
            traffic.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.Resources">
            <summary>
            Resources represents the compute resource requests and limits that have been
            successfully enacted on the running container after it has been started or has
            been successfully resized.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.RestartCount">
            <summary>
            RestartCount holds the number of times the container has been restarted. Kubelet
            makes an effort to always increment the value, but there are cases when the
            state may be lost due to node restarts and then the value may be reset to 0. The
            value is never negative.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.Started">
            <summary>
            Started indicates whether the container has finished its postStart lifecycle
            hook and passed its startup probe. Initialized as false, becomes true after
            startupProbe is considered successful. Resets to false when the container is
            restarted, or if kubelet loses state temporarily. In both cases, startup probes
            will run again. Is always true when no startupProbe is defined and container is
            running and has passed the postStart lifecycle hook. The null value must be
            treated the same as false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ContainerStatus.State">
            <summary>
            State holds details about the container&apos;s current condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ContainerStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DaemonEndpoint">
            <summary>
            DaemonEndpoint contains information about a single Daemon endpoint.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonEndpoint.#ctor">
            <summary>
            Initializes a new instance of the V1DaemonEndpoint class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonEndpoint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the V1DaemonEndpoint class.
            </summary>
            <param name="port">
            Port number of the given endpoint.
            </param>
        </member>
        <member name="P:k8s.Models.V1DaemonEndpoint.Port">
            <summary>
            Port number of the given endpoint.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DaemonEndpoint.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DownwardAPIProjection">
            <summary>
            Represents downward API info for projecting into a projected volume. Note that
            this is identical to a downwardAPI volume source without the default mode.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIProjection.#ctor">
            <summary>
            Initializes a new instance of the V1DownwardAPIProjection class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIProjection.#ctor(System.Collections.Generic.IList{k8s.Models.V1DownwardAPIVolumeFile})">
            <summary>
            Initializes a new instance of the V1DownwardAPIProjection class.
            </summary>
            <param name="items">
            Items is a list of DownwardAPIVolume file
            </param>
        </member>
        <member name="P:k8s.Models.V1DownwardAPIProjection.Items">
            <summary>
            Items is a list of DownwardAPIVolume file
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIProjection.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DownwardAPIVolumeFile">
            <summary>
            DownwardAPIVolumeFile represents information to create the file containing the
            pod field
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIVolumeFile.#ctor">
            <summary>
            Initializes a new instance of the V1DownwardAPIVolumeFile class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIVolumeFile.#ctor(System.String,k8s.Models.V1ObjectFieldSelector,System.Nullable{System.Int32},k8s.Models.V1ResourceFieldSelector)">
            <summary>
            Initializes a new instance of the V1DownwardAPIVolumeFile class.
            </summary>
            <param name="path">
            Required: Path is  the relative path name of the file to be created. Must not be
            absolute or contain the &apos;..&apos; path. Must be utf-8 encoded. The first item of the
            relative path must not start with &apos;..&apos;
            </param>
            <param name="fieldRef">
            Required: Selects a field of the pod: only annotations, labels, name and
            namespace are supported.
            </param>
            <param name="mode">
            Optional: mode bits used to set permissions on this file, must be an octal value
            between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both
            octal and decimal values, JSON requires decimal values for mode bits. If not
            specified, the volume defaultMode will be used. This might be in conflict with
            other options that affect the file mode, like fsGroup, and the result can be
            other mode bits set.
            </param>
            <param name="resourceFieldRef">
            Selects a resource of the container: only resources limits and requests
            (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently
            supported.
            </param>
        </member>
        <member name="P:k8s.Models.V1DownwardAPIVolumeFile.FieldRef">
            <summary>
            Required: Selects a field of the pod: only annotations, labels, name and
            namespace are supported.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DownwardAPIVolumeFile.Mode">
            <summary>
            Optional: mode bits used to set permissions on this file, must be an octal value
            between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both
            octal and decimal values, JSON requires decimal values for mode bits. If not
            specified, the volume defaultMode will be used. This might be in conflict with
            other options that affect the file mode, like fsGroup, and the result can be
            other mode bits set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DownwardAPIVolumeFile.Path">
            <summary>
            Required: Path is  the relative path name of the file to be created. Must not be
            absolute or contain the &apos;..&apos; path. Must be utf-8 encoded. The first item of the
            relative path must not start with &apos;..&apos;
            </summary>
        </member>
        <member name="P:k8s.Models.V1DownwardAPIVolumeFile.ResourceFieldRef">
            <summary>
            Selects a resource of the container: only resources limits and requests
            (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently
            supported.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIVolumeFile.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DownwardAPIVolumeSource">
            <summary>
            DownwardAPIVolumeSource represents a volume containing downward API info.
            Downward API volumes support ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1DownwardAPIVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIVolumeSource.#ctor(System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1DownwardAPIVolumeFile})">
            <summary>
            Initializes a new instance of the V1DownwardAPIVolumeSource class.
            </summary>
            <param name="defaultMode">
            Optional: mode bits to use on created files by default. Must be a Optional: mode
            bits used to set permissions on created files by default. Must be an octal value
            between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both
            octal and decimal values, JSON requires decimal values for mode bits. Defaults
            to 0644. Directories within the path are not affected by this setting. This
            might be in conflict with other options that affect the file mode, like fsGroup,
            and the result can be other mode bits set.
            </param>
            <param name="items">
            Items is a list of downward API volume file
            </param>
        </member>
        <member name="P:k8s.Models.V1DownwardAPIVolumeSource.DefaultMode">
            <summary>
            Optional: mode bits to use on created files by default. Must be a Optional: mode
            bits used to set permissions on created files by default. Must be an octal value
            between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both
            octal and decimal values, JSON requires decimal values for mode bits. Defaults
            to 0644. Directories within the path are not affected by this setting. This
            might be in conflict with other options that affect the file mode, like fsGroup,
            and the result can be other mode bits set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DownwardAPIVolumeSource.Items">
            <summary>
            Items is a list of downward API volume file
            </summary>
        </member>
        <member name="M:k8s.Models.V1DownwardAPIVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EmptyDirVolumeSource">
            <summary>
            Represents an empty directory for a pod. Empty directory volumes support
            ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EmptyDirVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1EmptyDirVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EmptyDirVolumeSource.#ctor(System.String,k8s.Models.ResourceQuantity)">
            <summary>
            Initializes a new instance of the V1EmptyDirVolumeSource class.
            </summary>
            <param name="medium">
            medium represents what type of storage medium should back this directory. The
            default is &quot;&quot; which means to use the node&apos;s default medium. Must be an empty
            string (default) or Memory. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            </param>
            <param name="sizeLimit">
            sizeLimit is the total amount of local storage required for this EmptyDir
            volume. The size limit is also applicable for memory medium. The maximum usage
            on memory medium EmptyDir would be the minimum value between the SizeLimit
            specified here and the sum of memory limits of all containers in a pod. The
            default is nil which means that the limit is undefined. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            </param>
        </member>
        <member name="P:k8s.Models.V1EmptyDirVolumeSource.Medium">
            <summary>
            medium represents what type of storage medium should back this directory. The
            default is &quot;&quot; which means to use the node&apos;s default medium. Must be an empty
            string (default) or Memory. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            </summary>
        </member>
        <member name="P:k8s.Models.V1EmptyDirVolumeSource.SizeLimit">
            <summary>
            sizeLimit is the total amount of local storage required for this EmptyDir
            volume. The size limit is also applicable for memory medium. The maximum usage
            on memory medium EmptyDir would be the minimum value between the SizeLimit
            specified here and the sum of memory limits of all containers in a pod. The
            default is nil which means that the limit is undefined. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            </summary>
        </member>
        <member name="M:k8s.Models.V1EmptyDirVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EndpointAddress">
            <summary>
            EndpointAddress is a tuple that describes single IP address.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointAddress.#ctor">
            <summary>
            Initializes a new instance of the V1EndpointAddress class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointAddress.#ctor(System.String,System.String,System.String,k8s.Models.V1ObjectReference)">
            <summary>
            Initializes a new instance of the V1EndpointAddress class.
            </summary>
            <param name="ip">
            The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local
            (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or
            ff02::/16).
            </param>
            <param name="hostname">
            The Hostname of this endpoint
            </param>
            <param name="nodeName">
            Optional: Node hosting this endpoint. This can be used to determine endpoints
            local to a node.
            </param>
            <param name="targetRef">
            Reference to object providing the endpoint.
            </param>
        </member>
        <member name="P:k8s.Models.V1EndpointAddress.Hostname">
            <summary>
            The Hostname of this endpoint
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointAddress.Ip">
            <summary>
            The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local
            (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or
            ff02::/16).
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointAddress.NodeName">
            <summary>
            Optional: Node hosting this endpoint. This can be used to determine endpoints
            local to a node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointAddress.TargetRef">
            <summary>
            Reference to object providing the endpoint.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointAddress.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Corev1EndpointPort">
            <summary>
            EndpointPort is a tuple that describes a single port.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EndpointPort.#ctor">
            <summary>
            Initializes a new instance of the Corev1EndpointPort class.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EndpointPort.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Corev1EndpointPort class.
            </summary>
            <param name="port">
            The port number of the endpoint.
            </param>
            <param name="appProtocol">
            The application protocol for this port. This is used as a hint for
            implementations to offer richer behavior for protocols that they understand.
            This field follows standard Kubernetes label syntax. Valid values are either:
            
            * Un-prefixed protocol names - reserved for IANA standard service names (as per
            RFC-6335 and https://www.iana.org/assignments/service-names).
            
            * Kubernetes-defined prefixed names:
            * &apos;kubernetes.io/h2c&apos; - HTTP/2 over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc7540
            * &apos;kubernetes.io/ws&apos;  - WebSocket over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc6455
            * &apos;kubernetes.io/wss&apos; - WebSocket over TLS as described in
            https://www.rfc-editor.org/rfc/rfc6455
            
            * Other protocols should use implementation-defined prefixed names such as
            mycompany.com/my-custom-protocol.
            </param>
            <param name="name">
            The name of this port.  This must match the &apos;name&apos; field in the corresponding
            ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
            </param>
            <param name="protocol">
            The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
            </param>
        </member>
        <member name="P:k8s.Models.Corev1EndpointPort.AppProtocol">
            <summary>
            The application protocol for this port. This is used as a hint for
            implementations to offer richer behavior for protocols that they understand.
            This field follows standard Kubernetes label syntax. Valid values are either:
            
            * Un-prefixed protocol names - reserved for IANA standard service names (as per
            RFC-6335 and https://www.iana.org/assignments/service-names).
            
            * Kubernetes-defined prefixed names:
            * &apos;kubernetes.io/h2c&apos; - HTTP/2 over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc7540
            * &apos;kubernetes.io/ws&apos;  - WebSocket over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc6455
            * &apos;kubernetes.io/wss&apos; - WebSocket over TLS as described in
            https://www.rfc-editor.org/rfc/rfc6455
            
            * Other protocols should use implementation-defined prefixed names such as
            mycompany.com/my-custom-protocol.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1EndpointPort.Name">
            <summary>
            The name of this port.  This must match the &apos;name&apos; field in the corresponding
            ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1EndpointPort.Port">
            <summary>
            The port number of the endpoint.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1EndpointPort.Protocol">
            <summary>
            The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EndpointPort.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EndpointSubset">
            <summary>
            EndpointSubset is a group of addresses with a common set of ports. The expanded
            set of endpoints is the Cartesian product of Addresses x Ports. For example,
            given:
            
            {
            Addresses: [{&quot;ip&quot;: &quot;10.10.1.1&quot;}, {&quot;ip&quot;: &quot;10.10.2.2&quot;}],
            Ports:     [{&quot;name&quot;: &quot;a&quot;, &quot;port&quot;: 8675}, {&quot;name&quot;: &quot;b&quot;, &quot;port&quot;: 309}]
            }
            
            The resulting set of endpoints can be viewed as:
            
            a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
            b: [ 10.10.1.1:309, 10.10.2.2:309 ]
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSubset.#ctor">
            <summary>
            Initializes a new instance of the V1EndpointSubset class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSubset.#ctor(System.Collections.Generic.IList{k8s.Models.V1EndpointAddress},System.Collections.Generic.IList{k8s.Models.V1EndpointAddress},System.Collections.Generic.IList{k8s.Models.Corev1EndpointPort})">
            <summary>
            Initializes a new instance of the V1EndpointSubset class.
            </summary>
            <param name="addresses">
            IP addresses which offer the related ports that are marked as ready. These
            endpoints should be considered safe for load balancers and clients to utilize.
            </param>
            <param name="notReadyAddresses">
            IP addresses which offer the related ports but are not currently marked as ready
            because they have not yet finished starting, have recently failed a readiness
            check, or have recently failed a liveness check.
            </param>
            <param name="ports">
            Port numbers available on the related IP addresses.
            </param>
        </member>
        <member name="P:k8s.Models.V1EndpointSubset.Addresses">
            <summary>
            IP addresses which offer the related ports that are marked as ready. These
            endpoints should be considered safe for load balancers and clients to utilize.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSubset.NotReadyAddresses">
            <summary>
            IP addresses which offer the related ports but are not currently marked as ready
            because they have not yet finished starting, have recently failed a readiness
            check, or have recently failed a liveness check.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSubset.Ports">
            <summary>
            Port numbers available on the related IP addresses.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSubset.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Endpoints">
            <summary>
            Endpoints is a collection of endpoints that implement the actual service.
            Example:
            
            Name: &quot;mysvc&quot;,
            Subsets: [
            {
            Addresses: [{&quot;ip&quot;: &quot;10.10.1.1&quot;}, {&quot;ip&quot;: &quot;10.10.2.2&quot;}],
            Ports: [{&quot;name&quot;: &quot;a&quot;, &quot;port&quot;: 8675}, {&quot;name&quot;: &quot;b&quot;, &quot;port&quot;: 309}]
            },
            {
            Addresses: [{&quot;ip&quot;: &quot;10.10.3.3&quot;}],
            Ports: [{&quot;name&quot;: &quot;a&quot;, &quot;port&quot;: 93}, {&quot;name&quot;: &quot;b&quot;, &quot;port&quot;: 76}]
            },
            ]
            </summary>
        </member>
        <member name="M:k8s.Models.V1Endpoints.#ctor">
            <summary>
            Initializes a new instance of the V1Endpoints class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Endpoints.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1EndpointSubset})">
            <summary>
            Initializes a new instance of the V1Endpoints class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="subsets">
            The set of all endpoints is the union of all subsets. Addresses are placed into
            subsets according to the IPs they share. A single address with multiple ports,
            some of which are ready and some of which are not (because they come from
            different containers) will result in the address being displayed in different
            subsets for the different ports. No address will appear in both Addresses and
            NotReadyAddresses in the same subset. Sets of addresses and ports that comprise
            a service.
            </param>
        </member>
        <member name="P:k8s.Models.V1Endpoints.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoints.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoints.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoints.Subsets">
            <summary>
            The set of all endpoints is the union of all subsets. Addresses are placed into
            subsets according to the IPs they share. A single address with multiple ports,
            some of which are ready and some of which are not (because they come from
            different containers) will result in the address being displayed in different
            subsets for the different ports. No address will appear in both Addresses and
            NotReadyAddresses in the same subset. Sets of addresses and ports that comprise
            a service.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Endpoints.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EndpointsList">
            <summary>
            EndpointsList is a list of endpoints.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointsList.#ctor">
            <summary>
            Initializes a new instance of the V1EndpointsList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointsList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Endpoints},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1EndpointsList class.
            </summary>
            <param name="items">
            List of endpoints.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1EndpointsList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointsList.Items">
            <summary>
            List of endpoints.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointsList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointsList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointsList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EnvFromSource">
            <summary>
            EnvFromSource represents the source of a set of ConfigMaps
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvFromSource.#ctor">
            <summary>
            Initializes a new instance of the V1EnvFromSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvFromSource.#ctor(k8s.Models.V1ConfigMapEnvSource,System.String,k8s.Models.V1SecretEnvSource)">
            <summary>
            Initializes a new instance of the V1EnvFromSource class.
            </summary>
            <param name="configMapRef">
            The ConfigMap to select from
            </param>
            <param name="prefix">
            An optional identifier to prepend to each key in the ConfigMap. Must be a
            C_IDENTIFIER.
            </param>
            <param name="secretRef">
            The Secret to select from
            </param>
        </member>
        <member name="P:k8s.Models.V1EnvFromSource.ConfigMapRef">
            <summary>
            The ConfigMap to select from
            </summary>
        </member>
        <member name="P:k8s.Models.V1EnvFromSource.Prefix">
            <summary>
            An optional identifier to prepend to each key in the ConfigMap. Must be a
            C_IDENTIFIER.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EnvFromSource.SecretRef">
            <summary>
            The Secret to select from
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvFromSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EnvVar">
            <summary>
            EnvVar represents an environment variable present in a Container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvVar.#ctor">
            <summary>
            Initializes a new instance of the V1EnvVar class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvVar.#ctor(System.String,System.String,k8s.Models.V1EnvVarSource)">
            <summary>
            Initializes a new instance of the V1EnvVar class.
            </summary>
            <param name="name">
            Name of the environment variable. Must be a C_IDENTIFIER.
            </param>
            <param name="value">
            Variable references $(VAR_NAME) are expanded using the previously defined
            environment variables in the container and any service environment variables. If
            a variable cannot be resolved, the reference in the input string will be
            unchanged. Double $$ are reduced to a single $, which allows for escaping the
            $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the string literal
            &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded, regardless of whether
            the variable exists or not. Defaults to &quot;&quot;.
            </param>
            <param name="valueFrom">
            Source for the environment variable&apos;s value. Cannot be used if value is not
            empty.
            </param>
        </member>
        <member name="P:k8s.Models.V1EnvVar.Name">
            <summary>
            Name of the environment variable. Must be a C_IDENTIFIER.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EnvVar.Value">
            <summary>
            Variable references $(VAR_NAME) are expanded using the previously defined
            environment variables in the container and any service environment variables. If
            a variable cannot be resolved, the reference in the input string will be
            unchanged. Double $$ are reduced to a single $, which allows for escaping the
            $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the string literal
            &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded, regardless of whether
            the variable exists or not. Defaults to &quot;&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EnvVar.ValueFrom">
            <summary>
            Source for the environment variable&apos;s value. Cannot be used if value is not
            empty.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvVar.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EnvVarSource">
            <summary>
            EnvVarSource represents a source for the value of an EnvVar.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvVarSource.#ctor">
            <summary>
            Initializes a new instance of the V1EnvVarSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvVarSource.#ctor(k8s.Models.V1ConfigMapKeySelector,k8s.Models.V1ObjectFieldSelector,k8s.Models.V1ResourceFieldSelector,k8s.Models.V1SecretKeySelector)">
            <summary>
            Initializes a new instance of the V1EnvVarSource class.
            </summary>
            <param name="configMapKeyRef">
            Selects a key of a ConfigMap.
            </param>
            <param name="fieldRef">
            Selects a field of the pod: supports metadata.name, metadata.namespace,
            `metadata.labels[&apos;&lt;KEY&gt;&apos;]`, `metadata.annotations[&apos;&lt;KEY&gt;&apos;]`, spec.nodeName,
            spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
            </param>
            <param name="resourceFieldRef">
            Selects a resource of the container: only resources limits and requests
            (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,
            requests.memory and requests.ephemeral-storage) are currently supported.
            </param>
            <param name="secretKeyRef">
            Selects a key of a secret in the pod&apos;s namespace
            </param>
        </member>
        <member name="P:k8s.Models.V1EnvVarSource.ConfigMapKeyRef">
            <summary>
            Selects a key of a ConfigMap.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EnvVarSource.FieldRef">
            <summary>
            Selects a field of the pod: supports metadata.name, metadata.namespace,
            `metadata.labels[&apos;&lt;KEY&gt;&apos;]`, `metadata.annotations[&apos;&lt;KEY&gt;&apos;]`, spec.nodeName,
            spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EnvVarSource.ResourceFieldRef">
            <summary>
            Selects a resource of the container: only resources limits and requests
            (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,
            requests.memory and requests.ephemeral-storage) are currently supported.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EnvVarSource.SecretKeyRef">
            <summary>
            Selects a key of a secret in the pod&apos;s namespace
            </summary>
        </member>
        <member name="M:k8s.Models.V1EnvVarSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EphemeralContainer">
            <summary>
            An EphemeralContainer is a temporary container that you may add to an existing
            Pod for user-initiated activities such as debugging. Ephemeral containers have
            no resource or scheduling guarantees, and they will not be restarted when they
            exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an
            ephemeral container causes the Pod to exceed its resource allocation.
            
            To add an ephemeral container, use the ephemeralcontainers subresource of an
            existing Pod. Ephemeral containers may not be removed or restarted.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EphemeralContainer.#ctor">
            <summary>
            Initializes a new instance of the V1EphemeralContainer class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EphemeralContainer.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{k8s.Models.V1EnvVar},System.Collections.Generic.IList{k8s.Models.V1EnvFromSource},System.String,System.String,k8s.Models.V1Lifecycle,k8s.Models.V1Probe,System.Collections.Generic.IList{k8s.Models.V1ContainerPort},k8s.Models.V1Probe,System.Collections.Generic.IList{k8s.Models.V1ContainerResizePolicy},k8s.Models.V1ResourceRequirements,System.String,k8s.Models.V1SecurityContext,k8s.Models.V1Probe,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.V1VolumeDevice},System.Collections.Generic.IList{k8s.Models.V1VolumeMount},System.String)">
            <summary>
            Initializes a new instance of the V1EphemeralContainer class.
            </summary>
            <param name="name">
            Name of the ephemeral container specified as a DNS_LABEL. This name must be
            unique among all containers, init containers and ephemeral containers.
            </param>
            <param name="args">
            Arguments to the entrypoint. The image&apos;s CMD is used if this is not provided.
            Variable references $(VAR_NAME) are expanded using the container&apos;s environment.
            If a variable cannot be resolved, the reference in the input string will be
            unchanged. Double $$ are reduced to a single $, which allows for escaping the
            $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the string literal
            &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded, regardless of whether
            the variable exists or not. Cannot be updated. More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </param>
            <param name="command">
            Entrypoint array. Not executed within a shell. The image&apos;s ENTRYPOINT is used if
            this is not provided. Variable references $(VAR_NAME) are expanded using the
            container&apos;s environment. If a variable cannot be resolved, the reference in the
            input string will be unchanged. Double $$ are reduced to a single $, which
            allows for escaping the $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the
            string literal &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded,
            regardless of whether the variable exists or not. Cannot be updated. More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </param>
            <param name="env">
            List of environment variables to set in the container. Cannot be updated.
            </param>
            <param name="envFrom">
            List of sources to populate environment variables in the container. The keys
            defined within a source must be a C_IDENTIFIER. All invalid keys will be
            reported as an event when the container is starting. When a key exists in
            multiple sources, the value associated with the last source will take
            precedence. Values defined by an Env with a duplicate key will take precedence.
            Cannot be updated.
            </param>
            <param name="image">
            Container image name. More info:
            https://kubernetes.io/docs/concepts/containers/images
            </param>
            <param name="imagePullPolicy">
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
            :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
            info: https://kubernetes.io/docs/concepts/containers/images#updating-images
            </param>
            <param name="lifecycle">
            Lifecycle is not allowed for ephemeral containers.
            </param>
            <param name="livenessProbe">
            Probes are not allowed for ephemeral containers.
            </param>
            <param name="ports">
            Ports are not allowed for ephemeral containers.
            </param>
            <param name="readinessProbe">
            Probes are not allowed for ephemeral containers.
            </param>
            <param name="resizePolicy">
            Resources resize policy for the container.
            </param>
            <param name="resources">
            Resources are not allowed for ephemeral containers. Ephemeral containers use
            spare resources already allocated to the pod.
            </param>
            <param name="restartPolicy">
            Restart policy for the container to manage the restart behavior of each
            container within a pod. This may only be set for init containers. You cannot set
            this field on ephemeral containers.
            </param>
            <param name="securityContext">
            Optional: SecurityContext defines the security options the ephemeral container
            should be run with. If set, the fields of SecurityContext override the
            equivalent fields of PodSecurityContext.
            </param>
            <param name="startupProbe">
            Probes are not allowed for ephemeral containers.
            </param>
            <param name="stdin">
            Whether this container should allocate a buffer for stdin in the container
            runtime. If this is not set, reads from stdin in the container will always
            result in EOF. Default is false.
            </param>
            <param name="stdinOnce">
            Whether the container runtime should close the stdin channel after it has been
            opened by a single attach. When stdin is true the stdin stream will remain open
            across multiple attach sessions. If stdinOnce is set to true, stdin is opened on
            container start, is empty until the first client attaches to stdin, and then
            remains open and accepts data until the client disconnects, at which time stdin
            is closed and remains closed until the container is restarted. If this flag is
            false, a container processes that reads from stdin will never receive an EOF.
            Default is false
            </param>
            <param name="targetContainerName">
            If set, the name of the container from PodSpec that this ephemeral container
            targets. The ephemeral container will be run in the namespaces (IPC, PID, etc)
            of this container. If not set then the ephemeral container uses the namespaces
            configured in the Pod spec.
            
            The container runtime must implement support for this feature. If the runtime
            does not support namespace targeting then the result of setting this field is
            undefined.
            </param>
            <param name="terminationMessagePath">
            Optional: Path at which the file to which the container&apos;s termination message
            will be written is mounted into the container&apos;s filesystem. Message written is
            intended to be brief final status, such as an assertion failure message. Will be
            truncated by the node if greater than 4096 bytes. The total message length
            across all containers will be limited to 12kb. Defaults to /dev/termination-log.
            Cannot be updated.
            </param>
            <param name="terminationMessagePolicy">
            Indicate how the termination message should be populated. File will use the
            contents of terminationMessagePath to populate the container status message on
            both success and failure. FallbackToLogsOnError will use the last chunk of
            container log output if the termination message file is empty and the container
            exited with an error. The log output is limited to 2048 bytes or 80 lines,
            whichever is smaller. Defaults to File. Cannot be updated.
            </param>
            <param name="tty">
            Whether this container should allocate a TTY for itself, also requires &apos;stdin&apos;
            to be true. Default is false.
            </param>
            <param name="volumeDevices">
            volumeDevices is the list of block devices to be used by the container.
            </param>
            <param name="volumeMounts">
            Pod volumes to mount into the container&apos;s filesystem. Subpath mounts are not
            allowed for ephemeral containers. Cannot be updated.
            </param>
            <param name="workingDir">
            Container&apos;s working directory. If not specified, the container runtime&apos;s default
            will be used, which might be configured in the container image. Cannot be
            updated.
            </param>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Args">
            <summary>
            Arguments to the entrypoint. The image&apos;s CMD is used if this is not provided.
            Variable references $(VAR_NAME) are expanded using the container&apos;s environment.
            If a variable cannot be resolved, the reference in the input string will be
            unchanged. Double $$ are reduced to a single $, which allows for escaping the
            $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the string literal
            &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded, regardless of whether
            the variable exists or not. Cannot be updated. More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Command">
            <summary>
            Entrypoint array. Not executed within a shell. The image&apos;s ENTRYPOINT is used if
            this is not provided. Variable references $(VAR_NAME) are expanded using the
            container&apos;s environment. If a variable cannot be resolved, the reference in the
            input string will be unchanged. Double $$ are reduced to a single $, which
            allows for escaping the $(VAR_NAME) syntax: i.e. &quot;$$(VAR_NAME)&quot; will produce the
            string literal &quot;$(VAR_NAME)&quot;. Escaped references will never be expanded,
            regardless of whether the variable exists or not. Cannot be updated. More info:
            https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Env">
            <summary>
            List of environment variables to set in the container. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.EnvFrom">
            <summary>
            List of sources to populate environment variables in the container. The keys
            defined within a source must be a C_IDENTIFIER. All invalid keys will be
            reported as an event when the container is starting. When a key exists in
            multiple sources, the value associated with the last source will take
            precedence. Values defined by an Env with a duplicate key will take precedence.
            Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Image">
            <summary>
            Container image name. More info:
            https://kubernetes.io/docs/concepts/containers/images
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.ImagePullPolicy">
            <summary>
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
            :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
            info: https://kubernetes.io/docs/concepts/containers/images#updating-images
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Lifecycle">
            <summary>
            Lifecycle is not allowed for ephemeral containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.LivenessProbe">
            <summary>
            Probes are not allowed for ephemeral containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Name">
            <summary>
            Name of the ephemeral container specified as a DNS_LABEL. This name must be
            unique among all containers, init containers and ephemeral containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Ports">
            <summary>
            Ports are not allowed for ephemeral containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.ReadinessProbe">
            <summary>
            Probes are not allowed for ephemeral containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.ResizePolicy">
            <summary>
            Resources resize policy for the container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Resources">
            <summary>
            Resources are not allowed for ephemeral containers. Ephemeral containers use
            spare resources already allocated to the pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.RestartPolicy">
            <summary>
            Restart policy for the container to manage the restart behavior of each
            container within a pod. This may only be set for init containers. You cannot set
            this field on ephemeral containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.SecurityContext">
            <summary>
            Optional: SecurityContext defines the security options the ephemeral container
            should be run with. If set, the fields of SecurityContext override the
            equivalent fields of PodSecurityContext.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.StartupProbe">
            <summary>
            Probes are not allowed for ephemeral containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Stdin">
            <summary>
            Whether this container should allocate a buffer for stdin in the container
            runtime. If this is not set, reads from stdin in the container will always
            result in EOF. Default is false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.StdinOnce">
            <summary>
            Whether the container runtime should close the stdin channel after it has been
            opened by a single attach. When stdin is true the stdin stream will remain open
            across multiple attach sessions. If stdinOnce is set to true, stdin is opened on
            container start, is empty until the first client attaches to stdin, and then
            remains open and accepts data until the client disconnects, at which time stdin
            is closed and remains closed until the container is restarted. If this flag is
            false, a container processes that reads from stdin will never receive an EOF.
            Default is false
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.TargetContainerName">
            <summary>
            If set, the name of the container from PodSpec that this ephemeral container
            targets. The ephemeral container will be run in the namespaces (IPC, PID, etc)
            of this container. If not set then the ephemeral container uses the namespaces
            configured in the Pod spec.
            
            The container runtime must implement support for this feature. If the runtime
            does not support namespace targeting then the result of setting this field is
            undefined.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.TerminationMessagePath">
            <summary>
            Optional: Path at which the file to which the container&apos;s termination message
            will be written is mounted into the container&apos;s filesystem. Message written is
            intended to be brief final status, such as an assertion failure message. Will be
            truncated by the node if greater than 4096 bytes. The total message length
            across all containers will be limited to 12kb. Defaults to /dev/termination-log.
            Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.TerminationMessagePolicy">
            <summary>
            Indicate how the termination message should be populated. File will use the
            contents of terminationMessagePath to populate the container status message on
            both success and failure. FallbackToLogsOnError will use the last chunk of
            container log output if the termination message file is empty and the container
            exited with an error. The log output is limited to 2048 bytes or 80 lines,
            whichever is smaller. Defaults to File. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.Tty">
            <summary>
            Whether this container should allocate a TTY for itself, also requires &apos;stdin&apos;
            to be true. Default is false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.VolumeDevices">
            <summary>
            volumeDevices is the list of block devices to be used by the container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.VolumeMounts">
            <summary>
            Pod volumes to mount into the container&apos;s filesystem. Subpath mounts are not
            allowed for ephemeral containers. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EphemeralContainer.WorkingDir">
            <summary>
            Container&apos;s working directory. If not specified, the container runtime&apos;s default
            will be used, which might be configured in the container image. Cannot be
            updated.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EphemeralContainer.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EphemeralVolumeSource">
            <summary>
            Represents an ephemeral volume that is handled by a normal storage driver.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EphemeralVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1EphemeralVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EphemeralVolumeSource.#ctor(k8s.Models.V1PersistentVolumeClaimTemplate)">
            <summary>
            Initializes a new instance of the V1EphemeralVolumeSource class.
            </summary>
            <param name="volumeClaimTemplate">
            Will be used to create a stand-alone PVC to provision the volume. The pod in
            which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e.
            the PVC will be deleted together with the pod.  The name of the PVC will be
            `&lt;pod name&gt;-&lt;volume name&gt;` where `&lt;volume name&gt;` is the name from the
            `PodSpec.Volumes` array entry. Pod validation will reject the pod if the
            concatenated name is not valid for a PVC (for example, too long).
            
            An existing PVC with that name that is not owned by the pod will *not* be used
            for the pod to avoid using an unrelated volume by mistake. Starting the pod is
            then blocked until the unrelated PVC is removed. If such a pre-created PVC is
            meant to be used by the pod, the PVC has to updated with an owner reference to
            the pod once the pod exists. Normally this should not be necessary, but it may
            be useful when manually reconstructing a broken cluster.
            
            This field is read-only and no changes will be made by Kubernetes to the PVC
            after it has been created.
            
            Required, must not be nil.
            </param>
        </member>
        <member name="P:k8s.Models.V1EphemeralVolumeSource.VolumeClaimTemplate">
            <summary>
            Will be used to create a stand-alone PVC to provision the volume. The pod in
            which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e.
            the PVC will be deleted together with the pod.  The name of the PVC will be
            `&lt;pod name&gt;-&lt;volume name&gt;` where `&lt;volume name&gt;` is the name from the
            `PodSpec.Volumes` array entry. Pod validation will reject the pod if the
            concatenated name is not valid for a PVC (for example, too long).
            
            An existing PVC with that name that is not owned by the pod will *not* be used
            for the pod to avoid using an unrelated volume by mistake. Starting the pod is
            then blocked until the unrelated PVC is removed. If such a pre-created PVC is
            meant to be used by the pod, the PVC has to updated with an owner reference to
            the pod once the pod exists. Normally this should not be necessary, but it may
            be useful when manually reconstructing a broken cluster.
            
            This field is read-only and no changes will be made by Kubernetes to the PVC
            after it has been created.
            
            Required, must not be nil.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EphemeralVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Corev1Event">
            <summary>
            Event is a report of an event somewhere in the cluster.  Events have a limited
            retention time and triggers and messages may evolve with time.  Event consumers
            should not rely on the timing of an event with a given Reason reflecting a
            consistent underlying trigger, or the continued existence of events with that
            Reason.  Events should be treated as informative, best-effort, supplemental
            data.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1Event.#ctor">
            <summary>
            Initializes a new instance of the Corev1Event class.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1Event.#ctor(k8s.Models.V1ObjectReference,k8s.Models.V1ObjectMeta,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.String,System.String,k8s.Models.V1ObjectReference,System.String,System.String,k8s.Models.Corev1EventSeries,k8s.Models.V1EventSource,System.String)">
            <summary>
            Initializes a new instance of the Corev1Event class.
            </summary>
            <param name="involvedObject">
            The object that this event is about.
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="action">
            What action was taken/failed regarding to the Regarding object.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="count">
            The number of times this event has occurred.
            </param>
            <param name="eventTime">
            Time when this Event was first observed.
            </param>
            <param name="firstTimestamp">
            The time at which the event was first recorded. (Time of server receipt is in
            TypeMeta.)
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="lastTimestamp">
            The time at which the most recent occurrence of this event was recorded.
            </param>
            <param name="message">
            A human-readable description of the status of this operation.
            </param>
            <param name="reason">
            This should be a short, machine understandable string that gives the reason for
            the transition into the object&apos;s current status.
            </param>
            <param name="related">
            Optional secondary object for more complex actions.
            </param>
            <param name="reportingComponent">
            Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
            </param>
            <param name="reportingInstance">
            ID of the controller instance, e.g. `kubelet-xyzf`.
            </param>
            <param name="series">
            Data about the Event series this event represents or nil if it&apos;s a singleton
            Event.
            </param>
            <param name="source">
            The component reporting this event. Should be a short machine understandable
            string.
            </param>
            <param name="type">
            Type of this event (Normal, Warning), new types could be added in the future
            </param>
        </member>
        <member name="P:k8s.Models.Corev1Event.Action">
            <summary>
            What action was taken/failed regarding to the Regarding object.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Count">
            <summary>
            The number of times this event has occurred.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.EventTime">
            <summary>
            Time when this Event was first observed.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.FirstTimestamp">
            <summary>
            The time at which the event was first recorded. (Time of server receipt is in
            TypeMeta.)
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.InvolvedObject">
            <summary>
            The object that this event is about.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.LastTimestamp">
            <summary>
            The time at which the most recent occurrence of this event was recorded.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Message">
            <summary>
            A human-readable description of the status of this operation.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Reason">
            <summary>
            This should be a short, machine understandable string that gives the reason for
            the transition into the object&apos;s current status.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Related">
            <summary>
            Optional secondary object for more complex actions.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.ReportingComponent">
            <summary>
            Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.ReportingInstance">
            <summary>
            ID of the controller instance, e.g. `kubelet-xyzf`.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Series">
            <summary>
            Data about the Event series this event represents or nil if it&apos;s a singleton
            Event.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Source">
            <summary>
            The component reporting this event. Should be a short machine understandable
            string.
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1Event.Type">
            <summary>
            Type of this event (Normal, Warning), new types could be added in the future
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1Event.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Corev1EventList">
            <summary>
            EventList is a list of events.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EventList.#ctor">
            <summary>
            Initializes a new instance of the Corev1EventList class.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EventList.#ctor(System.Collections.Generic.IList{k8s.Models.Corev1Event},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the Corev1EventList class.
            </summary>
            <param name="items">
            List of events
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.Corev1EventList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1EventList.Items">
            <summary>
            List of events
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1EventList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1EventList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EventList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Corev1EventSeries">
            <summary>
            EventSeries contain information on series of events, i.e. thing that was/is
            happening continuously for some time.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EventSeries.#ctor">
            <summary>
            Initializes a new instance of the Corev1EventSeries class.
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EventSeries.#ctor(System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the Corev1EventSeries class.
            </summary>
            <param name="count">
            Number of occurrences in this series up to the last heartbeat time
            </param>
            <param name="lastObservedTime">
            Time of the last occurrence observed
            </param>
        </member>
        <member name="P:k8s.Models.Corev1EventSeries.Count">
            <summary>
            Number of occurrences in this series up to the last heartbeat time
            </summary>
        </member>
        <member name="P:k8s.Models.Corev1EventSeries.LastObservedTime">
            <summary>
            Time of the last occurrence observed
            </summary>
        </member>
        <member name="M:k8s.Models.Corev1EventSeries.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EventSource">
            <summary>
            EventSource contains information for an event.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EventSource.#ctor">
            <summary>
            Initializes a new instance of the V1EventSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EventSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1EventSource class.
            </summary>
            <param name="component">
            Component from which the event is generated.
            </param>
            <param name="host">
            Node name on which the event is generated.
            </param>
        </member>
        <member name="P:k8s.Models.V1EventSource.Component">
            <summary>
            Component from which the event is generated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EventSource.Host">
            <summary>
            Node name on which the event is generated.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EventSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ExecAction">
            <summary>
            ExecAction describes a &quot;run in container&quot; action.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ExecAction.#ctor">
            <summary>
            Initializes a new instance of the V1ExecAction class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ExecAction.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1ExecAction class.
            </summary>
            <param name="command">
            Command is the command line to execute inside the container, the working
            directory for the command  is root (&apos;/&apos;) in the container&apos;s filesystem. The
            command is simply exec&apos;d, it is not run inside a shell, so traditional shell
            instructions (&apos;|&apos;, etc) won&apos;t work. To use a shell, you need to explicitly call
            out to that shell. Exit status of 0 is treated as live/healthy and non-zero is
            unhealthy.
            </param>
        </member>
        <member name="P:k8s.Models.V1ExecAction.Command">
            <summary>
            Command is the command line to execute inside the container, the working
            directory for the command  is root (&apos;/&apos;) in the container&apos;s filesystem. The
            command is simply exec&apos;d, it is not run inside a shell, so traditional shell
            instructions (&apos;|&apos;, etc) won&apos;t work. To use a shell, you need to explicitly call
            out to that shell. Exit status of 0 is treated as live/healthy and non-zero is
            unhealthy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ExecAction.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1FCVolumeSource">
            <summary>
            Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as
            read/write once. Fibre Channel volumes support ownership management and SELinux
            relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FCVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1FCVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FCVolumeSource.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1FCVolumeSource class.
            </summary>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </param>
            <param name="lun">
            lun is Optional: FC target lun number
            </param>
            <param name="readOnlyProperty">
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            </param>
            <param name="targetWWNs">
            targetWWNs is Optional: FC target worldwide names (WWNs)
            </param>
            <param name="wwids">
            wwids Optional: FC volume world wide identifiers (wwids) Either wwids or
            combination of targetWWNs and lun must be set, but not both simultaneously.
            </param>
        </member>
        <member name="P:k8s.Models.V1FCVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FCVolumeSource.Lun">
            <summary>
            lun is Optional: FC target lun number
            </summary>
        </member>
        <member name="P:k8s.Models.V1FCVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FCVolumeSource.TargetWWNs">
            <summary>
            targetWWNs is Optional: FC target worldwide names (WWNs)
            </summary>
        </member>
        <member name="P:k8s.Models.V1FCVolumeSource.Wwids">
            <summary>
            wwids Optional: FC volume world wide identifiers (wwids) Either wwids or
            combination of targetWWNs and lun must be set, but not both simultaneously.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FCVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1FlexPersistentVolumeSource">
            <summary>
            FlexPersistentVolumeSource represents a generic persistent volume resource that
            is provisioned/attached using an exec based plugin.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlexPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1FlexPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlexPersistentVolumeSource.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},k8s.Models.V1SecretReference)">
            <summary>
            Initializes a new instance of the V1FlexPersistentVolumeSource class.
            </summary>
            <param name="driver">
            driver is the name of the driver to use for this volume.
            </param>
            <param name="fsType">
            fsType is the Filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. The default filesystem
            depends on FlexVolume script.
            </param>
            <param name="options">
            options is Optional: this field holds extra command options if any.
            </param>
            <param name="readOnlyProperty">
            readOnly is Optional: defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            </param>
            <param name="secretRef">
            secretRef is Optional: SecretRef is reference to the secret object containing
            sensitive information to pass to the plugin scripts. This may be empty if no
            secret object is specified. If the secret object contains more than one secret,
            all secrets are passed to the plugin scripts.
            </param>
        </member>
        <member name="P:k8s.Models.V1FlexPersistentVolumeSource.Driver">
            <summary>
            driver is the name of the driver to use for this volume.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexPersistentVolumeSource.FsType">
            <summary>
            fsType is the Filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. The default filesystem
            depends on FlexVolume script.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexPersistentVolumeSource.Options">
            <summary>
            options is Optional: this field holds extra command options if any.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly is Optional: defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexPersistentVolumeSource.SecretRef">
            <summary>
            secretRef is Optional: SecretRef is reference to the secret object containing
            sensitive information to pass to the plugin scripts. This may be empty if no
            secret object is specified. If the secret object contains more than one secret,
            all secrets are passed to the plugin scripts.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlexPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1FlexVolumeSource">
            <summary>
            FlexVolume represents a generic volume resource that is provisioned/attached
            using an exec based plugin.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlexVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1FlexVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlexVolumeSource.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},k8s.Models.V1LocalObjectReference)">
            <summary>
            Initializes a new instance of the V1FlexVolumeSource class.
            </summary>
            <param name="driver">
            driver is the name of the driver to use for this volume.
            </param>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. The default filesystem
            depends on FlexVolume script.
            </param>
            <param name="options">
            options is Optional: this field holds extra command options if any.
            </param>
            <param name="readOnlyProperty">
            readOnly is Optional: defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            </param>
            <param name="secretRef">
            secretRef is Optional: secretRef is reference to the secret object containing
            sensitive information to pass to the plugin scripts. This may be empty if no
            secret object is specified. If the secret object contains more than one secret,
            all secrets are passed to the plugin scripts.
            </param>
        </member>
        <member name="P:k8s.Models.V1FlexVolumeSource.Driver">
            <summary>
            driver is the name of the driver to use for this volume.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. The default filesystem
            depends on FlexVolume script.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexVolumeSource.Options">
            <summary>
            options is Optional: this field holds extra command options if any.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly is Optional: defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlexVolumeSource.SecretRef">
            <summary>
            secretRef is Optional: secretRef is reference to the secret object containing
            sensitive information to pass to the plugin scripts. This may be empty if no
            secret object is specified. If the secret object contains more than one secret,
            all secrets are passed to the plugin scripts.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlexVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1FlockerVolumeSource">
            <summary>
            Represents a Flocker volume mounted by the Flocker agent. One and only one of
            datasetName and datasetUUID should be set. Flocker volumes do not support
            ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlockerVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1FlockerVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlockerVolumeSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1FlockerVolumeSource class.
            </summary>
            <param name="datasetName">
            datasetName is Name of the dataset stored as metadata -&gt; name on the dataset for
            Flocker should be considered as deprecated
            </param>
            <param name="datasetUUID">
            datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker
            dataset
            </param>
        </member>
        <member name="P:k8s.Models.V1FlockerVolumeSource.DatasetName">
            <summary>
            datasetName is Name of the dataset stored as metadata -&gt; name on the dataset for
            Flocker should be considered as deprecated
            </summary>
        </member>
        <member name="P:k8s.Models.V1FlockerVolumeSource.DatasetUUID">
            <summary>
            datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker
            dataset
            </summary>
        </member>
        <member name="M:k8s.Models.V1FlockerVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1GCEPersistentDiskVolumeSource">
            <summary>
            Represents a Persistent Disk resource in Google Compute Engine.
            
            A GCE PD must exist before mounting to a container. The disk must also be in the
            same GCE project and zone as the kubelet. A GCE PD can only be mounted as
            read/write once or read-only many times. GCE PDs support ownership management
            and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GCEPersistentDiskVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1GCEPersistentDiskVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GCEPersistentDiskVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1GCEPersistentDiskVolumeSource class.
            </summary>
            <param name="pdName">
            pdName is unique name of the PD resource in GCE. Used to identify the disk in
            GCE. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </param>
            <param name="fsType">
            fsType is filesystem type of the volume that you want to mount. Tip: Ensure that
            the filesystem type is supported by the host operating system. Examples: &quot;ext4&quot;,
            &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </param>
            <param name="partition">
            partition is the partition in the volume that you want to mount. If omitted, the
            default is to mount by volume name. Examples: For volume /dev/sda1, you specify
            the partition as &quot;1&quot;. Similarly, the volume partition for /dev/sda is &quot;0&quot; (or
            you can leave the property empty). More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </param>
        </member>
        <member name="P:k8s.Models.V1GCEPersistentDiskVolumeSource.FsType">
            <summary>
            fsType is filesystem type of the volume that you want to mount. Tip: Ensure that
            the filesystem type is supported by the host operating system. Examples: &quot;ext4&quot;,
            &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </summary>
        </member>
        <member name="P:k8s.Models.V1GCEPersistentDiskVolumeSource.Partition">
            <summary>
            partition is the partition in the volume that you want to mount. If omitted, the
            default is to mount by volume name. Examples: For volume /dev/sda1, you specify
            the partition as &quot;1&quot;. Similarly, the volume partition for /dev/sda is &quot;0&quot; (or
            you can leave the property empty). More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </summary>
        </member>
        <member name="P:k8s.Models.V1GCEPersistentDiskVolumeSource.PdName">
            <summary>
            pdName is unique name of the PD resource in GCE. Used to identify the disk in
            GCE. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </summary>
        </member>
        <member name="P:k8s.Models.V1GCEPersistentDiskVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </summary>
        </member>
        <member name="M:k8s.Models.V1GCEPersistentDiskVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1GRPCAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1GRPCAction.#ctor">
            <summary>
            Initializes a new instance of the V1GRPCAction class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GRPCAction.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the V1GRPCAction class.
            </summary>
            <param name="port">
            Port number of the gRPC service. Number must be in the range 1 to 65535.
            </param>
            <param name="service">
            Service is the name of the service to place in the gRPC HealthCheckRequest (see
            https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
            
            If this is not specified, the default behavior is defined by gRPC.
            </param>
        </member>
        <member name="P:k8s.Models.V1GRPCAction.Port">
            <summary>
            Port number of the gRPC service. Number must be in the range 1 to 65535.
            </summary>
        </member>
        <member name="P:k8s.Models.V1GRPCAction.Service">
            <summary>
            Service is the name of the service to place in the gRPC HealthCheckRequest (see
            https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
            
            If this is not specified, the default behavior is defined by gRPC.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GRPCAction.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1GitRepoVolumeSource">
            <summary>
            Represents a volume that is populated with the contents of a git repository. Git
            repo volumes do not support ownership management. Git repo volumes support
            SELinux relabeling.
            
            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo,
            mount an EmptyDir into an InitContainer that clones the repo using git, then
            mount the EmptyDir into the Pod&apos;s container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GitRepoVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1GitRepoVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GitRepoVolumeSource.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1GitRepoVolumeSource class.
            </summary>
            <param name="repository">
            repository is the URL
            </param>
            <param name="directory">
            directory is the target directory name. Must not contain or start with &apos;..&apos;.  If
            &apos;.&apos; is supplied, the volume directory will be the git repository.  Otherwise, if
            specified, the volume will contain the git repository in the subdirectory with
            the given name.
            </param>
            <param name="revision">
            revision is the commit hash for the specified revision.
            </param>
        </member>
        <member name="P:k8s.Models.V1GitRepoVolumeSource.Directory">
            <summary>
            directory is the target directory name. Must not contain or start with &apos;..&apos;.  If
            &apos;.&apos; is supplied, the volume directory will be the git repository.  Otherwise, if
            specified, the volume will contain the git repository in the subdirectory with
            the given name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1GitRepoVolumeSource.Repository">
            <summary>
            repository is the URL
            </summary>
        </member>
        <member name="P:k8s.Models.V1GitRepoVolumeSource.Revision">
            <summary>
            revision is the commit hash for the specified revision.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GitRepoVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1GlusterfsPersistentVolumeSource">
            <summary>
            Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes
            do not support ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GlusterfsPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1GlusterfsPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GlusterfsPersistentVolumeSource.#ctor(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1GlusterfsPersistentVolumeSource class.
            </summary>
            <param name="endpoints">
            endpoints is the endpoint name that details Glusterfs topology. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </param>
            <param name="path">
            path is the Glusterfs volume path. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </param>
            <param name="endpointsNamespace">
            endpointsNamespace is the namespace that contains Glusterfs endpoint. If this
            field is empty, the EndpointNamespace defaults to the same namespace as the
            bound PVC. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the Glusterfs volume to be mounted with read-only
            permissions. Defaults to false. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </param>
        </member>
        <member name="P:k8s.Models.V1GlusterfsPersistentVolumeSource.Endpoints">
            <summary>
            endpoints is the endpoint name that details Glusterfs topology. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1GlusterfsPersistentVolumeSource.EndpointsNamespace">
            <summary>
            endpointsNamespace is the namespace that contains Glusterfs endpoint. If this
            field is empty, the EndpointNamespace defaults to the same namespace as the
            bound PVC. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1GlusterfsPersistentVolumeSource.Path">
            <summary>
            path is the Glusterfs volume path. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1GlusterfsPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the Glusterfs volume to be mounted with read-only
            permissions. Defaults to false. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </summary>
        </member>
        <member name="M:k8s.Models.V1GlusterfsPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1GlusterfsVolumeSource">
            <summary>
            Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes
            do not support ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GlusterfsVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1GlusterfsVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GlusterfsVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1GlusterfsVolumeSource class.
            </summary>
            <param name="endpoints">
            endpoints is the endpoint name that details Glusterfs topology. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </param>
            <param name="path">
            path is the Glusterfs volume path. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the Glusterfs volume to be mounted with read-only
            permissions. Defaults to false. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </param>
        </member>
        <member name="P:k8s.Models.V1GlusterfsVolumeSource.Endpoints">
            <summary>
            endpoints is the endpoint name that details Glusterfs topology. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1GlusterfsVolumeSource.Path">
            <summary>
            path is the Glusterfs volume path. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1GlusterfsVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the Glusterfs volume to be mounted with read-only
            permissions. Defaults to false. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            </summary>
        </member>
        <member name="M:k8s.Models.V1GlusterfsVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HTTPGetAction">
            <summary>
            HTTPGetAction describes an action based on HTTP Get requests.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPGetAction.#ctor">
            <summary>
            Initializes a new instance of the V1HTTPGetAction class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPGetAction.#ctor(k8s.Models.IntstrIntOrString,System.String,System.Collections.Generic.IList{k8s.Models.V1HTTPHeader},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1HTTPGetAction class.
            </summary>
            <param name="port">
            Name or number of the port to access on the container. Number must be in the
            range 1 to 65535. Name must be an IANA_SVC_NAME.
            </param>
            <param name="host">
            Host name to connect to, defaults to the pod IP. You probably want to set &quot;Host&quot;
            in httpHeaders instead.
            </param>
            <param name="httpHeaders">
            Custom headers to set in the request. HTTP allows repeated headers.
            </param>
            <param name="path">
            Path to access on the HTTP server.
            </param>
            <param name="scheme">
            Scheme to use for connecting to the host. Defaults to HTTP.
            </param>
        </member>
        <member name="P:k8s.Models.V1HTTPGetAction.Host">
            <summary>
            Host name to connect to, defaults to the pod IP. You probably want to set &quot;Host&quot;
            in httpHeaders instead.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HTTPGetAction.HttpHeaders">
            <summary>
            Custom headers to set in the request. HTTP allows repeated headers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HTTPGetAction.Path">
            <summary>
            Path to access on the HTTP server.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HTTPGetAction.Port">
            <summary>
            Name or number of the port to access on the container. Number must be in the
            range 1 to 65535. Name must be an IANA_SVC_NAME.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HTTPGetAction.Scheme">
            <summary>
            Scheme to use for connecting to the host. Defaults to HTTP.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPGetAction.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HTTPHeader">
            <summary>
            HTTPHeader describes a custom header to be used in HTTP probes
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPHeader.#ctor">
            <summary>
            Initializes a new instance of the V1HTTPHeader class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPHeader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1HTTPHeader class.
            </summary>
            <param name="name">
            The header field name. This will be canonicalized upon output, so case-variant
            names will be understood as the same header.
            </param>
            <param name="value">
            The header field value
            </param>
        </member>
        <member name="P:k8s.Models.V1HTTPHeader.Name">
            <summary>
            The header field name. This will be canonicalized upon output, so case-variant
            names will be understood as the same header.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HTTPHeader.Value">
            <summary>
            The header field value
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPHeader.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HostAlias">
            <summary>
            HostAlias holds the mapping between IP and hostnames that will be injected as an
            entry in the pod&apos;s hosts file.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostAlias.#ctor">
            <summary>
            Initializes a new instance of the V1HostAlias class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostAlias.#ctor(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1HostAlias class.
            </summary>
            <param name="hostnames">
            Hostnames for the above IP address.
            </param>
            <param name="ip">
            IP address of the host file entry.
            </param>
        </member>
        <member name="P:k8s.Models.V1HostAlias.Hostnames">
            <summary>
            Hostnames for the above IP address.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HostAlias.Ip">
            <summary>
            IP address of the host file entry.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostAlias.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HostIP">
            <summary>
            HostIP represents a single IP address allocated to the host.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostIP.#ctor">
            <summary>
            Initializes a new instance of the V1HostIP class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostIP.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1HostIP class.
            </summary>
            <param name="ip">
            IP is the IP address assigned to the host
            </param>
        </member>
        <member name="P:k8s.Models.V1HostIP.Ip">
            <summary>
            IP is the IP address assigned to the host
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostIP.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HostPathVolumeSource">
            <summary>
            Represents a host path mapped into a pod. Host path volumes do not support
            ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostPathVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1HostPathVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostPathVolumeSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1HostPathVolumeSource class.
            </summary>
            <param name="path">
            path of the directory on the host. If the path is a symlink, it will follow the
            link to the real path. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </param>
            <param name="type">
            type for HostPath Volume Defaults to &quot;&quot; More info:
            https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </param>
        </member>
        <member name="P:k8s.Models.V1HostPathVolumeSource.Path">
            <summary>
            path of the directory on the host. If the path is a symlink, it will follow the
            link to the real path. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </summary>
        </member>
        <member name="P:k8s.Models.V1HostPathVolumeSource.Type">
            <summary>
            type for HostPath Volume Defaults to &quot;&quot; More info:
            https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </summary>
        </member>
        <member name="M:k8s.Models.V1HostPathVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ISCSIPersistentVolumeSource">
            <summary>
            ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be
            mounted as read/write once. ISCSI volumes support ownership management and
            SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ISCSIPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1ISCSIPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ISCSIPersistentVolumeSource.#ctor(System.String,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},k8s.Models.V1SecretReference)">
            <summary>
            Initializes a new instance of the V1ISCSIPersistentVolumeSource class.
            </summary>
            <param name="iqn">
            iqn is Target iSCSI Qualified Name.
            </param>
            <param name="lun">
            lun is iSCSI Target Lun number.
            </param>
            <param name="targetPortal">
            targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port
            if the port is other than default (typically TCP ports 860 and 3260).
            </param>
            <param name="chapAuthDiscovery">
            chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
            </param>
            <param name="chapAuthSession">
            chapAuthSession defines whether support iSCSI Session CHAP authentication
            </param>
            <param name="fsType">
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
            </param>
            <param name="initiatorName">
            initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified
            with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume
            name&gt; will be created for the connection.
            </param>
            <param name="iscsiInterface">
            iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to
            &apos;default&apos; (tcp).
            </param>
            <param name="portals">
            portals is the iSCSI Target Portal List. The Portal is either an IP or
            ip_addr:port if the port is other than default (typically TCP ports 860 and
            3260).
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false.
            </param>
            <param name="secretRef">
            secretRef is the CHAP Secret for iSCSI target and initiator authentication
            </param>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.ChapAuthDiscovery">
            <summary>
            chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.ChapAuthSession">
            <summary>
            chapAuthSession defines whether support iSCSI Session CHAP authentication
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.FsType">
            <summary>
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.InitiatorName">
            <summary>
            initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified
            with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume
            name&gt; will be created for the connection.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.Iqn">
            <summary>
            iqn is Target iSCSI Qualified Name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.IscsiInterface">
            <summary>
            iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to
            &apos;default&apos; (tcp).
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.Lun">
            <summary>
            lun is iSCSI Target Lun number.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.Portals">
            <summary>
            portals is the iSCSI Target Portal List. The Portal is either an IP or
            ip_addr:port if the port is other than default (typically TCP ports 860 and
            3260).
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.SecretRef">
            <summary>
            secretRef is the CHAP Secret for iSCSI target and initiator authentication
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIPersistentVolumeSource.TargetPortal">
            <summary>
            targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port
            if the port is other than default (typically TCP ports 860 and 3260).
            </summary>
        </member>
        <member name="M:k8s.Models.V1ISCSIPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ISCSIVolumeSource">
            <summary>
            Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once.
            ISCSI volumes support ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ISCSIVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1ISCSIVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ISCSIVolumeSource.#ctor(System.String,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},k8s.Models.V1LocalObjectReference)">
            <summary>
            Initializes a new instance of the V1ISCSIVolumeSource class.
            </summary>
            <param name="iqn">
            iqn is the target iSCSI Qualified Name.
            </param>
            <param name="lun">
            lun represents iSCSI Target Lun number.
            </param>
            <param name="targetPortal">
            targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port
            if the port is other than default (typically TCP ports 860 and 3260).
            </param>
            <param name="chapAuthDiscovery">
            chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
            </param>
            <param name="chapAuthSession">
            chapAuthSession defines whether support iSCSI Session CHAP authentication
            </param>
            <param name="fsType">
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
            </param>
            <param name="initiatorName">
            initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified
            with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume
            name&gt; will be created for the connection.
            </param>
            <param name="iscsiInterface">
            iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to
            &apos;default&apos; (tcp).
            </param>
            <param name="portals">
            portals is the iSCSI Target Portal List. The portal is either an IP or
            ip_addr:port if the port is other than default (typically TCP ports 860 and
            3260).
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false.
            </param>
            <param name="secretRef">
            secretRef is the CHAP Secret for iSCSI target and initiator authentication
            </param>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.ChapAuthDiscovery">
            <summary>
            chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.ChapAuthSession">
            <summary>
            chapAuthSession defines whether support iSCSI Session CHAP authentication
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.FsType">
            <summary>
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.InitiatorName">
            <summary>
            initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified
            with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume
            name&gt; will be created for the connection.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.Iqn">
            <summary>
            iqn is the target iSCSI Qualified Name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.IscsiInterface">
            <summary>
            iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to
            &apos;default&apos; (tcp).
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.Lun">
            <summary>
            lun represents iSCSI Target Lun number.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.Portals">
            <summary>
            portals is the iSCSI Target Portal List. The portal is either an IP or
            ip_addr:port if the port is other than default (typically TCP ports 860 and
            3260).
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.SecretRef">
            <summary>
            secretRef is the CHAP Secret for iSCSI target and initiator authentication
            </summary>
        </member>
        <member name="P:k8s.Models.V1ISCSIVolumeSource.TargetPortal">
            <summary>
            targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port
            if the port is other than default (typically TCP ports 860 and 3260).
            </summary>
        </member>
        <member name="M:k8s.Models.V1ISCSIVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1KeyToPath">
            <summary>
            Maps a string key to a path within a volume.
            </summary>
        </member>
        <member name="M:k8s.Models.V1KeyToPath.#ctor">
            <summary>
            Initializes a new instance of the V1KeyToPath class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1KeyToPath.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1KeyToPath class.
            </summary>
            <param name="key">
            key is the key to project.
            </param>
            <param name="path">
            path is the relative path of the file to map the key to. May not be an absolute
            path. May not contain the path element &apos;..&apos;. May not start with the string &apos;..&apos;.
            </param>
            <param name="mode">
            mode is Optional: mode bits used to set permissions on this file. Must be an
            octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML
            accepts both octal and decimal values, JSON requires decimal values for mode
            bits. If not specified, the volume defaultMode will be used. This might be in
            conflict with other options that affect the file mode, like fsGroup, and the
            result can be other mode bits set.
            </param>
        </member>
        <member name="P:k8s.Models.V1KeyToPath.Key">
            <summary>
            key is the key to project.
            </summary>
        </member>
        <member name="P:k8s.Models.V1KeyToPath.Mode">
            <summary>
            mode is Optional: mode bits used to set permissions on this file. Must be an
            octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML
            accepts both octal and decimal values, JSON requires decimal values for mode
            bits. If not specified, the volume defaultMode will be used. This might be in
            conflict with other options that affect the file mode, like fsGroup, and the
            result can be other mode bits set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1KeyToPath.Path">
            <summary>
            path is the relative path of the file to map the key to. May not be an absolute
            path. May not contain the path element &apos;..&apos;. May not start with the string &apos;..&apos;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1KeyToPath.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Lifecycle">
            <summary>
            Lifecycle describes actions that the management system should take in response
            to container lifecycle events. For the PostStart and PreStop lifecycle handlers,
            management of the container blocks until the action is complete, unless the
            container process fails, in which case the handler is aborted.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Lifecycle.#ctor">
            <summary>
            Initializes a new instance of the V1Lifecycle class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Lifecycle.#ctor(k8s.Models.V1LifecycleHandler,k8s.Models.V1LifecycleHandler)">
            <summary>
            Initializes a new instance of the V1Lifecycle class.
            </summary>
            <param name="postStart">
            PostStart is called immediately after a container is created. If the handler
            fails, the container is terminated and restarted according to its restart
            policy. Other management of the container blocks until the hook completes. More
            info:
            https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
            </param>
            <param name="preStop">
            PreStop is called immediately before a container is terminated due to an API
            request or management event such as liveness/startup probe failure, preemption,
            resource contention, etc. The handler is not called if the container crashes or
            exits. The Pod&apos;s termination grace period countdown begins before the PreStop
            hook is executed. Regardless of the outcome of the handler, the container will
            eventually terminate within the Pod&apos;s termination grace period (unless delayed
            by finalizers). Other management of the container blocks until the hook
            completes or until the termination grace period is reached. More info:
            https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
            </param>
        </member>
        <member name="P:k8s.Models.V1Lifecycle.PostStart">
            <summary>
            PostStart is called immediately after a container is created. If the handler
            fails, the container is terminated and restarted according to its restart
            policy. Other management of the container blocks until the hook completes. More
            info:
            https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
            </summary>
        </member>
        <member name="P:k8s.Models.V1Lifecycle.PreStop">
            <summary>
            PreStop is called immediately before a container is terminated due to an API
            request or management event such as liveness/startup probe failure, preemption,
            resource contention, etc. The handler is not called if the container crashes or
            exits. The Pod&apos;s termination grace period countdown begins before the PreStop
            hook is executed. Regardless of the outcome of the handler, the container will
            eventually terminate within the Pod&apos;s termination grace period (unless delayed
            by finalizers). Other management of the container blocks until the hook
            completes or until the termination grace period is reached. More info:
            https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
            </summary>
        </member>
        <member name="M:k8s.Models.V1Lifecycle.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LifecycleHandler">
            <summary>
            LifecycleHandler defines a specific action that should be taken in a lifecycle
            hook. One and only one of the fields, except TCPSocket must be specified.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LifecycleHandler.#ctor">
            <summary>
            Initializes a new instance of the V1LifecycleHandler class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LifecycleHandler.#ctor(k8s.Models.V1ExecAction,k8s.Models.V1HTTPGetAction,k8s.Models.V1TCPSocketAction)">
            <summary>
            Initializes a new instance of the V1LifecycleHandler class.
            </summary>
            <param name="exec">
            Exec specifies the action to take.
            </param>
            <param name="httpGet">
            HTTPGet specifies the http request to perform.
            </param>
            <param name="tcpSocket">
            Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the
            backward compatibility. There are no validation of this field and lifecycle
            hooks will fail in runtime when tcp handler is specified.
            </param>
        </member>
        <member name="P:k8s.Models.V1LifecycleHandler.Exec">
            <summary>
            Exec specifies the action to take.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LifecycleHandler.HttpGet">
            <summary>
            HTTPGet specifies the http request to perform.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LifecycleHandler.TcpSocket">
            <summary>
            Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the
            backward compatibility. There are no validation of this field and lifecycle
            hooks will fail in runtime when tcp handler is specified.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LifecycleHandler.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LimitRange">
            <summary>
            LimitRange sets resource usage limits for each kind of resource in a Namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRange.#ctor">
            <summary>
            Initializes a new instance of the V1LimitRange class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRange.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1LimitRangeSpec)">
            <summary>
            Initializes a new instance of the V1LimitRange class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the limits enforced. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1LimitRange.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRange.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRange.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRange.Spec">
            <summary>
            Spec defines the limits enforced. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRange.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LimitRangeItem">
            <summary>
            LimitRangeItem defines a min/max usage limit for any resource that matches on
            kind.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeItem.#ctor">
            <summary>
            Initializes a new instance of the V1LimitRangeItem class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeItem.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity})">
            <summary>
            Initializes a new instance of the V1LimitRangeItem class.
            </summary>
            <param name="type">
            Type of resource that this limit applies to.
            </param>
            <param name="defaultProperty">
            Default resource requirement limit value by resource name if resource limit is
            omitted.
            </param>
            <param name="defaultRequest">
            DefaultRequest is the default resource requirement request value by resource
            name if resource request is omitted.
            </param>
            <param name="max">
            Max usage constraints on this kind by resource name.
            </param>
            <param name="maxLimitRequestRatio">
            MaxLimitRequestRatio if specified, the named resource must have a request and
            limit that are both non-zero where limit divided by request is less than or
            equal to the enumerated value; this represents the max burst for the named
            resource.
            </param>
            <param name="min">
            Min usage constraints on this kind by resource name.
            </param>
        </member>
        <member name="P:k8s.Models.V1LimitRangeItem.DefaultProperty">
            <summary>
            Default resource requirement limit value by resource name if resource limit is
            omitted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeItem.DefaultRequest">
            <summary>
            DefaultRequest is the default resource requirement request value by resource
            name if resource request is omitted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeItem.Max">
            <summary>
            Max usage constraints on this kind by resource name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeItem.MaxLimitRequestRatio">
            <summary>
            MaxLimitRequestRatio if specified, the named resource must have a request and
            limit that are both non-zero where limit divided by request is less than or
            equal to the enumerated value; this represents the max burst for the named
            resource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeItem.Min">
            <summary>
            Min usage constraints on this kind by resource name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeItem.Type">
            <summary>
            Type of resource that this limit applies to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeItem.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LimitRangeList">
            <summary>
            LimitRangeList is a list of LimitRange items.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeList.#ctor">
            <summary>
            Initializes a new instance of the V1LimitRangeList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeList.#ctor(System.Collections.Generic.IList{k8s.Models.V1LimitRange},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1LimitRangeList class.
            </summary>
            <param name="items">
            Items is a list of LimitRange objects. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1LimitRangeList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeList.Items">
            <summary>
            Items is a list of LimitRange objects. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1LimitRangeList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LimitRangeSpec">
            <summary>
            LimitRangeSpec defines a min/max usage limit for resources that match on kind.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeSpec.#ctor">
            <summary>
            Initializes a new instance of the V1LimitRangeSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeSpec.#ctor(System.Collections.Generic.IList{k8s.Models.V1LimitRangeItem})">
            <summary>
            Initializes a new instance of the V1LimitRangeSpec class.
            </summary>
            <param name="limits">
            Limits is the list of LimitRangeItem objects that are enforced.
            </param>
        </member>
        <member name="P:k8s.Models.V1LimitRangeSpec.Limits">
            <summary>
            Limits is the list of LimitRangeItem objects that are enforced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LimitRangeSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LoadBalancerIngress">
            <summary>
            LoadBalancerIngress represents the status of a load-balancer ingress point:
            traffic intended for the service should be sent to an ingress point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LoadBalancerIngress.#ctor">
            <summary>
            Initializes a new instance of the V1LoadBalancerIngress class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LoadBalancerIngress.#ctor(System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1PortStatus})">
            <summary>
            Initializes a new instance of the V1LoadBalancerIngress class.
            </summary>
            <param name="hostname">
            Hostname is set for load-balancer ingress points that are DNS based (typically
            AWS load-balancers)
            </param>
            <param name="ip">
            IP is set for load-balancer ingress points that are IP based (typically GCE or
            OpenStack load-balancers)
            </param>
            <param name="ports">
            Ports is a list of records of service ports If used, every port defined in the
            service should have an entry in it
            </param>
        </member>
        <member name="P:k8s.Models.V1LoadBalancerIngress.Hostname">
            <summary>
            Hostname is set for load-balancer ingress points that are DNS based (typically
            AWS load-balancers)
            </summary>
        </member>
        <member name="P:k8s.Models.V1LoadBalancerIngress.Ip">
            <summary>
            IP is set for load-balancer ingress points that are IP based (typically GCE or
            OpenStack load-balancers)
            </summary>
        </member>
        <member name="P:k8s.Models.V1LoadBalancerIngress.Ports">
            <summary>
            Ports is a list of records of service ports If used, every port defined in the
            service should have an entry in it
            </summary>
        </member>
        <member name="M:k8s.Models.V1LoadBalancerIngress.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LoadBalancerStatus">
            <summary>
            LoadBalancerStatus represents the status of a load-balancer.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LoadBalancerStatus.#ctor">
            <summary>
            Initializes a new instance of the V1LoadBalancerStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LoadBalancerStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1LoadBalancerIngress})">
            <summary>
            Initializes a new instance of the V1LoadBalancerStatus class.
            </summary>
            <param name="ingress">
            Ingress is a list containing ingress points for the load-balancer. Traffic
            intended for the service should be sent to these ingress points.
            </param>
        </member>
        <member name="P:k8s.Models.V1LoadBalancerStatus.Ingress">
            <summary>
            Ingress is a list containing ingress points for the load-balancer. Traffic
            intended for the service should be sent to these ingress points.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LoadBalancerStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LocalObjectReference">
            <summary>
            LocalObjectReference contains enough information to let you locate the
            referenced object inside the same namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalObjectReference.#ctor">
            <summary>
            Initializes a new instance of the V1LocalObjectReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalObjectReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1LocalObjectReference class.
            </summary>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
        </member>
        <member name="P:k8s.Models.V1LocalObjectReference.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalObjectReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LocalVolumeSource">
            <summary>
            Local represents directly-attached storage with node affinity (Beta feature)
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1LocalVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalVolumeSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1LocalVolumeSource class.
            </summary>
            <param name="path">
            path of the full path to the volume on the node. It can be either a directory or
            block device (disk, partition, ...).
            </param>
            <param name="fsType">
            fsType is the filesystem type to mount. It applies only when the Path is a block
            device. Must be a filesystem type supported by the host operating system. Ex.
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. The default value is to auto-select a filesystem if
            unspecified.
            </param>
        </member>
        <member name="P:k8s.Models.V1LocalVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. It applies only when the Path is a block
            device. Must be a filesystem type supported by the host operating system. Ex.
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. The default value is to auto-select a filesystem if
            unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LocalVolumeSource.Path">
            <summary>
            path of the full path to the volume on the node. It can be either a directory or
            block device (disk, partition, ...).
            </summary>
        </member>
        <member name="M:k8s.Models.V1LocalVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NFSVolumeSource">
            <summary>
            Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not
            support ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NFSVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1NFSVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NFSVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1NFSVolumeSource class.
            </summary>
            <param name="path">
            path that is exported by the NFS server. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </param>
            <param name="server">
            server is the hostname or IP address of the NFS server. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the NFS export to be mounted with read-only
            permissions. Defaults to false. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </param>
        </member>
        <member name="P:k8s.Models.V1NFSVolumeSource.Path">
            <summary>
            path that is exported by the NFS server. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </summary>
        </member>
        <member name="P:k8s.Models.V1NFSVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the NFS export to be mounted with read-only
            permissions. Defaults to false. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </summary>
        </member>
        <member name="P:k8s.Models.V1NFSVolumeSource.Server">
            <summary>
            server is the hostname or IP address of the NFS server. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </summary>
        </member>
        <member name="M:k8s.Models.V1NFSVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Namespace">
            <summary>
            Namespace provides a scope for Names. Use of multiple namespaces is optional.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Namespace.#ctor">
            <summary>
            Initializes a new instance of the V1Namespace class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Namespace.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1NamespaceSpec,k8s.Models.V1NamespaceStatus)">
            <summary>
            Initializes a new instance of the V1Namespace class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the behavior of the Namespace. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Status describes the current status of a Namespace. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Namespace.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Namespace.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Namespace.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Namespace.Spec">
            <summary>
            Spec defines the behavior of the Namespace. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1Namespace.Status">
            <summary>
            Status describes the current status of a Namespace. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Namespace.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NamespaceCondition">
            <summary>
            NamespaceCondition contains details about state of namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceCondition.#ctor">
            <summary>
            Initializes a new instance of the V1NamespaceCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1NamespaceCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of namespace controller condition.
            </param>
            <param name="lastTransitionTime">
            Time is a wrapper around time.Time which supports correct marshaling to YAML and
            JSON.  Wrappers are provided for many of the factory methods that the time
            package offers.
            </param>
            <param name="message">
            
            </param>
            <param name="reason">
            
            </param>
        </member>
        <member name="P:k8s.Models.V1NamespaceCondition.LastTransitionTime">
            <summary>
            Time is a wrapper around time.Time which supports correct marshaling to YAML and
            JSON.  Wrappers are provided for many of the factory methods that the time
            package offers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceCondition.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceCondition.Reason">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceCondition.Type">
            <summary>
            Type of namespace controller condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NamespaceList">
            <summary>
            NamespaceList is a list of Namespaces.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceList.#ctor">
            <summary>
            Initializes a new instance of the V1NamespaceList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Namespace},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1NamespaceList class.
            </summary>
            <param name="items">
            Items is the list of Namespace objects in the list. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1NamespaceList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceList.Items">
            <summary>
            Items is the list of Namespace objects in the list. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NamespaceSpec">
            <summary>
            NamespaceSpec describes the attributes on a Namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceSpec.#ctor">
            <summary>
            Initializes a new instance of the V1NamespaceSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceSpec.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1NamespaceSpec class.
            </summary>
            <param name="finalizers">
            Finalizers is an opaque list of values that must be empty to permanently remove
            object from storage. More info:
            https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
            </param>
        </member>
        <member name="P:k8s.Models.V1NamespaceSpec.Finalizers">
            <summary>
            Finalizers is an opaque list of values that must be empty to permanently remove
            object from storage. More info:
            https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NamespaceStatus">
            <summary>
            NamespaceStatus is information about the current status of a Namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceStatus.#ctor">
            <summary>
            Initializes a new instance of the V1NamespaceStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1NamespaceCondition},System.String)">
            <summary>
            Initializes a new instance of the V1NamespaceStatus class.
            </summary>
            <param name="conditions">
            Represents the latest available observations of a namespace&apos;s current state.
            </param>
            <param name="phase">
            Phase is the current lifecycle phase of the namespace. More info:
            https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
            </param>
        </member>
        <member name="P:k8s.Models.V1NamespaceStatus.Conditions">
            <summary>
            Represents the latest available observations of a namespace&apos;s current state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NamespaceStatus.Phase">
            <summary>
            Phase is the current lifecycle phase of the namespace. More info:
            https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
            </summary>
        </member>
        <member name="M:k8s.Models.V1NamespaceStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Node">
            <summary>
            Node is a worker node in Kubernetes. Each node will have a unique identifier in
            the cache (i.e. in etcd).
            </summary>
        </member>
        <member name="M:k8s.Models.V1Node.#ctor">
            <summary>
            Initializes a new instance of the V1Node class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Node.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1NodeSpec,k8s.Models.V1NodeStatus)">
            <summary>
            Initializes a new instance of the V1Node class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the behavior of a node.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Most recently observed status of the node. Populated by the system. Read-only.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Node.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Node.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Node.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Node.Spec">
            <summary>
            Spec defines the behavior of a node.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1Node.Status">
            <summary>
            Most recently observed status of the node. Populated by the system. Read-only.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Node.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeAddress">
            <summary>
            NodeAddress contains information for the node&apos;s address.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeAddress.#ctor">
            <summary>
            Initializes a new instance of the V1NodeAddress class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1NodeAddress class.
            </summary>
            <param name="address">
            The node address.
            </param>
            <param name="type">
            Node address type, one of Hostname, ExternalIP or InternalIP.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeAddress.Address">
            <summary>
            The node address.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeAddress.Type">
            <summary>
            Node address type, one of Hostname, ExternalIP or InternalIP.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeAddress.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeAffinity">
            <summary>
            Node affinity is a group of node affinity scheduling rules.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeAffinity.#ctor">
            <summary>
            Initializes a new instance of the V1NodeAffinity class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeAffinity.#ctor(System.Collections.Generic.IList{k8s.Models.V1PreferredSchedulingTerm},k8s.Models.V1NodeSelector)">
            <summary>
            Initializes a new instance of the V1NodeAffinity class.
            </summary>
            <param name="preferredDuringSchedulingIgnoredDuringExecution">
            The scheduler will prefer to schedule pods to nodes that satisfy the affinity
            expressions specified by this field, but it may choose a node that violates one
            or more of the expressions. The node that is most preferred is the one with the
            greatest sum of weights, i.e. for each node that meets all of the scheduling
            requirements (resource request, requiredDuringScheduling affinity expressions,
            etc.), compute a sum by iterating through the elements of this field and adding
            &quot;weight&quot; to the sum if the node matches the corresponding matchExpressions; the
            node(s) with the highest sum are the most preferred.
            </param>
            <param name="requiredDuringSchedulingIgnoredDuringExecution">
            If the affinity requirements specified by this field are not met at scheduling
            time, the pod will not be scheduled onto the node. If the affinity requirements
            specified by this field cease to be met at some point during pod execution (e.g.
            due to an update), the system may or may not try to eventually evict the pod
            from its node.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution">
            <summary>
            The scheduler will prefer to schedule pods to nodes that satisfy the affinity
            expressions specified by this field, but it may choose a node that violates one
            or more of the expressions. The node that is most preferred is the one with the
            greatest sum of weights, i.e. for each node that meets all of the scheduling
            requirements (resource request, requiredDuringScheduling affinity expressions,
            etc.), compute a sum by iterating through the elements of this field and adding
            &quot;weight&quot; to the sum if the node matches the corresponding matchExpressions; the
            node(s) with the highest sum are the most preferred.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution">
            <summary>
            If the affinity requirements specified by this field are not met at scheduling
            time, the pod will not be scheduled onto the node. If the affinity requirements
            specified by this field cease to be met at some point during pod execution (e.g.
            due to an update), the system may or may not try to eventually evict the pod
            from its node.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeAffinity.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeCondition">
            <summary>
            NodeCondition contains condition information for a node.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeCondition.#ctor">
            <summary>
            Initializes a new instance of the V1NodeCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1NodeCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of node condition.
            </param>
            <param name="lastHeartbeatTime">
            Last time we got an update on a given condition.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transit from one status to another.
            </param>
            <param name="message">
            Human readable message indicating details about last transition.
            </param>
            <param name="reason">
            (brief) reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeCondition.LastHeartbeatTime">
            <summary>
            Last time we got an update on a given condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeCondition.LastTransitionTime">
            <summary>
            Last time the condition transit from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeCondition.Message">
            <summary>
            Human readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeCondition.Reason">
            <summary>
            (brief) reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeCondition.Type">
            <summary>
            Type of node condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeConfigSource">
            <summary>
            NodeConfigSource specifies a source of node configuration. Exactly one subfield
            (excluding metadata) must be non-nil. This API is deprecated since 1.22
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeConfigSource.#ctor">
            <summary>
            Initializes a new instance of the V1NodeConfigSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeConfigSource.#ctor(k8s.Models.V1ConfigMapNodeConfigSource)">
            <summary>
            Initializes a new instance of the V1NodeConfigSource class.
            </summary>
            <param name="configMap">
            ConfigMap is a reference to a Node&apos;s ConfigMap
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeConfigSource.ConfigMap">
            <summary>
            ConfigMap is a reference to a Node&apos;s ConfigMap
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeConfigSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeConfigStatus">
            <summary>
            NodeConfigStatus describes the status of the config assigned by
            Node.Spec.ConfigSource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeConfigStatus.#ctor">
            <summary>
            Initializes a new instance of the V1NodeConfigStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeConfigStatus.#ctor(k8s.Models.V1NodeConfigSource,k8s.Models.V1NodeConfigSource,System.String,k8s.Models.V1NodeConfigSource)">
            <summary>
            Initializes a new instance of the V1NodeConfigStatus class.
            </summary>
            <param name="active">
            Active reports the checkpointed config the node is actively using. Active will
            represent either the current version of the Assigned config, or the current
            LastKnownGood config, depending on whether attempting to use the Assigned config
            results in an error.
            </param>
            <param name="assigned">
            Assigned reports the checkpointed config the node will try to use. When
            Node.Spec.ConfigSource is updated, the node checkpoints the associated config
            payload to local disk, along with a record indicating intended config. The node
            refers to this record to choose its config checkpoint, and reports this record
            in Assigned. Assigned only updates in the status after the record has been
            checkpointed to disk. When the Kubelet is restarted, it tries to make the
            Assigned config the Active config by loading and validating the checkpointed
            payload identified by Assigned.
            </param>
            <param name="error">
            Error describes any problems reconciling the Spec.ConfigSource to the Active
            config. Errors may occur, for example, attempting to checkpoint
            Spec.ConfigSource to the local Assigned record, attempting to checkpoint the
            payload associated with Spec.ConfigSource, attempting to load or validate the
            Assigned config, etc. Errors may occur at different points while syncing config.
            Earlier errors (e.g. download or checkpointing errors) will not result in a
            rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors
            (e.g. loading or validating a checkpointed config) will result in a rollback to
            LastKnownGood. In the latter case, it is usually possible to resolve the error
            by fixing the config assigned in Spec.ConfigSource. You can find additional
            information for debugging by searching the error message in the Kubelet log.
            Error is a human-readable description of the error state; machines can check
            whether or not Error is empty, but should not rely on the stability of the Error
            text across Kubelet versions.
            </param>
            <param name="lastKnownGood">
            LastKnownGood reports the checkpointed config the node will fall back to when it
            encounters an error attempting to use the Assigned config. The Assigned config
            becomes the LastKnownGood config when the node determines that the Assigned
            config is stable and correct. This is currently implemented as a 10-minute soak
            period starting when the local record of Assigned config is updated. If the
            Assigned config is Active at the end of this period, it becomes the
            LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local
            defaults), the LastKnownGood is also immediately reset to nil, because the local
            default config is always assumed good. You should not make assumptions about the
            node&apos;s method of determining config stability and correctness, as this may
            change or become configurable in the future.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeConfigStatus.Active">
            <summary>
            Active reports the checkpointed config the node is actively using. Active will
            represent either the current version of the Assigned config, or the current
            LastKnownGood config, depending on whether attempting to use the Assigned config
            results in an error.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeConfigStatus.Assigned">
            <summary>
            Assigned reports the checkpointed config the node will try to use. When
            Node.Spec.ConfigSource is updated, the node checkpoints the associated config
            payload to local disk, along with a record indicating intended config. The node
            refers to this record to choose its config checkpoint, and reports this record
            in Assigned. Assigned only updates in the status after the record has been
            checkpointed to disk. When the Kubelet is restarted, it tries to make the
            Assigned config the Active config by loading and validating the checkpointed
            payload identified by Assigned.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeConfigStatus.Error">
            <summary>
            Error describes any problems reconciling the Spec.ConfigSource to the Active
            config. Errors may occur, for example, attempting to checkpoint
            Spec.ConfigSource to the local Assigned record, attempting to checkpoint the
            payload associated with Spec.ConfigSource, attempting to load or validate the
            Assigned config, etc. Errors may occur at different points while syncing config.
            Earlier errors (e.g. download or checkpointing errors) will not result in a
            rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors
            (e.g. loading or validating a checkpointed config) will result in a rollback to
            LastKnownGood. In the latter case, it is usually possible to resolve the error
            by fixing the config assigned in Spec.ConfigSource. You can find additional
            information for debugging by searching the error message in the Kubelet log.
            Error is a human-readable description of the error state; machines can check
            whether or not Error is empty, but should not rely on the stability of the Error
            text across Kubelet versions.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeConfigStatus.LastKnownGood">
            <summary>
            LastKnownGood reports the checkpointed config the node will fall back to when it
            encounters an error attempting to use the Assigned config. The Assigned config
            becomes the LastKnownGood config when the node determines that the Assigned
            config is stable and correct. This is currently implemented as a 10-minute soak
            period starting when the local record of Assigned config is updated. If the
            Assigned config is Active at the end of this period, it becomes the
            LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local
            defaults), the LastKnownGood is also immediately reset to nil, because the local
            default config is always assumed good. You should not make assumptions about the
            node&apos;s method of determining config stability and correctness, as this may
            change or become configurable in the future.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeConfigStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeDaemonEndpoints">
            <summary>
            NodeDaemonEndpoints lists ports opened by daemons running on the Node.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeDaemonEndpoints.#ctor">
            <summary>
            Initializes a new instance of the V1NodeDaemonEndpoints class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeDaemonEndpoints.#ctor(k8s.Models.V1DaemonEndpoint)">
            <summary>
            Initializes a new instance of the V1NodeDaemonEndpoints class.
            </summary>
            <param name="kubeletEndpoint">
            Endpoint on which Kubelet is listening.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeDaemonEndpoints.KubeletEndpoint">
            <summary>
            Endpoint on which Kubelet is listening.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeDaemonEndpoints.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeList">
            <summary>
            NodeList is the whole list of all Nodes which have been registered with master.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeList.#ctor">
            <summary>
            Initializes a new instance of the V1NodeList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Node},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1NodeList class.
            </summary>
            <param name="items">
            List of nodes
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeList.Items">
            <summary>
            List of nodes
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeSelector">
            <summary>
            A node selector represents the union of the results of one or more label queries
            over a set of nodes; that is, it represents the OR of the selectors represented
            by the node selector terms.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelector.#ctor">
            <summary>
            Initializes a new instance of the V1NodeSelector class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelector.#ctor(System.Collections.Generic.IList{k8s.Models.V1NodeSelectorTerm})">
            <summary>
            Initializes a new instance of the V1NodeSelector class.
            </summary>
            <param name="nodeSelectorTerms">
            Required. A list of node selector terms. The terms are ORed.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeSelector.NodeSelectorTerms">
            <summary>
            Required. A list of node selector terms. The terms are ORed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelector.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeSelectorRequirement">
            <summary>
            A node selector requirement is a selector that contains values, a key, and an
            operator that relates the key and values.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelectorRequirement.#ctor">
            <summary>
            Initializes a new instance of the V1NodeSelectorRequirement class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelectorRequirement.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1NodeSelectorRequirement class.
            </summary>
            <param name="key">
            The label key that the selector applies to.
            </param>
            <param name="operatorProperty">
            Represents a key&apos;s relationship to a set of values. Valid operators are In,
            NotIn, Exists, DoesNotExist. Gt, and Lt.
            </param>
            <param name="values">
            An array of string values. If the operator is In or NotIn, the values array must
            be non-empty. If the operator is Exists or DoesNotExist, the values array must
            be empty. If the operator is Gt or Lt, the values array must have a single
            element, which will be interpreted as an integer. This array is replaced during
            a strategic merge patch.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeSelectorRequirement.Key">
            <summary>
            The label key that the selector applies to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSelectorRequirement.OperatorProperty">
            <summary>
            Represents a key&apos;s relationship to a set of values. Valid operators are In,
            NotIn, Exists, DoesNotExist. Gt, and Lt.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSelectorRequirement.Values">
            <summary>
            An array of string values. If the operator is In or NotIn, the values array must
            be non-empty. If the operator is Exists or DoesNotExist, the values array must
            be empty. If the operator is Gt or Lt, the values array must have a single
            element, which will be interpreted as an integer. This array is replaced during
            a strategic merge patch.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelectorRequirement.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeSelectorTerm">
            <summary>
            A null or empty node selector term matches no objects. The requirements of them
            are ANDed. The TopologySelectorTerm type implements a subset of the
            NodeSelectorTerm.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelectorTerm.#ctor">
            <summary>
            Initializes a new instance of the V1NodeSelectorTerm class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelectorTerm.#ctor(System.Collections.Generic.IList{k8s.Models.V1NodeSelectorRequirement},System.Collections.Generic.IList{k8s.Models.V1NodeSelectorRequirement})">
            <summary>
            Initializes a new instance of the V1NodeSelectorTerm class.
            </summary>
            <param name="matchExpressions">
            A list of node selector requirements by node&apos;s labels.
            </param>
            <param name="matchFields">
            A list of node selector requirements by node&apos;s fields.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeSelectorTerm.MatchExpressions">
            <summary>
            A list of node selector requirements by node&apos;s labels.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSelectorTerm.MatchFields">
            <summary>
            A list of node selector requirements by node&apos;s fields.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSelectorTerm.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeSpec">
            <summary>
            NodeSpec describes the attributes that a node is created with.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSpec.#ctor">
            <summary>
            Initializes a new instance of the V1NodeSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSpec.#ctor(k8s.Models.V1NodeConfigSource,System.String,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{k8s.Models.V1Taint},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1NodeSpec class.
            </summary>
            <param name="configSource">
            Deprecated: Previously used to specify the source of the node&apos;s configuration
            for the DynamicKubeletConfig feature. This feature is removed.
            </param>
            <param name="externalID">
            Deprecated. Not all kubelets will set this field. Remove field after 1.13. see:
            https://issues.k8s.io/61966
            </param>
            <param name="podCIDR">
            PodCIDR represents the pod IP range assigned to the node.
            </param>
            <param name="podCIDRs">
            podCIDRs represents the IP ranges assigned to the node for usage by Pods on that
            node. If this field is specified, the 0th entry must match the podCIDR field. It
            may contain at most 1 value for each of IPv4 and IPv6.
            </param>
            <param name="providerID">
            ID of the node assigned by the cloud provider in the format:
            &lt;ProviderName&gt;://&lt;ProviderSpecificNodeID&gt;
            </param>
            <param name="taints">
            If specified, the node&apos;s taints.
            </param>
            <param name="unschedulable">
            Unschedulable controls node schedulability of new pods. By default, node is
            schedulable. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeSpec.ConfigSource">
            <summary>
            Deprecated: Previously used to specify the source of the node&apos;s configuration
            for the DynamicKubeletConfig feature. This feature is removed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSpec.ExternalID">
            <summary>
            Deprecated. Not all kubelets will set this field. Remove field after 1.13. see:
            https://issues.k8s.io/61966
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSpec.PodCIDR">
            <summary>
            PodCIDR represents the pod IP range assigned to the node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSpec.PodCIDRs">
            <summary>
            podCIDRs represents the IP ranges assigned to the node for usage by Pods on that
            node. If this field is specified, the 0th entry must match the podCIDR field. It
            may contain at most 1 value for each of IPv4 and IPv6.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSpec.ProviderID">
            <summary>
            ID of the node assigned by the cloud provider in the format:
            &lt;ProviderName&gt;://&lt;ProviderSpecificNodeID&gt;
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSpec.Taints">
            <summary>
            If specified, the node&apos;s taints.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSpec.Unschedulable">
            <summary>
            Unschedulable controls node schedulability of new pods. By default, node is
            schedulable. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeStatus">
            <summary>
            NodeStatus is information about the current status of a node.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeStatus.#ctor">
            <summary>
            Initializes a new instance of the V1NodeStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1NodeAddress},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IList{k8s.Models.V1NodeCondition},k8s.Models.V1NodeConfigStatus,k8s.Models.V1NodeDaemonEndpoints,System.Collections.Generic.IList{k8s.Models.V1ContainerImage},k8s.Models.V1NodeSystemInfo,System.String,System.Collections.Generic.IList{k8s.Models.V1AttachedVolume},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1NodeStatus class.
            </summary>
            <param name="addresses">
            List of addresses reachable to the node. Queried from cloud provider, if
            available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
            Note: This field is declared as mergeable, but the merge key is not sufficiently
            unique, which can cause data corruption when it is merged. Callers should
            instead use a full-replacement patch. See https://pr.k8s.io/79391 for an
            example. Consumers should assume that addresses can change during the lifetime
            of a Node. However, there are some exceptions where this may not be possible,
            such as Pods that inherit a Node&apos;s address in its own status or consumers of the
            downward API (status.hostIP).
            </param>
            <param name="allocatable">
            Allocatable represents the resources of a node that are available for
            scheduling. Defaults to Capacity.
            </param>
            <param name="capacity">
            Capacity represents the total resources of a node. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
            </param>
            <param name="conditions">
            Conditions is an array of current observed node conditions. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#condition
            </param>
            <param name="config">
            Status of the config assigned to the node via the dynamic Kubelet config
            feature.
            </param>
            <param name="daemonEndpoints">
            Endpoints of daemons running on the Node.
            </param>
            <param name="images">
            List of container images on this node
            </param>
            <param name="nodeInfo">
            Set of ids/uuids to uniquely identify the node. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#info
            </param>
            <param name="phase">
            NodePhase is the recently observed lifecycle phase of the node. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never
            populated, and now is deprecated.
            </param>
            <param name="volumesAttached">
            List of volumes that are attached to the node.
            </param>
            <param name="volumesInUse">
            List of attachable volumes in use (mounted) by the node.
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.Addresses">
            <summary>
            List of addresses reachable to the node. Queried from cloud provider, if
            available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
            Note: This field is declared as mergeable, but the merge key is not sufficiently
            unique, which can cause data corruption when it is merged. Callers should
            instead use a full-replacement patch. See https://pr.k8s.io/79391 for an
            example. Consumers should assume that addresses can change during the lifetime
            of a Node. However, there are some exceptions where this may not be possible,
            such as Pods that inherit a Node&apos;s address in its own status or consumers of the
            downward API (status.hostIP).
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.Allocatable">
            <summary>
            Allocatable represents the resources of a node that are available for
            scheduling. Defaults to Capacity.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.Capacity">
            <summary>
            Capacity represents the total resources of a node. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.Conditions">
            <summary>
            Conditions is an array of current observed node conditions. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#condition
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.Config">
            <summary>
            Status of the config assigned to the node via the dynamic Kubelet config
            feature.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.DaemonEndpoints">
            <summary>
            Endpoints of daemons running on the Node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.Images">
            <summary>
            List of container images on this node
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.NodeInfo">
            <summary>
            Set of ids/uuids to uniquely identify the node. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#info
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.Phase">
            <summary>
            NodePhase is the recently observed lifecycle phase of the node. More info:
            https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never
            populated, and now is deprecated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.VolumesAttached">
            <summary>
            List of volumes that are attached to the node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeStatus.VolumesInUse">
            <summary>
            List of attachable volumes in use (mounted) by the node.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NodeSystemInfo">
            <summary>
            NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSystemInfo.#ctor">
            <summary>
            Initializes a new instance of the V1NodeSystemInfo class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSystemInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1NodeSystemInfo class.
            </summary>
            <param name="architecture">
            The Architecture reported by the node
            </param>
            <param name="bootID">
            Boot ID reported by the node.
            </param>
            <param name="containerRuntimeVersion">
            ContainerRuntime Version reported by the node through runtime remote API (e.g.
            containerd://1.4.2).
            </param>
            <param name="kernelVersion">
            Kernel Version reported by the node from &apos;uname -r&apos; (e.g. 3.16.0-0.bpo.4-amd64).
            </param>
            <param name="kubeProxyVersion">
            KubeProxy Version reported by the node.
            </param>
            <param name="kubeletVersion">
            Kubelet Version reported by the node.
            </param>
            <param name="machineID">
            MachineID reported by the node. For unique machine identification in the cluster
            this field is preferred. Learn more from man(5) machine-id:
            http://man7.org/linux/man-pages/man5/machine-id.5.html
            </param>
            <param name="operatingSystem">
            The Operating System reported by the node
            </param>
            <param name="osImage">
            OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7
            (wheezy)).
            </param>
            <param name="systemUUID">
            SystemUUID reported by the node. For unique machine identification MachineID is
            preferred. This field is specific to Red Hat hosts
            https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
            </param>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.Architecture">
            <summary>
            The Architecture reported by the node
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.BootID">
            <summary>
            Boot ID reported by the node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.ContainerRuntimeVersion">
            <summary>
            ContainerRuntime Version reported by the node through runtime remote API (e.g.
            containerd://1.4.2).
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.KernelVersion">
            <summary>
            Kernel Version reported by the node from &apos;uname -r&apos; (e.g. 3.16.0-0.bpo.4-amd64).
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.KubeProxyVersion">
            <summary>
            KubeProxy Version reported by the node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.KubeletVersion">
            <summary>
            Kubelet Version reported by the node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.MachineID">
            <summary>
            MachineID reported by the node. For unique machine identification in the cluster
            this field is preferred. Learn more from man(5) machine-id:
            http://man7.org/linux/man-pages/man5/machine-id.5.html
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.OperatingSystem">
            <summary>
            The Operating System reported by the node
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.OsImage">
            <summary>
            OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7
            (wheezy)).
            </summary>
        </member>
        <member name="P:k8s.Models.V1NodeSystemInfo.SystemUUID">
            <summary>
            SystemUUID reported by the node. For unique machine identification MachineID is
            preferred. This field is specific to Red Hat hosts
            https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
            </summary>
        </member>
        <member name="M:k8s.Models.V1NodeSystemInfo.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ObjectFieldSelector">
            <summary>
            ObjectFieldSelector selects an APIVersioned field of an object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectFieldSelector.#ctor">
            <summary>
            Initializes a new instance of the V1ObjectFieldSelector class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectFieldSelector.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ObjectFieldSelector class.
            </summary>
            <param name="fieldPath">
            Path of the field to select in the specified API version.
            </param>
            <param name="apiVersion">
            Version of the schema the FieldPath is written in terms of, defaults to &quot;v1&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1ObjectFieldSelector.ApiVersion">
            <summary>
            Version of the schema the FieldPath is written in terms of, defaults to &quot;v1&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectFieldSelector.FieldPath">
            <summary>
            Path of the field to select in the specified API version.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectFieldSelector.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ObjectReference">
            <summary>
            ObjectReference contains enough information to let you inspect or modify the
            referred object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectReference.#ctor">
            <summary>
            Initializes a new instance of the V1ObjectReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectReference.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ObjectReference class.
            </summary>
            <param name="apiVersion">
            API version of the referent.
            </param>
            <param name="fieldPath">
            If referring to a piece of an object instead of an entire object, this string
            should contain a valid JSON/Go field access statement, such as
            desiredState.manifest.containers[2]. For example, if the object reference is to
            a container within a pod, this would take on a value like:
            &quot;spec.containers{name}&quot; (where &quot;name&quot; refers to the name of the container that
            triggered the event) or if no container name is specified &quot;spec.containers[2]&quot;
            (container with index 2 in this pod). This syntax is chosen only to have some
            well-defined way of referencing a part of an object.
            </param>
            <param name="kind">
            Kind of the referent. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="namespaceProperty">
            Namespace of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
            </param>
            <param name="resourceVersion">
            Specific resourceVersion to which this reference is made, if any. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            </param>
            <param name="uid">
            UID of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
            </param>
        </member>
        <member name="P:k8s.Models.V1ObjectReference.ApiVersion">
            <summary>
            API version of the referent.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectReference.FieldPath">
            <summary>
            If referring to a piece of an object instead of an entire object, this string
            should contain a valid JSON/Go field access statement, such as
            desiredState.manifest.containers[2]. For example, if the object reference is to
            a container within a pod, this would take on a value like:
            &quot;spec.containers{name}&quot; (where &quot;name&quot; refers to the name of the container that
            triggered the event) or if no container name is specified &quot;spec.containers[2]&quot;
            (container with index 2 in this pod). This syntax is chosen only to have some
            well-defined way of referencing a part of an object.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectReference.Kind">
            <summary>
            Kind of the referent. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectReference.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectReference.NamespaceProperty">
            <summary>
            Namespace of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectReference.ResourceVersion">
            <summary>
            Specific resourceVersion to which this reference is made, if any. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectReference.Uid">
            <summary>
            UID of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolume">
            <summary>
            PersistentVolume (PV) is a storage resource provisioned by an administrator. It
            is analogous to a node. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolume.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolume class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolume.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1PersistentVolumeSpec,k8s.Models.V1PersistentVolumeStatus)">
            <summary>
            Initializes a new instance of the V1PersistentVolume class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec defines a specification of a persistent volume owned by the cluster.
            Provisioned by an administrator. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
            </param>
            <param name="status">
            status represents the current information/status for the persistent volume.
            Populated by the system. Read-only. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolume.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolume.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolume.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolume.Spec">
            <summary>
            spec defines a specification of a persistent volume owned by the cluster.
            Provisioned by an administrator. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolume.Status">
            <summary>
            status represents the current information/status for the persistent volume.
            Populated by the system. Read-only. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolume.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeClaim">
            <summary>
            PersistentVolumeClaim is a user&apos;s request for and claim to a persistent volume
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaim.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaim class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaim.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1PersistentVolumeClaimSpec,k8s.Models.V1PersistentVolumeClaimStatus)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaim class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec defines the desired characteristics of a volume requested by a pod author.
            More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </param>
            <param name="status">
            status represents the current information/status of a persistent volume claim.
            Read-only. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaim.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaim.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaim.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaim.Spec">
            <summary>
            spec defines the desired characteristics of a volume requested by a pod author.
            More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaim.Status">
            <summary>
            status represents the current information/status of a persistent volume claim.
            Read-only. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaim.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeClaimCondition">
            <summary>
            PersistentVolumeClaimCondition contains details about state of pvc
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimCondition.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimCondition class.
            </summary>
            <param name="status">
            
            </param>
            <param name="type">
            
            </param>
            <param name="lastProbeTime">
            lastProbeTime is the time we probed the condition.
            </param>
            <param name="lastTransitionTime">
            lastTransitionTime is the time the condition transitioned from one status to
            another.
            </param>
            <param name="message">
            message is the human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            reason is a unique, this should be a short, machine understandable string that
            gives the reason for condition&apos;s last transition. If it reports &quot;ResizeStarted&quot;
            that means the underlying persistent volume is being resized.
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimCondition.LastProbeTime">
            <summary>
            lastProbeTime is the time we probed the condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimCondition.LastTransitionTime">
            <summary>
            lastTransitionTime is the time the condition transitioned from one status to
            another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimCondition.Message">
            <summary>
            message is the human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimCondition.Reason">
            <summary>
            reason is a unique, this should be a short, machine understandable string that
            gives the reason for condition&apos;s last transition. If it reports &quot;ResizeStarted&quot;
            that means the underlying persistent volume is being resized.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimCondition.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimCondition.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeClaimList">
            <summary>
            PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimList.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimList.#ctor(System.Collections.Generic.IList{k8s.Models.V1PersistentVolumeClaim},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimList class.
            </summary>
            <param name="items">
            items is a list of persistent volume claims. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimList.Items">
            <summary>
            items is a list of persistent volume claims. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeClaimSpec">
            <summary>
            PersistentVolumeClaimSpec describes the common attributes of storage devices and
            allows a Source for provider-specific attributes
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimSpec.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimSpec.#ctor(System.Collections.Generic.IList{System.String},k8s.Models.V1TypedLocalObjectReference,k8s.Models.V1TypedObjectReference,k8s.Models.V1ResourceRequirements,k8s.Models.V1LabelSelector,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimSpec class.
            </summary>
            <param name="accessModes">
            accessModes contains the desired access modes the volume should have. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
            </param>
            <param name="dataSource">
            dataSource field can be used to specify either: * An existing VolumeSnapshot
            object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
            (PersistentVolumeClaim) If the provisioner or an external controller can support
            the specified data source, it will create a new volume based on the contents of
            the specified data source. When the AnyVolumeDataSource feature gate is enabled,
            dataSource contents will be copied to dataSourceRef, and dataSourceRef contents
            will be copied to dataSource when dataSourceRef.namespace is not specified. If
            the namespace is specified, then dataSourceRef will not be copied to dataSource.
            </param>
            <param name="dataSourceRef">
            dataSourceRef specifies the object from which to populate the volume with data,
            if a non-empty volume is desired. This may be any object from a non-empty API
            group (non core object) or a PersistentVolumeClaim object. When this field is
            specified, volume binding will only succeed if the type of the specified object
            matches some installed volume populator or dynamic provisioner. This field will
            replace the functionality of the dataSource field and as such if both fields are
            non-empty, they must have the same value. For backwards compatibility, when
            namespace isn&apos;t specified in dataSourceRef, both fields (dataSource and
            dataSourceRef) will be set to the same value automatically if one of them is
            empty and the other is non-empty. When namespace is specified in dataSourceRef,
            dataSource isn&apos;t set to the same value and must be empty. There are three
            important differences between dataSource and dataSourceRef: * While dataSource
            only allows two specific types of objects, dataSourceRef
            allows any non-core object, as well as PersistentVolumeClaim objects.
            * While dataSource ignores disallowed values (dropping them), dataSourceRef
            preserves all values, and generates an error if a disallowed value is
            specified.
            * While dataSource only allows local objects, dataSourceRef allows objects
            in any namespaces.
            (Beta) Using this field requires the AnyVolumeDataSource feature gate to be
            enabled. (Alpha) Using the namespace field of dataSourceRef requires the
            CrossNamespaceVolumeDataSource feature gate to be enabled.
            </param>
            <param name="resources">
            resources represents the minimum resources the volume should have. If
            RecoverVolumeExpansionFailure feature is enabled users are allowed to specify
            resource requirements that are lower than previous value but must still be
            higher than capacity recorded in the status field of the claim. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
            </param>
            <param name="selector">
            selector is a label query over volumes to consider for binding.
            </param>
            <param name="storageClassName">
            storageClassName is the name of the StorageClass required by the claim. More
            info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
            </param>
            <param name="volumeMode">
            volumeMode defines what type of volume is required by the claim. Value of
            Filesystem is implied when not included in claim spec.
            </param>
            <param name="volumeName">
            volumeName is the binding reference to the PersistentVolume backing this claim.
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.AccessModes">
            <summary>
            accessModes contains the desired access modes the volume should have. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.DataSource">
            <summary>
            dataSource field can be used to specify either: * An existing VolumeSnapshot
            object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
            (PersistentVolumeClaim) If the provisioner or an external controller can support
            the specified data source, it will create a new volume based on the contents of
            the specified data source. When the AnyVolumeDataSource feature gate is enabled,
            dataSource contents will be copied to dataSourceRef, and dataSourceRef contents
            will be copied to dataSource when dataSourceRef.namespace is not specified. If
            the namespace is specified, then dataSourceRef will not be copied to dataSource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.DataSourceRef">
            <summary>
            dataSourceRef specifies the object from which to populate the volume with data,
            if a non-empty volume is desired. This may be any object from a non-empty API
            group (non core object) or a PersistentVolumeClaim object. When this field is
            specified, volume binding will only succeed if the type of the specified object
            matches some installed volume populator or dynamic provisioner. This field will
            replace the functionality of the dataSource field and as such if both fields are
            non-empty, they must have the same value. For backwards compatibility, when
            namespace isn&apos;t specified in dataSourceRef, both fields (dataSource and
            dataSourceRef) will be set to the same value automatically if one of them is
            empty and the other is non-empty. When namespace is specified in dataSourceRef,
            dataSource isn&apos;t set to the same value and must be empty. There are three
            important differences between dataSource and dataSourceRef: * While dataSource
            only allows two specific types of objects, dataSourceRef
            allows any non-core object, as well as PersistentVolumeClaim objects.
            * While dataSource ignores disallowed values (dropping them), dataSourceRef
            preserves all values, and generates an error if a disallowed value is
            specified.
            * While dataSource only allows local objects, dataSourceRef allows objects
            in any namespaces.
            (Beta) Using this field requires the AnyVolumeDataSource feature gate to be
            enabled. (Alpha) Using the namespace field of dataSourceRef requires the
            CrossNamespaceVolumeDataSource feature gate to be enabled.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.Resources">
            <summary>
            resources represents the minimum resources the volume should have. If
            RecoverVolumeExpansionFailure feature is enabled users are allowed to specify
            resource requirements that are lower than previous value but must still be
            higher than capacity recorded in the status field of the claim. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.Selector">
            <summary>
            selector is a label query over volumes to consider for binding.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.StorageClassName">
            <summary>
            storageClassName is the name of the StorageClass required by the claim. More
            info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.VolumeMode">
            <summary>
            volumeMode defines what type of volume is required by the claim. Value of
            Filesystem is implied when not included in claim spec.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimSpec.VolumeName">
            <summary>
            volumeName is the binding reference to the PersistentVolume backing this claim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeClaimStatus">
            <summary>
            PersistentVolumeClaimStatus is the current status of a persistent volume claim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimStatus.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimStatus.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IList{k8s.Models.V1PersistentVolumeClaimCondition},System.String)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimStatus class.
            </summary>
            <param name="accessModes">
            accessModes contains the actual access modes the volume backing the PVC has.
            More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
            </param>
            <param name="allocatedResourceStatuses">
            allocatedResourceStatuses stores status of resource being resized for the given
            PVC. Key names follow standard Kubernetes label syntax. Valid values are either:
            * Un-prefixed keys:
            - storage - the capacity of the volume.
            * Custom resources must use implementation-defined prefixed names such as
            &quot;example.com/my-custom-resource&quot;
            Apart from above values - keys that are unprefixed or have kubernetes.io prefix
            are considered reserved and hence may not be used.
            
            ClaimResourceStatus can be in any of following states:
            - ControllerResizeInProgress:
            State set when resize controller starts resizing the volume in control-plane.
            - ControllerResizeFailed:
            State set when resize has failed in resize controller with a terminal error.
            - NodeResizePending:
            State set when resize controller has finished resizing the volume but further
            resizing of
            volume is needed on the node.
            - NodeResizeInProgress:
            State set when kubelet starts resizing the volume.
            - NodeResizeFailed:
            State set when resizing has failed in kubelet with a terminal error. Transient
            errors don&apos;t set
            NodeResizeFailed.
            For example: if expanding a PVC for more capacity - this field can be one of the
            following states:
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;ControllerResizeInProgress&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;ControllerResizeFailed&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;NodeResizePending&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;NodeResizeInProgress&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;NodeResizeFailed&quot;
            When this field is not set, it means that no resize operation is in progress for
            the given PVC.
            
            A controller that receives PVC update with previously unknown resourceName or
            ClaimResourceStatus should ignore the update for the purpose it was designed.
            For example - a controller that only is responsible for resizing capacity of the
            volume, should ignore PVC updates that change other valid resources associated
            with PVC.
            
            This is an alpha field and requires enabling RecoverVolumeExpansionFailure
            feature.
            </param>
            <param name="allocatedResources">
            allocatedResources tracks the resources allocated to a PVC including its
            capacity. Key names follow standard Kubernetes label syntax. Valid values are
            either:
            * Un-prefixed keys:
            - storage - the capacity of the volume.
            * Custom resources must use implementation-defined prefixed names such as
            &quot;example.com/my-custom-resource&quot;
            Apart from above values - keys that are unprefixed or have kubernetes.io prefix
            are considered reserved and hence may not be used.
            
            Capacity reported here may be larger than the actual capacity when a volume
            expansion operation is requested. For storage quota, the larger value from
            allocatedResources and PVC.spec.resources is used. If allocatedResources is not
            set, PVC.spec.resources alone is used for quota calculation. If a volume
            expansion capacity request is lowered, allocatedResources is only lowered if
            there are no expansion operations in progress and if the actual volume capacity
            is equal or lower than the requested capacity.
            
            A controller that receives PVC update with previously unknown resourceName
            should ignore the update for the purpose it was designed. For example - a
            controller that only is responsible for resizing capacity of the volume, should
            ignore PVC updates that change other valid resources associated with PVC.
            
            This is an alpha field and requires enabling RecoverVolumeExpansionFailure
            feature.
            </param>
            <param name="capacity">
            capacity represents the actual resources of the underlying volume.
            </param>
            <param name="conditions">
            conditions is the current Condition of persistent volume claim. If underlying
            persistent volume is being resized then the Condition will be set to
            &apos;ResizeStarted&apos;.
            </param>
            <param name="phase">
            phase represents the current phase of PersistentVolumeClaim.
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimStatus.AccessModes">
            <summary>
            accessModes contains the actual access modes the volume backing the PVC has.
            More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimStatus.AllocatedResourceStatuses">
            <summary>
            allocatedResourceStatuses stores status of resource being resized for the given
            PVC. Key names follow standard Kubernetes label syntax. Valid values are either:
            * Un-prefixed keys:
            - storage - the capacity of the volume.
            * Custom resources must use implementation-defined prefixed names such as
            &quot;example.com/my-custom-resource&quot;
            Apart from above values - keys that are unprefixed or have kubernetes.io prefix
            are considered reserved and hence may not be used.
            
            ClaimResourceStatus can be in any of following states:
            - ControllerResizeInProgress:
            State set when resize controller starts resizing the volume in control-plane.
            - ControllerResizeFailed:
            State set when resize has failed in resize controller with a terminal error.
            - NodeResizePending:
            State set when resize controller has finished resizing the volume but further
            resizing of
            volume is needed on the node.
            - NodeResizeInProgress:
            State set when kubelet starts resizing the volume.
            - NodeResizeFailed:
            State set when resizing has failed in kubelet with a terminal error. Transient
            errors don&apos;t set
            NodeResizeFailed.
            For example: if expanding a PVC for more capacity - this field can be one of the
            following states:
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;ControllerResizeInProgress&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;ControllerResizeFailed&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;NodeResizePending&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;NodeResizeInProgress&quot;
            - pvc.status.allocatedResourceStatus[&apos;storage&apos;] = &quot;NodeResizeFailed&quot;
            When this field is not set, it means that no resize operation is in progress for
            the given PVC.
            
            A controller that receives PVC update with previously unknown resourceName or
            ClaimResourceStatus should ignore the update for the purpose it was designed.
            For example - a controller that only is responsible for resizing capacity of the
            volume, should ignore PVC updates that change other valid resources associated
            with PVC.
            
            This is an alpha field and requires enabling RecoverVolumeExpansionFailure
            feature.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimStatus.AllocatedResources">
            <summary>
            allocatedResources tracks the resources allocated to a PVC including its
            capacity. Key names follow standard Kubernetes label syntax. Valid values are
            either:
            * Un-prefixed keys:
            - storage - the capacity of the volume.
            * Custom resources must use implementation-defined prefixed names such as
            &quot;example.com/my-custom-resource&quot;
            Apart from above values - keys that are unprefixed or have kubernetes.io prefix
            are considered reserved and hence may not be used.
            
            Capacity reported here may be larger than the actual capacity when a volume
            expansion operation is requested. For storage quota, the larger value from
            allocatedResources and PVC.spec.resources is used. If allocatedResources is not
            set, PVC.spec.resources alone is used for quota calculation. If a volume
            expansion capacity request is lowered, allocatedResources is only lowered if
            there are no expansion operations in progress and if the actual volume capacity
            is equal or lower than the requested capacity.
            
            A controller that receives PVC update with previously unknown resourceName
            should ignore the update for the purpose it was designed. For example - a
            controller that only is responsible for resizing capacity of the volume, should
            ignore PVC updates that change other valid resources associated with PVC.
            
            This is an alpha field and requires enabling RecoverVolumeExpansionFailure
            feature.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimStatus.Capacity">
            <summary>
            capacity represents the actual resources of the underlying volume.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimStatus.Conditions">
            <summary>
            conditions is the current Condition of persistent volume claim. If underlying
            persistent volume is being resized then the Condition will be set to
            &apos;ResizeStarted&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimStatus.Phase">
            <summary>
            phase represents the current phase of PersistentVolumeClaim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeClaimTemplate">
            <summary>
            PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects
            as part of an EphemeralVolumeSource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimTemplate.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimTemplate class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimTemplate.#ctor(k8s.Models.V1PersistentVolumeClaimSpec,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimTemplate class.
            </summary>
            <param name="spec">
            The specification for the PersistentVolumeClaim. The entire content is copied
            unchanged into the PVC that gets created from this template. The same fields as
            in a PersistentVolumeClaim are also valid here.
            </param>
            <param name="metadata">
            May contain labels and annotations that will be copied into the PVC when
            creating it. No other fields are allowed and will be rejected during validation.
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimTemplate.Metadata">
            <summary>
            May contain labels and annotations that will be copied into the PVC when
            creating it. No other fields are allowed and will be rejected during validation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimTemplate.Spec">
            <summary>
            The specification for the PersistentVolumeClaim. The entire content is copied
            unchanged into the PVC that gets created from this template. The same fields as
            in a PersistentVolumeClaim are also valid here.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimTemplate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeClaimVolumeSource">
            <summary>
            PersistentVolumeClaimVolumeSource references the user&apos;s PVC in the same
            namespace. This volume finds the bound PV and mounts that volume for the pod. A
            PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type
            of volume that is owned by someone else (the system).
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimVolumeSource.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1PersistentVolumeClaimVolumeSource class.
            </summary>
            <param name="claimName">
            claimName is the name of a PersistentVolumeClaim in the same namespace as the
            pod using this volume. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </param>
            <param name="readOnlyProperty">
            readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimVolumeSource.ClaimName">
            <summary>
            claimName is the name of a PersistentVolumeClaim in the same namespace as the
            pod using this volume. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeClaimVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeClaimVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeList">
            <summary>
            PersistentVolumeList is a list of PersistentVolume items.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeList.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeList.#ctor(System.Collections.Generic.IList{k8s.Models.V1PersistentVolume},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeList class.
            </summary>
            <param name="items">
            items is a list of persistent volumes. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeList.Items">
            <summary>
            items is a list of persistent volumes. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeSpec">
            <summary>
            PersistentVolumeSpec is the specification of a persistent volume.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeSpec.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeSpec.#ctor(System.Collections.Generic.IList{System.String},k8s.Models.V1AWSElasticBlockStoreVolumeSource,k8s.Models.V1AzureDiskVolumeSource,k8s.Models.V1AzureFilePersistentVolumeSource,System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},k8s.Models.V1CephFSPersistentVolumeSource,k8s.Models.V1CinderPersistentVolumeSource,k8s.Models.V1ObjectReference,k8s.Models.V1CSIPersistentVolumeSource,k8s.Models.V1FCVolumeSource,k8s.Models.V1FlexPersistentVolumeSource,k8s.Models.V1FlockerVolumeSource,k8s.Models.V1GCEPersistentDiskVolumeSource,k8s.Models.V1GlusterfsPersistentVolumeSource,k8s.Models.V1HostPathVolumeSource,k8s.Models.V1ISCSIPersistentVolumeSource,k8s.Models.V1LocalVolumeSource,System.Collections.Generic.IList{System.String},k8s.Models.V1NFSVolumeSource,k8s.Models.V1VolumeNodeAffinity,System.String,k8s.Models.V1PhotonPersistentDiskVolumeSource,k8s.Models.V1PortworxVolumeSource,k8s.Models.V1QuobyteVolumeSource,k8s.Models.V1RBDPersistentVolumeSource,k8s.Models.V1ScaleIOPersistentVolumeSource,System.String,k8s.Models.V1StorageOSPersistentVolumeSource,System.String,k8s.Models.V1VsphereVirtualDiskVolumeSource)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeSpec class.
            </summary>
            <param name="accessModes">
            accessModes contains all ways the volume can be mounted. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
            </param>
            <param name="awsElasticBlockStore">
            awsElasticBlockStore represents an AWS Disk resource that is attached to a
            kubelet&apos;s host machine and then exposed to the pod. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </param>
            <param name="azureDisk">
            azureDisk represents an Azure Data Disk mount on the host and bind mount to the
            pod.
            </param>
            <param name="azureFile">
            azureFile represents an Azure File Service mount on the host and bind mount to
            the pod.
            </param>
            <param name="capacity">
            capacity is the description of the persistent volume&apos;s resources and capacity.
            More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
            </param>
            <param name="cephfs">
            cephFS represents a Ceph FS mount on the host that shares a pod&apos;s lifetime
            </param>
            <param name="cinder">
            cinder represents a cinder volume attached and mounted on kubelets host machine.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="claimRef">
            claimRef is part of a bi-directional binding between PersistentVolume and
            PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is
            the authoritative bind between PV and PVC. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
            </param>
            <param name="csi">
            csi represents storage that is handled by an external CSI driver (Beta feature).
            </param>
            <param name="fc">
            fc represents a Fibre Channel resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod.
            </param>
            <param name="flexVolume">
            flexVolume represents a generic volume resource that is provisioned/attached
            using an exec based plugin.
            </param>
            <param name="flocker">
            flocker represents a Flocker volume attached to a kubelet&apos;s host machine and
            exposed to the pod for its usage. This depends on the Flocker control service
            being running
            </param>
            <param name="gcePersistentDisk">
            gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&apos;s
            host machine and then exposed to the pod. Provisioned by an admin. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </param>
            <param name="glusterfs">
            glusterfs represents a Glusterfs volume that is attached to a host and exposed
            to the pod. Provisioned by an admin. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md
            </param>
            <param name="hostPath">
            hostPath represents a directory on the host. Provisioned by a developer or
            tester. This is useful for single-node development and testing only! On-host
            storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </param>
            <param name="iscsi">
            iscsi represents an ISCSI Disk resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod. Provisioned by an admin.
            </param>
            <param name="local">
            local represents directly-attached storage with node affinity
            </param>
            <param name="mountOptions">
            mountOptions is the list of mount options, e.g. [&quot;ro&quot;, &quot;soft&quot;]. Not validated -
            mount will simply fail if one is invalid. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
            </param>
            <param name="nfs">
            nfs represents an NFS mount on the host. Provisioned by an admin. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </param>
            <param name="nodeAffinity">
            nodeAffinity defines constraints that limit what nodes this volume can be
            accessed from. This field influences the scheduling of pods that use this
            volume.
            </param>
            <param name="persistentVolumeReclaimPolicy">
            persistentVolumeReclaimPolicy defines what happens to a persistent volume when
            released from its claim. Valid options are Retain (default for manually created
            PersistentVolumes), Delete (default for dynamically provisioned
            PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the
            volume plugin underlying this PersistentVolume. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
            </param>
            <param name="photonPersistentDisk">
            photonPersistentDisk represents a PhotonController persistent disk attached and
            mounted on kubelets host machine
            </param>
            <param name="portworxVolume">
            portworxVolume represents a portworx volume attached and mounted on kubelets
            host machine
            </param>
            <param name="quobyte">
            quobyte represents a Quobyte mount on the host that shares a pod&apos;s lifetime
            </param>
            <param name="rbd">
            rbd represents a Rados Block Device mount on the host that shares a pod&apos;s
            lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
            </param>
            <param name="scaleIO">
            scaleIO represents a ScaleIO persistent volume attached and mounted on
            Kubernetes nodes.
            </param>
            <param name="storageClassName">
            storageClassName is the name of StorageClass to which this persistent volume
            belongs. Empty value means that this volume does not belong to any StorageClass.
            </param>
            <param name="storageos">
            storageOS represents a StorageOS volume that is attached to the kubelet&apos;s host
            machine and mounted into the pod More info:
            https://examples.k8s.io/volumes/storageos/README.md
            </param>
            <param name="volumeMode">
            volumeMode defines if a volume is intended to be used with a formatted
            filesystem or to remain in raw block state. Value of Filesystem is implied when
            not included in spec.
            </param>
            <param name="vsphereVolume">
            vsphereVolume represents a vSphere volume attached and mounted on kubelets host
            machine
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.AccessModes">
            <summary>
            accessModes contains all ways the volume can be mounted. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.AwsElasticBlockStore">
            <summary>
            awsElasticBlockStore represents an AWS Disk resource that is attached to a
            kubelet&apos;s host machine and then exposed to the pod. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.AzureDisk">
            <summary>
            azureDisk represents an Azure Data Disk mount on the host and bind mount to the
            pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.AzureFile">
            <summary>
            azureFile represents an Azure File Service mount on the host and bind mount to
            the pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Capacity">
            <summary>
            capacity is the description of the persistent volume&apos;s resources and capacity.
            More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Cephfs">
            <summary>
            cephFS represents a Ceph FS mount on the host that shares a pod&apos;s lifetime
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Cinder">
            <summary>
            cinder represents a cinder volume attached and mounted on kubelets host machine.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.ClaimRef">
            <summary>
            claimRef is part of a bi-directional binding between PersistentVolume and
            PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is
            the authoritative bind between PV and PVC. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Csi">
            <summary>
            csi represents storage that is handled by an external CSI driver (Beta feature).
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Fc">
            <summary>
            fc represents a Fibre Channel resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.FlexVolume">
            <summary>
            flexVolume represents a generic volume resource that is provisioned/attached
            using an exec based plugin.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Flocker">
            <summary>
            flocker represents a Flocker volume attached to a kubelet&apos;s host machine and
            exposed to the pod for its usage. This depends on the Flocker control service
            being running
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.GcePersistentDisk">
            <summary>
            gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&apos;s
            host machine and then exposed to the pod. Provisioned by an admin. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Glusterfs">
            <summary>
            glusterfs represents a Glusterfs volume that is attached to a host and exposed
            to the pod. Provisioned by an admin. More info:
            https://examples.k8s.io/volumes/glusterfs/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.HostPath">
            <summary>
            hostPath represents a directory on the host. Provisioned by a developer or
            tester. This is useful for single-node development and testing only! On-host
            storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Iscsi">
            <summary>
            iscsi represents an ISCSI Disk resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod. Provisioned by an admin.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Local">
            <summary>
            local represents directly-attached storage with node affinity
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.MountOptions">
            <summary>
            mountOptions is the list of mount options, e.g. [&quot;ro&quot;, &quot;soft&quot;]. Not validated -
            mount will simply fail if one is invalid. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Nfs">
            <summary>
            nfs represents an NFS mount on the host. Provisioned by an admin. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.NodeAffinity">
            <summary>
            nodeAffinity defines constraints that limit what nodes this volume can be
            accessed from. This field influences the scheduling of pods that use this
            volume.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.PersistentVolumeReclaimPolicy">
            <summary>
            persistentVolumeReclaimPolicy defines what happens to a persistent volume when
            released from its claim. Valid options are Retain (default for manually created
            PersistentVolumes), Delete (default for dynamically provisioned
            PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the
            volume plugin underlying this PersistentVolume. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.PhotonPersistentDisk">
            <summary>
            photonPersistentDisk represents a PhotonController persistent disk attached and
            mounted on kubelets host machine
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.PortworxVolume">
            <summary>
            portworxVolume represents a portworx volume attached and mounted on kubelets
            host machine
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Quobyte">
            <summary>
            quobyte represents a Quobyte mount on the host that shares a pod&apos;s lifetime
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Rbd">
            <summary>
            rbd represents a Rados Block Device mount on the host that shares a pod&apos;s
            lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.ScaleIO">
            <summary>
            scaleIO represents a ScaleIO persistent volume attached and mounted on
            Kubernetes nodes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.StorageClassName">
            <summary>
            storageClassName is the name of StorageClass to which this persistent volume
            belongs. Empty value means that this volume does not belong to any StorageClass.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.Storageos">
            <summary>
            storageOS represents a StorageOS volume that is attached to the kubelet&apos;s host
            machine and mounted into the pod More info:
            https://examples.k8s.io/volumes/storageos/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.VolumeMode">
            <summary>
            volumeMode defines if a volume is intended to be used with a formatted
            filesystem or to remain in raw block state. Value of Filesystem is implied when
            not included in spec.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeSpec.VsphereVolume">
            <summary>
            vsphereVolume represents a vSphere volume attached and mounted on kubelets host
            machine
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PersistentVolumeStatus">
            <summary>
            PersistentVolumeStatus is the current status of a persistent volume.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeStatus.#ctor">
            <summary>
            Initializes a new instance of the V1PersistentVolumeStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeStatus.#ctor(System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PersistentVolumeStatus class.
            </summary>
            <param name="lastPhaseTransitionTime">
            lastPhaseTransitionTime is the time the phase transitioned from one to another
            and automatically resets to current time everytime a volume phase transitions.
            This is an alpha field and requires enabling
            PersistentVolumeLastPhaseTransitionTime feature.
            </param>
            <param name="message">
            message is a human-readable message indicating details about why the volume is
            in this state.
            </param>
            <param name="phase">
            phase indicates if a volume is available, bound to a claim, or released by a
            claim. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
            </param>
            <param name="reason">
            reason is a brief CamelCase string that describes any failure and is meant for
            machine parsing and tidy display in the CLI.
            </param>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeStatus.LastPhaseTransitionTime">
            <summary>
            lastPhaseTransitionTime is the time the phase transitioned from one to another
            and automatically resets to current time everytime a volume phase transitions.
            This is an alpha field and requires enabling
            PersistentVolumeLastPhaseTransitionTime feature.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeStatus.Message">
            <summary>
            message is a human-readable message indicating details about why the volume is
            in this state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeStatus.Phase">
            <summary>
            phase indicates if a volume is available, bound to a claim, or released by a
            claim. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
            </summary>
        </member>
        <member name="P:k8s.Models.V1PersistentVolumeStatus.Reason">
            <summary>
            reason is a brief CamelCase string that describes any failure and is meant for
            machine parsing and tidy display in the CLI.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PersistentVolumeStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PhotonPersistentDiskVolumeSource">
            <summary>
            Represents a Photon Controller persistent disk resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PhotonPersistentDiskVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1PhotonPersistentDiskVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PhotonPersistentDiskVolumeSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PhotonPersistentDiskVolumeSource class.
            </summary>
            <param name="pdID">
            pdID is the ID that identifies Photon Controller persistent disk
            </param>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </param>
        </member>
        <member name="P:k8s.Models.V1PhotonPersistentDiskVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PhotonPersistentDiskVolumeSource.PdID">
            <summary>
            pdID is the ID that identifies Photon Controller persistent disk
            </summary>
        </member>
        <member name="M:k8s.Models.V1PhotonPersistentDiskVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Pod">
            <summary>
            Pod is a collection of containers that can run on a host. This resource is
            created by clients and scheduled onto hosts.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Pod.#ctor">
            <summary>
            Initializes a new instance of the V1Pod class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Pod.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1PodSpec,k8s.Models.V1PodStatus)">
            <summary>
            Initializes a new instance of the V1Pod class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Specification of the desired behavior of the pod. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Most recently observed status of the pod. This data may not be up to date.
            Populated by the system. Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Pod.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Pod.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Pod.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Pod.Spec">
            <summary>
            Specification of the desired behavior of the pod. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1Pod.Status">
            <summary>
            Most recently observed status of the pod. This data may not be up to date.
            Populated by the system. Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Pod.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodAffinity">
            <summary>
            Pod affinity is a group of inter pod affinity scheduling rules.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAffinity.#ctor">
            <summary>
            Initializes a new instance of the V1PodAffinity class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAffinity.#ctor(System.Collections.Generic.IList{k8s.Models.V1WeightedPodAffinityTerm},System.Collections.Generic.IList{k8s.Models.V1PodAffinityTerm})">
            <summary>
            Initializes a new instance of the V1PodAffinity class.
            </summary>
            <param name="preferredDuringSchedulingIgnoredDuringExecution">
            The scheduler will prefer to schedule pods to nodes that satisfy the affinity
            expressions specified by this field, but it may choose a node that violates one
            or more of the expressions. The node that is most preferred is the one with the
            greatest sum of weights, i.e. for each node that meets all of the scheduling
            requirements (resource request, requiredDuringScheduling affinity expressions,
            etc.), compute a sum by iterating through the elements of this field and adding
            &quot;weight&quot; to the sum if the node has pods which matches the corresponding
            podAffinityTerm; the node(s) with the highest sum are the most preferred.
            </param>
            <param name="requiredDuringSchedulingIgnoredDuringExecution">
            If the affinity requirements specified by this field are not met at scheduling
            time, the pod will not be scheduled onto the node. If the affinity requirements
            specified by this field cease to be met at some point during pod execution (e.g.
            due to a pod label update), the system may or may not try to eventually evict
            the pod from its node. When there are multiple elements, the lists of nodes
            corresponding to each podAffinityTerm are intersected, i.e. all terms must be
            satisfied.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution">
            <summary>
            The scheduler will prefer to schedule pods to nodes that satisfy the affinity
            expressions specified by this field, but it may choose a node that violates one
            or more of the expressions. The node that is most preferred is the one with the
            greatest sum of weights, i.e. for each node that meets all of the scheduling
            requirements (resource request, requiredDuringScheduling affinity expressions,
            etc.), compute a sum by iterating through the elements of this field and adding
            &quot;weight&quot; to the sum if the node has pods which matches the corresponding
            podAffinityTerm; the node(s) with the highest sum are the most preferred.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution">
            <summary>
            If the affinity requirements specified by this field are not met at scheduling
            time, the pod will not be scheduled onto the node. If the affinity requirements
            specified by this field cease to be met at some point during pod execution (e.g.
            due to a pod label update), the system may or may not try to eventually evict
            the pod from its node. When there are multiple elements, the lists of nodes
            corresponding to each podAffinityTerm are intersected, i.e. all terms must be
            satisfied.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAffinity.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodAffinityTerm">
            <summary>
            Defines a set of pods (namely those matching the labelSelector relative to the
            given namespace(s)) that this pod should be co-located (affinity) or not
            co-located (anti-affinity) with, where co-located is defined as running on a
            node whose value of the label with key &lt;topologyKey&gt; matches that of any node on
            which a pod of the set of pods is running
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAffinityTerm.#ctor">
            <summary>
            Initializes a new instance of the V1PodAffinityTerm class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAffinityTerm.#ctor(System.String,k8s.Models.V1LabelSelector,k8s.Models.V1LabelSelector,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1PodAffinityTerm class.
            </summary>
            <param name="topologyKey">
            This pod should be co-located (affinity) or not co-located (anti-affinity) with
            the pods matching the labelSelector in the specified namespaces, where
            co-located is defined as running on a node whose value of the label with key
            topologyKey matches that of any node on which any of the selected pods is
            running. Empty topologyKey is not allowed.
            </param>
            <param name="labelSelector">
            A label query over a set of resources, in this case pods.
            </param>
            <param name="namespaceSelector">
            A label query over the set of namespaces that the term applies to. The term is
            applied to the union of the namespaces selected by this field and the ones
            listed in the namespaces field. null selector and null or empty namespaces list
            means &quot;this pod&apos;s namespace&quot;. An empty selector ({}) matches all namespaces.
            </param>
            <param name="namespaces">
            namespaces specifies a static list of namespace names that the term applies to.
            The term is applied to the union of the namespaces listed in this field and the
            ones selected by namespaceSelector. null or empty namespaces list and null
            namespaceSelector means &quot;this pod&apos;s namespace&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodAffinityTerm.LabelSelector">
            <summary>
            A label query over a set of resources, in this case pods.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodAffinityTerm.NamespaceSelector">
            <summary>
            A label query over the set of namespaces that the term applies to. The term is
            applied to the union of the namespaces selected by this field and the ones
            listed in the namespaces field. null selector and null or empty namespaces list
            means &quot;this pod&apos;s namespace&quot;. An empty selector ({}) matches all namespaces.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodAffinityTerm.Namespaces">
            <summary>
            namespaces specifies a static list of namespace names that the term applies to.
            The term is applied to the union of the namespaces listed in this field and the
            ones selected by namespaceSelector. null or empty namespaces list and null
            namespaceSelector means &quot;this pod&apos;s namespace&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodAffinityTerm.TopologyKey">
            <summary>
            This pod should be co-located (affinity) or not co-located (anti-affinity) with
            the pods matching the labelSelector in the specified namespaces, where
            co-located is defined as running on a node whose value of the label with key
            topologyKey matches that of any node on which any of the selected pods is
            running. Empty topologyKey is not allowed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAffinityTerm.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodAntiAffinity">
            <summary>
            Pod anti affinity is a group of inter pod anti affinity scheduling rules.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAntiAffinity.#ctor">
            <summary>
            Initializes a new instance of the V1PodAntiAffinity class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAntiAffinity.#ctor(System.Collections.Generic.IList{k8s.Models.V1WeightedPodAffinityTerm},System.Collections.Generic.IList{k8s.Models.V1PodAffinityTerm})">
            <summary>
            Initializes a new instance of the V1PodAntiAffinity class.
            </summary>
            <param name="preferredDuringSchedulingIgnoredDuringExecution">
            The scheduler will prefer to schedule pods to nodes that satisfy the
            anti-affinity expressions specified by this field, but it may choose a node that
            violates one or more of the expressions. The node that is most preferred is the
            one with the greatest sum of weights, i.e. for each node that meets all of the
            scheduling requirements (resource request, requiredDuringScheduling
            anti-affinity expressions, etc.), compute a sum by iterating through the
            elements of this field and adding &quot;weight&quot; to the sum if the node has pods which
            matches the corresponding podAffinityTerm; the node(s) with the highest sum are
            the most preferred.
            </param>
            <param name="requiredDuringSchedulingIgnoredDuringExecution">
            If the anti-affinity requirements specified by this field are not met at
            scheduling time, the pod will not be scheduled onto the node. If the
            anti-affinity requirements specified by this field cease to be met at some point
            during pod execution (e.g. due to a pod label update), the system may or may not
            try to eventually evict the pod from its node. When there are multiple elements,
            the lists of nodes corresponding to each podAffinityTerm are intersected, i.e.
            all terms must be satisfied.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodAntiAffinity.PreferredDuringSchedulingIgnoredDuringExecution">
            <summary>
            The scheduler will prefer to schedule pods to nodes that satisfy the
            anti-affinity expressions specified by this field, but it may choose a node that
            violates one or more of the expressions. The node that is most preferred is the
            one with the greatest sum of weights, i.e. for each node that meets all of the
            scheduling requirements (resource request, requiredDuringScheduling
            anti-affinity expressions, etc.), compute a sum by iterating through the
            elements of this field and adding &quot;weight&quot; to the sum if the node has pods which
            matches the corresponding podAffinityTerm; the node(s) with the highest sum are
            the most preferred.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodAntiAffinity.RequiredDuringSchedulingIgnoredDuringExecution">
            <summary>
            If the anti-affinity requirements specified by this field are not met at
            scheduling time, the pod will not be scheduled onto the node. If the
            anti-affinity requirements specified by this field cease to be met at some point
            during pod execution (e.g. due to a pod label update), the system may or may not
            try to eventually evict the pod from its node. When there are multiple elements,
            the lists of nodes corresponding to each podAffinityTerm are intersected, i.e.
            all terms must be satisfied.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodAntiAffinity.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodCondition">
            <summary>
            PodCondition contains details for the current condition of this pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodCondition.#ctor">
            <summary>
            Initializes a new instance of the V1PodCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PodCondition class.
            </summary>
            <param name="status">
            Status is the status of the condition. Can be True, False, Unknown. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
            </param>
            <param name="type">
            Type is the type of the condition. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
            </param>
            <param name="lastProbeTime">
            Last time we probed the condition.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transitioned from one status to another.
            </param>
            <param name="message">
            Human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            Unique, one-word, CamelCase reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodCondition.LastProbeTime">
            <summary>
            Last time we probed the condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodCondition.LastTransitionTime">
            <summary>
            Last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodCondition.Message">
            <summary>
            Human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodCondition.Reason">
            <summary>
            Unique, one-word, CamelCase reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodCondition.Status">
            <summary>
            Status is the status of the condition. Can be True, False, Unknown. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodCondition.Type">
            <summary>
            Type is the type of the condition. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodDNSConfig">
            <summary>
            PodDNSConfig defines the DNS parameters of a pod in addition to those generated
            from DNSPolicy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDNSConfig.#ctor">
            <summary>
            Initializes a new instance of the V1PodDNSConfig class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDNSConfig.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{k8s.Models.V1PodDNSConfigOption},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1PodDNSConfig class.
            </summary>
            <param name="nameservers">
            A list of DNS name server IP addresses. This will be appended to the base
            nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
            </param>
            <param name="options">
            A list of DNS resolver options. This will be merged with the base options
            generated from DNSPolicy. Duplicated entries will be removed. Resolution options
            given in Options will override those that appear in the base DNSPolicy.
            </param>
            <param name="searches">
            A list of DNS search domains for host-name lookup. This will be appended to the
            base search paths generated from DNSPolicy. Duplicated search paths will be
            removed.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodDNSConfig.Nameservers">
            <summary>
            A list of DNS name server IP addresses. This will be appended to the base
            nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDNSConfig.Options">
            <summary>
            A list of DNS resolver options. This will be merged with the base options
            generated from DNSPolicy. Duplicated entries will be removed. Resolution options
            given in Options will override those that appear in the base DNSPolicy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDNSConfig.Searches">
            <summary>
            A list of DNS search domains for host-name lookup. This will be appended to the
            base search paths generated from DNSPolicy. Duplicated search paths will be
            removed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDNSConfig.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodDNSConfigOption">
            <summary>
            PodDNSConfigOption defines DNS resolver options of a pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDNSConfigOption.#ctor">
            <summary>
            Initializes a new instance of the V1PodDNSConfigOption class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDNSConfigOption.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PodDNSConfigOption class.
            </summary>
            <param name="name">
            Required.
            </param>
            <param name="value">
            
            </param>
        </member>
        <member name="P:k8s.Models.V1PodDNSConfigOption.Name">
            <summary>
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDNSConfigOption.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDNSConfigOption.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodIP">
            <summary>
            PodIP represents a single IP address allocated to the pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodIP.#ctor">
            <summary>
            Initializes a new instance of the V1PodIP class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodIP.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1PodIP class.
            </summary>
            <param name="ip">
            IP is the IP address assigned to the pod
            </param>
        </member>
        <member name="P:k8s.Models.V1PodIP.Ip">
            <summary>
            IP is the IP address assigned to the pod
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodIP.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodList">
            <summary>
            PodList is a list of Pods.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodList.#ctor">
            <summary>
            Initializes a new instance of the V1PodList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Pod},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1PodList class.
            </summary>
            <param name="items">
            List of pods. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1PodList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodList.Items">
            <summary>
            List of pods. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodOS">
            <summary>
            PodOS defines the OS parameters of a pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodOS.#ctor">
            <summary>
            Initializes a new instance of the V1PodOS class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodOS.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1PodOS class.
            </summary>
            <param name="name">
            Name is the name of the operating system. The currently supported values are
            linux and windows. Additional value may be defined in future and can be one of:
            https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
            Clients should expect to handle additional values and treat unrecognized values
            in this field as os: null
            </param>
        </member>
        <member name="P:k8s.Models.V1PodOS.Name">
            <summary>
            Name is the name of the operating system. The currently supported values are
            linux and windows. Additional value may be defined in future and can be one of:
            https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
            Clients should expect to handle additional values and treat unrecognized values
            in this field as os: null
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodOS.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodReadinessGate">
            <summary>
            PodReadinessGate contains the reference to a pod condition
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodReadinessGate.#ctor">
            <summary>
            Initializes a new instance of the V1PodReadinessGate class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodReadinessGate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1PodReadinessGate class.
            </summary>
            <param name="conditionType">
            ConditionType refers to a condition in the pod&apos;s condition list with matching
            type.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodReadinessGate.ConditionType">
            <summary>
            ConditionType refers to a condition in the pod&apos;s condition list with matching
            type.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodReadinessGate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodResourceClaim">
            <summary>
            PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It
            adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
            Containers that need access to the ResourceClaim reference it with this name.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodResourceClaim.#ctor">
            <summary>
            Initializes a new instance of the V1PodResourceClaim class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodResourceClaim.#ctor(System.String,k8s.Models.V1ClaimSource)">
            <summary>
            Initializes a new instance of the V1PodResourceClaim class.
            </summary>
            <param name="name">
            Name uniquely identifies this resource claim inside the pod. This must be a
            DNS_LABEL.
            </param>
            <param name="source">
            Source describes where to find the ResourceClaim.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodResourceClaim.Name">
            <summary>
            Name uniquely identifies this resource claim inside the pod. This must be a
            DNS_LABEL.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodResourceClaim.Source">
            <summary>
            Source describes where to find the ResourceClaim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodResourceClaim.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodResourceClaimStatus">
            <summary>
            PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim
            which references a ResourceClaimTemplate. It stores the generated name for the
            corresponding ResourceClaim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodResourceClaimStatus.#ctor">
            <summary>
            Initializes a new instance of the V1PodResourceClaimStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodResourceClaimStatus.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PodResourceClaimStatus class.
            </summary>
            <param name="name">
            Name uniquely identifies this resource claim inside the pod. This must match the
            name of an entry in pod.spec.resourceClaims, which implies that the string must
            be a DNS_LABEL.
            </param>
            <param name="resourceClaimName">
            ResourceClaimName is the name of the ResourceClaim that was generated for the
            Pod in the namespace of the Pod. It this is unset, then generating a
            ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be
            ignored in this case.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodResourceClaimStatus.Name">
            <summary>
            Name uniquely identifies this resource claim inside the pod. This must match the
            name of an entry in pod.spec.resourceClaims, which implies that the string must
            be a DNS_LABEL.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodResourceClaimStatus.ResourceClaimName">
            <summary>
            ResourceClaimName is the name of the ResourceClaim that was generated for the
            Pod in the namespace of the Pod. It this is unset, then generating a
            ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be
            ignored in this case.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodResourceClaimStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodSchedulingGate">
            <summary>
            PodSchedulingGate is associated to a Pod to guard its scheduling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSchedulingGate.#ctor">
            <summary>
            Initializes a new instance of the V1PodSchedulingGate class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSchedulingGate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1PodSchedulingGate class.
            </summary>
            <param name="name">
            Name of the scheduling gate. Each scheduling gate must have a unique name field.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodSchedulingGate.Name">
            <summary>
            Name of the scheduling gate. Each scheduling gate must have a unique name field.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSchedulingGate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodSecurityContext">
            <summary>
            PodSecurityContext holds pod-level security attributes and common container
            settings. Some fields are also present in container.securityContext.  Field
            values of container.securityContext take precedence over field values of
            PodSecurityContext.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSecurityContext.#ctor">
            <summary>
            Initializes a new instance of the V1PodSecurityContext class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSecurityContext.#ctor(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},k8s.Models.V1SELinuxOptions,k8s.Models.V1SeccompProfile,System.Collections.Generic.IList{System.Nullable{System.Int64}},System.Collections.Generic.IList{k8s.Models.V1Sysctl},k8s.Models.V1WindowsSecurityContextOptions)">
            <summary>
            Initializes a new instance of the V1PodSecurityContext class.
            </summary>
            <param name="fsGroup">
            A special supplemental group that applies to all containers in a pod. Some
            volume types allow the Kubelet to change the ownership of that volume to be
            owned by the pod:
            
            1. The owning GID will be the FSGroup 2. The setgid bit is set (new files
            created in the volume will be owned by FSGroup) 3. The permission bits are OR&apos;d
            with rw-rw----
            
            If unset, the Kubelet will not modify the ownership and permissions of any
            volume. Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="fsGroupChangePolicy">
            fsGroupChangePolicy defines behavior of changing ownership and permission of the
            volume before being exposed inside Pod. This field will only apply to volume
            types which support fsGroup based ownership(and permissions). It will have no
            effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid
            values are &quot;OnRootMismatch&quot; and &quot;Always&quot;. If not specified, &quot;Always&quot; is used.
            Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="runAsGroup">
            The GID to run the entrypoint of the container process. Uses runtime default if
            unset. May also be set in SecurityContext.  If set in both SecurityContext and
            PodSecurityContext, the value specified in SecurityContext takes precedence for
            that container. Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="runAsNonRoot">
            Indicates that the container must run as a non-root user. If true, the Kubelet
            will validate the image at runtime to ensure that it does not run as UID 0
            (root) and fail to start the container if it does. If unset or false, no such
            validation will be performed. May also be set in SecurityContext.  If set in
            both SecurityContext and PodSecurityContext, the value specified in
            SecurityContext takes precedence.
            </param>
            <param name="runAsUser">
            The UID to run the entrypoint of the container process. Defaults to user
            specified in image metadata if unspecified. May also be set in SecurityContext. 
            If set in both SecurityContext and PodSecurityContext, the value specified in
            SecurityContext takes precedence for that container. Note that this field cannot
            be set when spec.os.name is windows.
            </param>
            <param name="seLinuxOptions">
            The SELinux context to be applied to all containers. If unspecified, the
            container runtime will allocate a random SELinux context for each container. 
            May also be set in SecurityContext.  If set in both SecurityContext and
            PodSecurityContext, the value specified in SecurityContext takes precedence for
            that container. Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="seccompProfile">
            The seccomp options to use by the containers in this pod. Note that this field
            cannot be set when spec.os.name is windows.
            </param>
            <param name="supplementalGroups">
            A list of groups applied to the first process run in each container, in addition
            to the container&apos;s primary GID, the fsGroup (if specified), and group
            memberships defined in the container image for the uid of the container process.
            If unspecified, no additional groups are added to any container. Note that group
            memberships defined in the container image for the uid of the container process
            are still effective, even if they are not included in this list. Note that this
            field cannot be set when spec.os.name is windows.
            </param>
            <param name="sysctls">
            Sysctls hold a list of namespaced sysctls used for the pod. Pods with
            unsupported sysctls (by the container runtime) might fail to launch. Note that
            this field cannot be set when spec.os.name is windows.
            </param>
            <param name="windowsOptions">
            The Windows specific settings applied to all containers. If unspecified, the
            options within a container&apos;s SecurityContext will be used. If set in both
            SecurityContext and PodSecurityContext, the value specified in SecurityContext
            takes precedence. Note that this field cannot be set when spec.os.name is linux.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.FsGroup">
            <summary>
            A special supplemental group that applies to all containers in a pod. Some
            volume types allow the Kubelet to change the ownership of that volume to be
            owned by the pod:
            
            1. The owning GID will be the FSGroup 2. The setgid bit is set (new files
            created in the volume will be owned by FSGroup) 3. The permission bits are OR&apos;d
            with rw-rw----
            
            If unset, the Kubelet will not modify the ownership and permissions of any
            volume. Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.FsGroupChangePolicy">
            <summary>
            fsGroupChangePolicy defines behavior of changing ownership and permission of the
            volume before being exposed inside Pod. This field will only apply to volume
            types which support fsGroup based ownership(and permissions). It will have no
            effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid
            values are &quot;OnRootMismatch&quot; and &quot;Always&quot;. If not specified, &quot;Always&quot; is used.
            Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.RunAsGroup">
            <summary>
            The GID to run the entrypoint of the container process. Uses runtime default if
            unset. May also be set in SecurityContext.  If set in both SecurityContext and
            PodSecurityContext, the value specified in SecurityContext takes precedence for
            that container. Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.RunAsNonRoot">
            <summary>
            Indicates that the container must run as a non-root user. If true, the Kubelet
            will validate the image at runtime to ensure that it does not run as UID 0
            (root) and fail to start the container if it does. If unset or false, no such
            validation will be performed. May also be set in SecurityContext.  If set in
            both SecurityContext and PodSecurityContext, the value specified in
            SecurityContext takes precedence.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.RunAsUser">
            <summary>
            The UID to run the entrypoint of the container process. Defaults to user
            specified in image metadata if unspecified. May also be set in SecurityContext. 
            If set in both SecurityContext and PodSecurityContext, the value specified in
            SecurityContext takes precedence for that container. Note that this field cannot
            be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.SeLinuxOptions">
            <summary>
            The SELinux context to be applied to all containers. If unspecified, the
            container runtime will allocate a random SELinux context for each container. 
            May also be set in SecurityContext.  If set in both SecurityContext and
            PodSecurityContext, the value specified in SecurityContext takes precedence for
            that container. Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.SeccompProfile">
            <summary>
            The seccomp options to use by the containers in this pod. Note that this field
            cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.SupplementalGroups">
            <summary>
            A list of groups applied to the first process run in each container, in addition
            to the container&apos;s primary GID, the fsGroup (if specified), and group
            memberships defined in the container image for the uid of the container process.
            If unspecified, no additional groups are added to any container. Note that group
            memberships defined in the container image for the uid of the container process
            are still effective, even if they are not included in this list. Note that this
            field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.Sysctls">
            <summary>
            Sysctls hold a list of namespaced sysctls used for the pod. Pods with
            unsupported sysctls (by the container runtime) might fail to launch. Note that
            this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSecurityContext.WindowsOptions">
            <summary>
            The Windows specific settings applied to all containers. If unspecified, the
            options within a container&apos;s SecurityContext will be used. If set in both
            SecurityContext and PodSecurityContext, the value specified in SecurityContext
            takes precedence. Note that this field cannot be set when spec.os.name is linux.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSecurityContext.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodSpec">
            <summary>
            PodSpec is a description of a pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSpec.#ctor">
            <summary>
            Initializes a new instance of the V1PodSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSpec.#ctor(System.Collections.Generic.IList{k8s.Models.V1Container},System.Nullable{System.Int64},k8s.Models.V1Affinity,System.Nullable{System.Boolean},k8s.Models.V1PodDNSConfig,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.V1EphemeralContainer},System.Collections.Generic.IList{k8s.Models.V1HostAlias},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Collections.Generic.IList{k8s.Models.V1LocalObjectReference},System.Collections.Generic.IList{k8s.Models.V1Container},System.String,System.Collections.Generic.IDictionary{System.String,System.String},k8s.Models.V1PodOS,System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IList{k8s.Models.V1PodReadinessGate},System.Collections.Generic.IList{k8s.Models.V1PodResourceClaim},System.String,System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1PodSchedulingGate},k8s.Models.V1PodSecurityContext,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int64},System.Collections.Generic.IList{k8s.Models.V1Toleration},System.Collections.Generic.IList{k8s.Models.V1TopologySpreadConstraint},System.Collections.Generic.IList{k8s.Models.V1Volume})">
            <summary>
            Initializes a new instance of the V1PodSpec class.
            </summary>
            <param name="containers">
            List of containers belonging to the pod. Containers cannot currently be added or
            removed. There must be at least one container in a Pod. Cannot be updated.
            </param>
            <param name="activeDeadlineSeconds">
            Optional duration in seconds the pod may be active on the node relative to
            StartTime before the system will actively try to mark it failed and kill
            associated containers. Value must be a positive integer.
            </param>
            <param name="affinity">
            If specified, the pod&apos;s scheduling constraints
            </param>
            <param name="automountServiceAccountToken">
            AutomountServiceAccountToken indicates whether a service account token should be
            automatically mounted.
            </param>
            <param name="dnsConfig">
            Specifies the DNS parameters of a pod. Parameters specified here will be merged
            to the generated DNS configuration based on DNSPolicy.
            </param>
            <param name="dnsPolicy">
            Set DNS policy for the pod. Defaults to &quot;ClusterFirst&quot;. Valid values are
            &apos;ClusterFirstWithHostNet&apos;, &apos;ClusterFirst&apos;, &apos;Default&apos; or &apos;None&apos;. DNS parameters
            given in DNSConfig will be merged with the policy selected with DNSPolicy. To
            have DNS options set along with hostNetwork, you have to specify DNS policy
            explicitly to &apos;ClusterFirstWithHostNet&apos;.
            </param>
            <param name="enableServiceLinks">
            EnableServiceLinks indicates whether information about services should be
            injected into pod&apos;s environment variables, matching the syntax of Docker links.
            Optional: Defaults to true.
            </param>
            <param name="ephemeralContainers">
            List of ephemeral containers run in this pod. Ephemeral containers may be run in
            an existing pod to perform user-initiated actions such as debugging. This list
            cannot be specified when creating a pod, and it cannot be modified by updating
            the pod spec. In order to add an ephemeral container to an existing pod, use the
            pod&apos;s ephemeralcontainers subresource.
            </param>
            <param name="hostAliases">
            HostAliases is an optional list of hosts and IPs that will be injected into the
            pod&apos;s hosts file if specified. This is only valid for non-hostNetwork pods.
            </param>
            <param name="hostIPC">
            Use the host&apos;s ipc namespace. Optional: Default to false.
            </param>
            <param name="hostNetwork">
            Host networking requested for this pod. Use the host&apos;s network namespace. If
            this option is set, the ports that will be used must be specified. Default to
            false.
            </param>
            <param name="hostPID">
            Use the host&apos;s pid namespace. Optional: Default to false.
            </param>
            <param name="hostUsers">
            Use the host&apos;s user namespace. Optional: Default to true. If set to true or not
            present, the pod will be run in the host user namespace, useful for when the pod
            needs a feature only available to the host user namespace, such as loading a
            kernel module with CAP_SYS_MODULE. When set to false, a new userns is created
            for the pod. Setting false is useful for mitigating container breakout
            vulnerabilities even allowing users to run their containers as root without
            actually having root privileges on the host. This field is alpha-level and is
            only honored by servers that enable the UserNamespacesSupport feature.
            </param>
            <param name="hostname">
            Specifies the hostname of the Pod If not specified, the pod&apos;s hostname will be
            set to a system-defined value.
            </param>
            <param name="imagePullSecrets">
            ImagePullSecrets is an optional list of references to secrets in the same
            namespace to use for pulling any of the images used by this PodSpec. If
            specified, these secrets will be passed to individual puller implementations for
            them to use. More info:
            https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
            </param>
            <param name="initContainers">
            List of initialization containers belonging to the pod. Init containers are
            executed in order prior to containers being started. If any init container
            fails, the pod is considered to have failed and is handled according to its
            restartPolicy. The name for an init container or normal container must be unique
            among all containers. Init containers may not have Lifecycle actions, Readiness
            probes, Liveness probes, or Startup probes. The resourceRequirements of an init
            container are taken into account during scheduling by finding the highest
            request/limit for each resource type, and then using the max of of that value or
            the sum of the normal containers. Limits are applied to init containers in a
            similar fashion. Init containers cannot currently be added or removed. Cannot be
            updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
            </param>
            <param name="nodeName">
            NodeName is a request to schedule this pod onto a specific node. If it is
            non-empty, the scheduler simply schedules this pod onto that node, assuming that
            it fits resource requirements.
            </param>
            <param name="nodeSelector">
            NodeSelector is a selector which must be true for the pod to fit on a node.
            Selector which must match a node&apos;s labels for the pod to be scheduled on that
            node. More info:
            https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
            </param>
            <param name="os">
            Specifies the OS of the containers in the pod. Some pod and container fields are
            restricted if this is set.
            
            If the OS field is set to linux, the following fields must be unset:
            -securityContext.windowsOptions
            
            If the OS field is set to windows, following fields must be unset: -
            spec.hostPID - spec.hostIPC - spec.hostUsers -
            spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile -
            spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy -
            spec.securityContext.sysctls - spec.shareProcessNamespace -
            spec.securityContext.runAsUser - spec.securityContext.runAsGroup -
            spec.securityContext.supplementalGroups -
            spec.containers[*].securityContext.seLinuxOptions -
            spec.containers[*].securityContext.seccompProfile -
            spec.containers[*].securityContext.capabilities -
            spec.containers[*].securityContext.readOnlyRootFilesystem -
            spec.containers[*].securityContext.privileged -
            spec.containers[*].securityContext.allowPrivilegeEscalation -
            spec.containers[*].securityContext.procMount -
            spec.containers[*].securityContext.runAsUser -
            spec.containers[*].securityContext.runAsGroup
            </param>
            <param name="overhead">
            Overhead represents the resource overhead associated with running a pod for a
            given RuntimeClass. This field will be autopopulated at admission time by the
            RuntimeClass admission controller. If the RuntimeClass admission controller is
            enabled, overhead must not be set in Pod create requests. The RuntimeClass
            admission controller will reject Pod create requests which have the overhead
            already set. If RuntimeClass is configured and selected in the PodSpec, Overhead
            will be set to the value defined in the corresponding RuntimeClass, otherwise it
            will remain unset and treated as zero. More info:
            https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
            </param>
            <param name="preemptionPolicy">
            PreemptionPolicy is the Policy for preempting pods with lower priority. One of
            Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
            </param>
            <param name="priority">
            The priority value. Various system components use this field to find the
            priority of the pod. When Priority Admission Controller is enabled, it prevents
            users from setting this field. The admission controller populates this field
            from PriorityClassName. The higher the value, the higher the priority.
            </param>
            <param name="priorityClassName">
            If specified, indicates the pod&apos;s priority. &quot;system-node-critical&quot; and
            &quot;system-cluster-critical&quot; are two special keywords which indicate the highest
            priorities with the former being the highest priority. Any other name must be
            defined by creating a PriorityClass object with that name. If not specified, the
            pod priority will be default or zero if there is no default.
            </param>
            <param name="readinessGates">
            If specified, all readiness gates will be evaluated for pod readiness. A pod is
            ready when all its containers are ready AND all conditions specified in the
            readiness gates have status equal to &quot;True&quot; More info:
            https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
            </param>
            <param name="resourceClaims">
            ResourceClaims defines which ResourceClaims must be allocated and reserved
            before the Pod is allowed to start. The resources will be made available to
            those containers which consume them by name.
            
            This is an alpha field and requires enabling the DynamicResourceAllocation
            feature gate.
            
            This field is immutable.
            </param>
            <param name="restartPolicy">
            Restart policy for all containers within the pod. One of Always, OnFailure,
            Never. In some contexts, only a subset of those values may be permitted. Default
            to Always. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
            </param>
            <param name="runtimeClassName">
            RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which
            should be used to run this pod.  If no RuntimeClass resource matches the named
            class, the pod will not be run. If unset or empty, the &quot;legacy&quot; RuntimeClass
            will be used, which is an implicit class with an empty definition that uses the
            default runtime handler. More info:
            https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
            </param>
            <param name="schedulerName">
            If specified, the pod will be dispatched by specified scheduler. If not
            specified, the pod will be dispatched by default scheduler.
            </param>
            <param name="schedulingGates">
            SchedulingGates is an opaque list of values that if specified will block
            scheduling the pod. If schedulingGates is not empty, the pod will stay in the
            SchedulingGated state and the scheduler will not attempt to schedule the pod.
            
            SchedulingGates can only be set at pod creation time, and be removed only
            afterwards.
            
            This is a beta feature enabled by the PodSchedulingReadiness feature gate.
            </param>
            <param name="securityContext">
            SecurityContext holds pod-level security attributes and common container
            settings. Optional: Defaults to empty.  See type description for default values
            of each field.
            </param>
            <param name="serviceAccount">
            DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
            Deprecated: Use serviceAccountName instead.
            </param>
            <param name="serviceAccountName">
            ServiceAccountName is the name of the ServiceAccount to use to run this pod.
            More info:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
            </param>
            <param name="setHostnameAsFQDN">
            If true the pod&apos;s hostname will be configured as the pod&apos;s FQDN, rather than the
            leaf name (the default). In Linux containers, this means setting the FQDN in the
            hostname field of the kernel (the nodename field of struct utsname). In Windows
            containers, this means setting the registry value of hostname for the registry
            key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to
            FQDN. If a pod does not have FQDN, this has no effect. Default to false.
            </param>
            <param name="shareProcessNamespace">
            Share a single process namespace between all of the containers in a pod. When
            this is set containers will be able to view and signal processes from other
            containers in the same pod, and the first process in each container will not be
            assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional:
            Default to false.
            </param>
            <param name="subdomain">
            If specified, the fully qualified Pod hostname will be
            &quot;&lt;hostname&gt;.&lt;subdomain&gt;.&lt;pod namespace&gt;.svc.&lt;cluster domain&gt;&quot;. If not specified,
            the pod will not have a domainname at all.
            </param>
            <param name="terminationGracePeriodSeconds">
            Optional duration in seconds the pod needs to terminate gracefully. May be
            decreased in delete request. Value must be non-negative integer. The value zero
            indicates stop immediately via the kill signal (no opportunity to shut down). If
            this value is nil, the default grace period will be used instead. The grace
            period is the duration in seconds after the processes running in the pod are
            sent a termination signal and the time when the processes are forcibly halted
            with a kill signal. Set this value longer than the expected cleanup time for
            your process. Defaults to 30 seconds.
            </param>
            <param name="tolerations">
            If specified, the pod&apos;s tolerations.
            </param>
            <param name="topologySpreadConstraints">
            TopologySpreadConstraints describes how a group of pods ought to spread across
            topology domains. Scheduler will schedule pods in a way which abides by the
            constraints. All topologySpreadConstraints are ANDed.
            </param>
            <param name="volumes">
            List of volumes that can be mounted by containers belonging to the pod. More
            info: https://kubernetes.io/docs/concepts/storage/volumes
            </param>
        </member>
        <member name="P:k8s.Models.V1PodSpec.ActiveDeadlineSeconds">
            <summary>
            Optional duration in seconds the pod may be active on the node relative to
            StartTime before the system will actively try to mark it failed and kill
            associated containers. Value must be a positive integer.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Affinity">
            <summary>
            If specified, the pod&apos;s scheduling constraints
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.AutomountServiceAccountToken">
            <summary>
            AutomountServiceAccountToken indicates whether a service account token should be
            automatically mounted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Containers">
            <summary>
            List of containers belonging to the pod. Containers cannot currently be added or
            removed. There must be at least one container in a Pod. Cannot be updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.DnsConfig">
            <summary>
            Specifies the DNS parameters of a pod. Parameters specified here will be merged
            to the generated DNS configuration based on DNSPolicy.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.DnsPolicy">
            <summary>
            Set DNS policy for the pod. Defaults to &quot;ClusterFirst&quot;. Valid values are
            &apos;ClusterFirstWithHostNet&apos;, &apos;ClusterFirst&apos;, &apos;Default&apos; or &apos;None&apos;. DNS parameters
            given in DNSConfig will be merged with the policy selected with DNSPolicy. To
            have DNS options set along with hostNetwork, you have to specify DNS policy
            explicitly to &apos;ClusterFirstWithHostNet&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.EnableServiceLinks">
            <summary>
            EnableServiceLinks indicates whether information about services should be
            injected into pod&apos;s environment variables, matching the syntax of Docker links.
            Optional: Defaults to true.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.EphemeralContainers">
            <summary>
            List of ephemeral containers run in this pod. Ephemeral containers may be run in
            an existing pod to perform user-initiated actions such as debugging. This list
            cannot be specified when creating a pod, and it cannot be modified by updating
            the pod spec. In order to add an ephemeral container to an existing pod, use the
            pod&apos;s ephemeralcontainers subresource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.HostAliases">
            <summary>
            HostAliases is an optional list of hosts and IPs that will be injected into the
            pod&apos;s hosts file if specified. This is only valid for non-hostNetwork pods.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.HostIPC">
            <summary>
            Use the host&apos;s ipc namespace. Optional: Default to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.HostNetwork">
            <summary>
            Host networking requested for this pod. Use the host&apos;s network namespace. If
            this option is set, the ports that will be used must be specified. Default to
            false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.HostPID">
            <summary>
            Use the host&apos;s pid namespace. Optional: Default to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.HostUsers">
            <summary>
            Use the host&apos;s user namespace. Optional: Default to true. If set to true or not
            present, the pod will be run in the host user namespace, useful for when the pod
            needs a feature only available to the host user namespace, such as loading a
            kernel module with CAP_SYS_MODULE. When set to false, a new userns is created
            for the pod. Setting false is useful for mitigating container breakout
            vulnerabilities even allowing users to run their containers as root without
            actually having root privileges on the host. This field is alpha-level and is
            only honored by servers that enable the UserNamespacesSupport feature.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Hostname">
            <summary>
            Specifies the hostname of the Pod If not specified, the pod&apos;s hostname will be
            set to a system-defined value.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.ImagePullSecrets">
            <summary>
            ImagePullSecrets is an optional list of references to secrets in the same
            namespace to use for pulling any of the images used by this PodSpec. If
            specified, these secrets will be passed to individual puller implementations for
            them to use. More info:
            https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.InitContainers">
            <summary>
            List of initialization containers belonging to the pod. Init containers are
            executed in order prior to containers being started. If any init container
            fails, the pod is considered to have failed and is handled according to its
            restartPolicy. The name for an init container or normal container must be unique
            among all containers. Init containers may not have Lifecycle actions, Readiness
            probes, Liveness probes, or Startup probes. The resourceRequirements of an init
            container are taken into account during scheduling by finding the highest
            request/limit for each resource type, and then using the max of of that value or
            the sum of the normal containers. Limits are applied to init containers in a
            similar fashion. Init containers cannot currently be added or removed. Cannot be
            updated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.NodeName">
            <summary>
            NodeName is a request to schedule this pod onto a specific node. If it is
            non-empty, the scheduler simply schedules this pod onto that node, assuming that
            it fits resource requirements.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.NodeSelector">
            <summary>
            NodeSelector is a selector which must be true for the pod to fit on a node.
            Selector which must match a node&apos;s labels for the pod to be scheduled on that
            node. More info:
            https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Os">
            <summary>
            Specifies the OS of the containers in the pod. Some pod and container fields are
            restricted if this is set.
            
            If the OS field is set to linux, the following fields must be unset:
            -securityContext.windowsOptions
            
            If the OS field is set to windows, following fields must be unset: -
            spec.hostPID - spec.hostIPC - spec.hostUsers -
            spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile -
            spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy -
            spec.securityContext.sysctls - spec.shareProcessNamespace -
            spec.securityContext.runAsUser - spec.securityContext.runAsGroup -
            spec.securityContext.supplementalGroups -
            spec.containers[*].securityContext.seLinuxOptions -
            spec.containers[*].securityContext.seccompProfile -
            spec.containers[*].securityContext.capabilities -
            spec.containers[*].securityContext.readOnlyRootFilesystem -
            spec.containers[*].securityContext.privileged -
            spec.containers[*].securityContext.allowPrivilegeEscalation -
            spec.containers[*].securityContext.procMount -
            spec.containers[*].securityContext.runAsUser -
            spec.containers[*].securityContext.runAsGroup
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Overhead">
            <summary>
            Overhead represents the resource overhead associated with running a pod for a
            given RuntimeClass. This field will be autopopulated at admission time by the
            RuntimeClass admission controller. If the RuntimeClass admission controller is
            enabled, overhead must not be set in Pod create requests. The RuntimeClass
            admission controller will reject Pod create requests which have the overhead
            already set. If RuntimeClass is configured and selected in the PodSpec, Overhead
            will be set to the value defined in the corresponding RuntimeClass, otherwise it
            will remain unset and treated as zero. More info:
            https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.PreemptionPolicy">
            <summary>
            PreemptionPolicy is the Policy for preempting pods with lower priority. One of
            Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Priority">
            <summary>
            The priority value. Various system components use this field to find the
            priority of the pod. When Priority Admission Controller is enabled, it prevents
            users from setting this field. The admission controller populates this field
            from PriorityClassName. The higher the value, the higher the priority.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.PriorityClassName">
            <summary>
            If specified, indicates the pod&apos;s priority. &quot;system-node-critical&quot; and
            &quot;system-cluster-critical&quot; are two special keywords which indicate the highest
            priorities with the former being the highest priority. Any other name must be
            defined by creating a PriorityClass object with that name. If not specified, the
            pod priority will be default or zero if there is no default.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.ReadinessGates">
            <summary>
            If specified, all readiness gates will be evaluated for pod readiness. A pod is
            ready when all its containers are ready AND all conditions specified in the
            readiness gates have status equal to &quot;True&quot; More info:
            https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.ResourceClaims">
            <summary>
            ResourceClaims defines which ResourceClaims must be allocated and reserved
            before the Pod is allowed to start. The resources will be made available to
            those containers which consume them by name.
            
            This is an alpha field and requires enabling the DynamicResourceAllocation
            feature gate.
            
            This field is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.RestartPolicy">
            <summary>
            Restart policy for all containers within the pod. One of Always, OnFailure,
            Never. In some contexts, only a subset of those values may be permitted. Default
            to Always. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.RuntimeClassName">
            <summary>
            RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which
            should be used to run this pod.  If no RuntimeClass resource matches the named
            class, the pod will not be run. If unset or empty, the &quot;legacy&quot; RuntimeClass
            will be used, which is an implicit class with an empty definition that uses the
            default runtime handler. More info:
            https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.SchedulerName">
            <summary>
            If specified, the pod will be dispatched by specified scheduler. If not
            specified, the pod will be dispatched by default scheduler.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.SchedulingGates">
            <summary>
            SchedulingGates is an opaque list of values that if specified will block
            scheduling the pod. If schedulingGates is not empty, the pod will stay in the
            SchedulingGated state and the scheduler will not attempt to schedule the pod.
            
            SchedulingGates can only be set at pod creation time, and be removed only
            afterwards.
            
            This is a beta feature enabled by the PodSchedulingReadiness feature gate.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.SecurityContext">
            <summary>
            SecurityContext holds pod-level security attributes and common container
            settings. Optional: Defaults to empty.  See type description for default values
            of each field.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.ServiceAccount">
            <summary>
            DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
            Deprecated: Use serviceAccountName instead.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.ServiceAccountName">
            <summary>
            ServiceAccountName is the name of the ServiceAccount to use to run this pod.
            More info:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.SetHostnameAsFQDN">
            <summary>
            If true the pod&apos;s hostname will be configured as the pod&apos;s FQDN, rather than the
            leaf name (the default). In Linux containers, this means setting the FQDN in the
            hostname field of the kernel (the nodename field of struct utsname). In Windows
            containers, this means setting the registry value of hostname for the registry
            key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to
            FQDN. If a pod does not have FQDN, this has no effect. Default to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.ShareProcessNamespace">
            <summary>
            Share a single process namespace between all of the containers in a pod. When
            this is set containers will be able to view and signal processes from other
            containers in the same pod, and the first process in each container will not be
            assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional:
            Default to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Subdomain">
            <summary>
            If specified, the fully qualified Pod hostname will be
            &quot;&lt;hostname&gt;.&lt;subdomain&gt;.&lt;pod namespace&gt;.svc.&lt;cluster domain&gt;&quot;. If not specified,
            the pod will not have a domainname at all.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.TerminationGracePeriodSeconds">
            <summary>
            Optional duration in seconds the pod needs to terminate gracefully. May be
            decreased in delete request. Value must be non-negative integer. The value zero
            indicates stop immediately via the kill signal (no opportunity to shut down). If
            this value is nil, the default grace period will be used instead. The grace
            period is the duration in seconds after the processes running in the pod are
            sent a termination signal and the time when the processes are forcibly halted
            with a kill signal. Set this value longer than the expected cleanup time for
            your process. Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Tolerations">
            <summary>
            If specified, the pod&apos;s tolerations.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.TopologySpreadConstraints">
            <summary>
            TopologySpreadConstraints describes how a group of pods ought to spread across
            topology domains. Scheduler will schedule pods in a way which abides by the
            constraints. All topologySpreadConstraints are ANDed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodSpec.Volumes">
            <summary>
            List of volumes that can be mounted by containers belonging to the pod. More
            info: https://kubernetes.io/docs/concepts/storage/volumes
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodStatus">
            <summary>
            PodStatus represents information about the status of a pod. Status may trail the
            actual state of a system, especially if the node that hosts the pod cannot
            contact the control plane.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodStatus.#ctor">
            <summary>
            Initializes a new instance of the V1PodStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1PodCondition},System.Collections.Generic.IList{k8s.Models.V1ContainerStatus},System.Collections.Generic.IList{k8s.Models.V1ContainerStatus},System.String,System.Collections.Generic.IList{k8s.Models.V1HostIP},System.Collections.Generic.IList{k8s.Models.V1ContainerStatus},System.String,System.String,System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1PodIP},System.String,System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1PodResourceClaimStatus},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the V1PodStatus class.
            </summary>
            <param name="conditions">
            Current service state of pod. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
            </param>
            <param name="containerStatuses">
            The list has one entry per container in the manifest. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
            </param>
            <param name="ephemeralContainerStatuses">
            Status for any ephemeral containers that have run in this pod.
            </param>
            <param name="hostIP">
            hostIP holds the IP address of the host to which the pod is assigned. Empty if
            the pod has not started yet. A pod can be assigned to a node that has a problem
            in kubelet which in turns mean that HostIP will not be updated even if there is
            a node is assigned to pod
            </param>
            <param name="hostIPs">
            hostIPs holds the IP addresses allocated to the host. If this field is
            specified, the first entry must match the hostIP field. This list is empty if
            the pod has not started yet. A pod can be assigned to a node that has a problem
            in kubelet which in turns means that HostIPs will not be updated even if there
            is a node is assigned to this pod.
            </param>
            <param name="initContainerStatuses">
            The list has one entry per init container in the manifest. The most recent
            successful init container will have ready = true, the most recently started
            container will have startTime set. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
            </param>
            <param name="message">
            A human readable message indicating details about why the pod is in this
            condition.
            </param>
            <param name="nominatedNodeName">
            nominatedNodeName is set only when this pod preempts other pods on the node, but
            it cannot be scheduled right away as preemption victims receive their graceful
            termination periods. This field does not guarantee that the pod will be
            scheduled on this node. Scheduler may decide to place the pod elsewhere if other
            nodes become available sooner. Scheduler may also decide to give the resources
            on this node to a higher priority pod that is created after preemption. As a
            result, this field may be different than PodSpec.nodeName when the pod is
            scheduled.
            </param>
            <param name="phase">
            The phase of a Pod is a simple, high-level summary of where the Pod is in its
            lifecycle. The conditions array, the reason and message fields, and the
            individual container status arrays contain more detail about the pod&apos;s status.
            There are five possible phase values:
            
            Pending: The pod has been accepted by the Kubernetes system, but one or more of
            the container images has not been created. This includes time before being
            scheduled as well as time spent downloading images over the network, which could
            take a while. Running: The pod has been bound to a node, and all of the
            containers have been created. At least one container is still running, or is in
            the process of starting or restarting. Succeeded: All containers in the pod have
            terminated in success, and will not be restarted. Failed: All containers in the
            pod have terminated, and at least one container has terminated in failure. The
            container either exited with non-zero status or was terminated by the system.
            Unknown: For some reason the state of the pod could not be obtained, typically
            due to an error in communicating with the host of the pod.
            
            More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
            </param>
            <param name="podIP">
            podIP address allocated to the pod. Routable at least within the cluster. Empty
            if not yet allocated.
            </param>
            <param name="podIPs">
            podIPs holds the IP addresses allocated to the pod. If this field is specified,
            the 0th entry must match the podIP field. Pods may be allocated at most 1 value
            for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
            </param>
            <param name="qosClass">
            The Quality of Service (QOS) classification assigned to the pod based on
            resource requirements See PodQOSClass type for available QOS classes More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
            </param>
            <param name="reason">
            A brief CamelCase message indicating details about why the pod is in this state.
            e.g. &apos;Evicted&apos;
            </param>
            <param name="resize">
            Status of resources resize desired for pod&apos;s containers. It is empty if no
            resources resize is pending. Any changes to container resources will
            automatically set this to &quot;Proposed&quot;
            </param>
            <param name="resourceClaimStatuses">
            Status of resource claims.
            </param>
            <param name="startTime">
            RFC 3339 date and time at which the object was acknowledged by the Kubelet. This
            is before the Kubelet pulled the container image(s) for the pod.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodStatus.Conditions">
            <summary>
            Current service state of pod. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.ContainerStatuses">
            <summary>
            The list has one entry per container in the manifest. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.EphemeralContainerStatuses">
            <summary>
            Status for any ephemeral containers that have run in this pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.HostIP">
            <summary>
            hostIP holds the IP address of the host to which the pod is assigned. Empty if
            the pod has not started yet. A pod can be assigned to a node that has a problem
            in kubelet which in turns mean that HostIP will not be updated even if there is
            a node is assigned to pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.HostIPs">
            <summary>
            hostIPs holds the IP addresses allocated to the host. If this field is
            specified, the first entry must match the hostIP field. This list is empty if
            the pod has not started yet. A pod can be assigned to a node that has a problem
            in kubelet which in turns means that HostIPs will not be updated even if there
            is a node is assigned to this pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.InitContainerStatuses">
            <summary>
            The list has one entry per init container in the manifest. The most recent
            successful init container will have ready = true, the most recently started
            container will have startTime set. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.Message">
            <summary>
            A human readable message indicating details about why the pod is in this
            condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.NominatedNodeName">
            <summary>
            nominatedNodeName is set only when this pod preempts other pods on the node, but
            it cannot be scheduled right away as preemption victims receive their graceful
            termination periods. This field does not guarantee that the pod will be
            scheduled on this node. Scheduler may decide to place the pod elsewhere if other
            nodes become available sooner. Scheduler may also decide to give the resources
            on this node to a higher priority pod that is created after preemption. As a
            result, this field may be different than PodSpec.nodeName when the pod is
            scheduled.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.Phase">
            <summary>
            The phase of a Pod is a simple, high-level summary of where the Pod is in its
            lifecycle. The conditions array, the reason and message fields, and the
            individual container status arrays contain more detail about the pod&apos;s status.
            There are five possible phase values:
            
            Pending: The pod has been accepted by the Kubernetes system, but one or more of
            the container images has not been created. This includes time before being
            scheduled as well as time spent downloading images over the network, which could
            take a while. Running: The pod has been bound to a node, and all of the
            containers have been created. At least one container is still running, or is in
            the process of starting or restarting. Succeeded: All containers in the pod have
            terminated in success, and will not be restarted. Failed: All containers in the
            pod have terminated, and at least one container has terminated in failure. The
            container either exited with non-zero status or was terminated by the system.
            Unknown: For some reason the state of the pod could not be obtained, typically
            due to an error in communicating with the host of the pod.
            
            More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.PodIP">
            <summary>
            podIP address allocated to the pod. Routable at least within the cluster. Empty
            if not yet allocated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.PodIPs">
            <summary>
            podIPs holds the IP addresses allocated to the pod. If this field is specified,
            the 0th entry must match the podIP field. Pods may be allocated at most 1 value
            for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.QosClass">
            <summary>
            The Quality of Service (QOS) classification assigned to the pod based on
            resource requirements See PodQOSClass type for available QOS classes More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.Reason">
            <summary>
            A brief CamelCase message indicating details about why the pod is in this state.
            e.g. &apos;Evicted&apos;
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.Resize">
            <summary>
            Status of resources resize desired for pod&apos;s containers. It is empty if no
            resources resize is pending. Any changes to container resources will
            automatically set this to &quot;Proposed&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.ResourceClaimStatuses">
            <summary>
            Status of resource claims.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodStatus.StartTime">
            <summary>
            RFC 3339 date and time at which the object was acknowledged by the Kubelet. This
            is before the Kubelet pulled the container image(s) for the pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodTemplate">
            <summary>
            PodTemplate describes a template for creating copies of a predefined pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplate.#ctor">
            <summary>
            Initializes a new instance of the V1PodTemplate class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplate.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1PodTemplateSpec)">
            <summary>
            Initializes a new instance of the V1PodTemplate class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="template">
            Template defines the pods that will be created from this pod template.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1PodTemplate.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodTemplate.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodTemplate.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodTemplate.Template">
            <summary>
            Template defines the pods that will be created from this pod template.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodTemplateList">
            <summary>
            PodTemplateList is a list of PodTemplates.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplateList.#ctor">
            <summary>
            Initializes a new instance of the V1PodTemplateList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplateList.#ctor(System.Collections.Generic.IList{k8s.Models.V1PodTemplate},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1PodTemplateList class.
            </summary>
            <param name="items">
            List of pod templates
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1PodTemplateList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodTemplateList.Items">
            <summary>
            List of pod templates
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodTemplateList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodTemplateList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodTemplateList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PortStatus">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1PortStatus.#ctor">
            <summary>
            Initializes a new instance of the V1PortStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PortStatus.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1PortStatus class.
            </summary>
            <param name="port">
            Port is the port number of the service port of which status is recorded here
            </param>
            <param name="protocol">
            Protocol is the protocol of the service port of which status is recorded here
            The supported values are: &quot;TCP&quot;, &quot;UDP&quot;, &quot;SCTP&quot;
            </param>
            <param name="error">
            Error is to record the problem with the service port The format of the error
            shall comply with the following rules: - built-in error values shall be
            specified in this file and those shall use
            CamelCase names
            - cloud provider specific error values must have names that comply with the
            format foo.example.com/CamelCase.
            </param>
        </member>
        <member name="P:k8s.Models.V1PortStatus.Error">
            <summary>
            Error is to record the problem with the service port The format of the error
            shall comply with the following rules: - built-in error values shall be
            specified in this file and those shall use
            CamelCase names
            - cloud provider specific error values must have names that comply with the
            format foo.example.com/CamelCase.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PortStatus.Port">
            <summary>
            Port is the port number of the service port of which status is recorded here
            </summary>
        </member>
        <member name="P:k8s.Models.V1PortStatus.Protocol">
            <summary>
            Protocol is the protocol of the service port of which status is recorded here
            The supported values are: &quot;TCP&quot;, &quot;UDP&quot;, &quot;SCTP&quot;
            </summary>
        </member>
        <member name="M:k8s.Models.V1PortStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PortworxVolumeSource">
            <summary>
            PortworxVolumeSource represents a Portworx volume resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PortworxVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1PortworxVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PortworxVolumeSource.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1PortworxVolumeSource class.
            </summary>
            <param name="volumeID">
            volumeID uniquely identifies a Portworx volume
            </param>
            <param name="fsType">
            fSType represents the filesystem type to mount Must be a filesystem type
            supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;. Implicitly inferred
            to be &quot;ext4&quot; if unspecified.
            </param>
            <param name="readOnlyProperty">
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
        </member>
        <member name="P:k8s.Models.V1PortworxVolumeSource.FsType">
            <summary>
            fSType represents the filesystem type to mount Must be a filesystem type
            supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;. Implicitly inferred
            to be &quot;ext4&quot; if unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PortworxVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PortworxVolumeSource.VolumeID">
            <summary>
            volumeID uniquely identifies a Portworx volume
            </summary>
        </member>
        <member name="M:k8s.Models.V1PortworxVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PreferredSchedulingTerm">
            <summary>
            An empty preferred scheduling term matches all objects with implicit weight 0
            (i.e. it&apos;s a no-op). A null preferred scheduling term matches no objects (i.e.
            is also a no-op).
            </summary>
        </member>
        <member name="M:k8s.Models.V1PreferredSchedulingTerm.#ctor">
            <summary>
            Initializes a new instance of the V1PreferredSchedulingTerm class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PreferredSchedulingTerm.#ctor(k8s.Models.V1NodeSelectorTerm,System.Int32)">
            <summary>
            Initializes a new instance of the V1PreferredSchedulingTerm class.
            </summary>
            <param name="preference">
            A node selector term, associated with the corresponding weight.
            </param>
            <param name="weight">
            Weight associated with matching the corresponding nodeSelectorTerm, in the range
            1-100.
            </param>
        </member>
        <member name="P:k8s.Models.V1PreferredSchedulingTerm.Preference">
            <summary>
            A node selector term, associated with the corresponding weight.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PreferredSchedulingTerm.Weight">
            <summary>
            Weight associated with matching the corresponding nodeSelectorTerm, in the range
            1-100.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PreferredSchedulingTerm.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Probe">
            <summary>
            Probe describes a health check to be performed against a container to determine
            whether it is alive or ready to receive traffic.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Probe.#ctor">
            <summary>
            Initializes a new instance of the V1Probe class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Probe.#ctor(k8s.Models.V1ExecAction,System.Nullable{System.Int32},k8s.Models.V1GRPCAction,k8s.Models.V1HTTPGetAction,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1TCPSocketAction,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1Probe class.
            </summary>
            <param name="exec">
            Exec specifies the action to take.
            </param>
            <param name="failureThreshold">
            Minimum consecutive failures for the probe to be considered failed after having
            succeeded. Defaults to 3. Minimum value is 1.
            </param>
            <param name="grpc">
            GRPC specifies an action involving a GRPC port.
            </param>
            <param name="httpGet">
            HTTPGet specifies the http request to perform.
            </param>
            <param name="initialDelaySeconds">
            Number of seconds after the container has started before liveness probes are
            initiated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </param>
            <param name="periodSeconds">
            How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
            value is 1.
            </param>
            <param name="successThreshold">
            Minimum consecutive successes for the probe to be considered successful after
            having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value
            is 1.
            </param>
            <param name="tcpSocket">
            TCPSocket specifies an action involving a TCP port.
            </param>
            <param name="terminationGracePeriodSeconds">
            Optional duration in seconds the pod needs to terminate gracefully upon probe
            failure. The grace period is the duration in seconds after the processes running
            in the pod are sent a termination signal and the time when the processes are
            forcibly halted with a kill signal. Set this value longer than the expected
            cleanup time for your process. If this value is nil, the pod&apos;s
            terminationGracePeriodSeconds will be used. Otherwise, this value overrides the
            value provided by the pod spec. Value must be non-negative integer. The value
            zero indicates stop immediately via the kill signal (no opportunity to shut
            down). This is a beta field and requires enabling ProbeTerminationGracePeriod
            feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if
            unset.
            </param>
            <param name="timeoutSeconds">
            Number of seconds after which the probe times out. Defaults to 1 second. Minimum
            value is 1. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </param>
        </member>
        <member name="P:k8s.Models.V1Probe.Exec">
            <summary>
            Exec specifies the action to take.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.FailureThreshold">
            <summary>
            Minimum consecutive failures for the probe to be considered failed after having
            succeeded. Defaults to 3. Minimum value is 1.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.Grpc">
            <summary>
            GRPC specifies an action involving a GRPC port.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.HttpGet">
            <summary>
            HTTPGet specifies the http request to perform.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.InitialDelaySeconds">
            <summary>
            Number of seconds after the container has started before liveness probes are
            initiated. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.PeriodSeconds">
            <summary>
            How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
            value is 1.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.SuccessThreshold">
            <summary>
            Minimum consecutive successes for the probe to be considered successful after
            having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value
            is 1.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.TcpSocket">
            <summary>
            TCPSocket specifies an action involving a TCP port.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.TerminationGracePeriodSeconds">
            <summary>
            Optional duration in seconds the pod needs to terminate gracefully upon probe
            failure. The grace period is the duration in seconds after the processes running
            in the pod are sent a termination signal and the time when the processes are
            forcibly halted with a kill signal. Set this value longer than the expected
            cleanup time for your process. If this value is nil, the pod&apos;s
            terminationGracePeriodSeconds will be used. Otherwise, this value overrides the
            value provided by the pod spec. Value must be non-negative integer. The value
            zero indicates stop immediately via the kill signal (no opportunity to shut
            down). This is a beta field and requires enabling ProbeTerminationGracePeriod
            feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if
            unset.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Probe.TimeoutSeconds">
            <summary>
            Number of seconds after which the probe times out. Defaults to 1 second. Minimum
            value is 1. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
            </summary>
        </member>
        <member name="M:k8s.Models.V1Probe.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ProjectedVolumeSource">
            <summary>
            Represents a projected volume source
            </summary>
        </member>
        <member name="M:k8s.Models.V1ProjectedVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1ProjectedVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ProjectedVolumeSource.#ctor(System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1VolumeProjection})">
            <summary>
            Initializes a new instance of the V1ProjectedVolumeSource class.
            </summary>
            <param name="defaultMode">
            defaultMode are the mode bits used to set permissions on created files by
            default. Must be an octal value between 0000 and 0777 or a decimal value between
            0 and 511. YAML accepts both octal and decimal values, JSON requires decimal
            values for mode bits. Directories within the path are not affected by this
            setting. This might be in conflict with other options that affect the file mode,
            like fsGroup, and the result can be other mode bits set.
            </param>
            <param name="sources">
            sources is the list of volume projections
            </param>
        </member>
        <member name="P:k8s.Models.V1ProjectedVolumeSource.DefaultMode">
            <summary>
            defaultMode are the mode bits used to set permissions on created files by
            default. Must be an octal value between 0000 and 0777 or a decimal value between
            0 and 511. YAML accepts both octal and decimal values, JSON requires decimal
            values for mode bits. Directories within the path are not affected by this
            setting. This might be in conflict with other options that affect the file mode,
            like fsGroup, and the result can be other mode bits set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ProjectedVolumeSource.Sources">
            <summary>
            sources is the list of volume projections
            </summary>
        </member>
        <member name="M:k8s.Models.V1ProjectedVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1QuobyteVolumeSource">
            <summary>
            Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do
            not support ownership management or SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1QuobyteVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1QuobyteVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1QuobyteVolumeSource.#ctor(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1QuobyteVolumeSource class.
            </summary>
            <param name="registry">
            registry represents a single or multiple Quobyte Registry services specified as
            a string as host:port pair (multiple entries are separated with commas) which
            acts as the central registry for volumes
            </param>
            <param name="volume">
            volume is a string that references an already created Quobyte volume by name.
            </param>
            <param name="group">
            group to map volume access to Default is no group
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the Quobyte volume to be mounted with read-only
            permissions. Defaults to false.
            </param>
            <param name="tenant">
            tenant owning the given Quobyte volume in the Backend Used with dynamically
            provisioned Quobyte volumes, value is set by the plugin
            </param>
            <param name="user">
            user to map volume access to Defaults to serivceaccount user
            </param>
        </member>
        <member name="P:k8s.Models.V1QuobyteVolumeSource.Group">
            <summary>
            group to map volume access to Default is no group
            </summary>
        </member>
        <member name="P:k8s.Models.V1QuobyteVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the Quobyte volume to be mounted with read-only
            permissions. Defaults to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1QuobyteVolumeSource.Registry">
            <summary>
            registry represents a single or multiple Quobyte Registry services specified as
            a string as host:port pair (multiple entries are separated with commas) which
            acts as the central registry for volumes
            </summary>
        </member>
        <member name="P:k8s.Models.V1QuobyteVolumeSource.Tenant">
            <summary>
            tenant owning the given Quobyte volume in the Backend Used with dynamically
            provisioned Quobyte volumes, value is set by the plugin
            </summary>
        </member>
        <member name="P:k8s.Models.V1QuobyteVolumeSource.User">
            <summary>
            user to map volume access to Defaults to serivceaccount user
            </summary>
        </member>
        <member name="P:k8s.Models.V1QuobyteVolumeSource.Volume">
            <summary>
            volume is a string that references an already created Quobyte volume by name.
            </summary>
        </member>
        <member name="M:k8s.Models.V1QuobyteVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RBDPersistentVolumeSource">
            <summary>
            Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD
            volumes support ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RBDPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1RBDPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RBDPersistentVolumeSource.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Nullable{System.Boolean},k8s.Models.V1SecretReference,System.String)">
            <summary>
            Initializes a new instance of the V1RBDPersistentVolumeSource class.
            </summary>
            <param name="image">
            image is the rados image name. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="monitors">
            monitors is a collection of Ceph monitors. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="fsType">
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
            </param>
            <param name="keyring">
            keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More
            info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="pool">
            pool is the rados pool name. Default is rbd. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="secretRef">
            secretRef is name of the authentication secret for RBDUser. If provided
            overrides keyring. Default is nil. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="user">
            user is the rados user name. Default is admin. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.FsType">
            <summary>
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.Image">
            <summary>
            image is the rados image name. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.Keyring">
            <summary>
            keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More
            info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.Monitors">
            <summary>
            monitors is a collection of Ceph monitors. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.Pool">
            <summary>
            pool is the rados pool name. Default is rbd. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.SecretRef">
            <summary>
            secretRef is name of the authentication secret for RBDUser. If provided
            overrides keyring. Default is nil. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDPersistentVolumeSource.User">
            <summary>
            user is the rados user name. Default is admin. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="M:k8s.Models.V1RBDPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RBDVolumeSource">
            <summary>
            Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD
            volumes support ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RBDVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1RBDVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RBDVolumeSource.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Nullable{System.Boolean},k8s.Models.V1LocalObjectReference,System.String)">
            <summary>
            Initializes a new instance of the V1RBDVolumeSource class.
            </summary>
            <param name="image">
            image is the rados image name. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="monitors">
            monitors is a collection of Ceph monitors. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="fsType">
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
            </param>
            <param name="keyring">
            keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More
            info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="pool">
            pool is the rados pool name. Default is rbd. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="readOnlyProperty">
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="secretRef">
            secretRef is name of the authentication secret for RBDUser. If provided
            overrides keyring. Default is nil. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
            <param name="user">
            user is the rados user name. Default is admin. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </param>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.FsType">
            <summary>
            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure
            that the filesystem type is supported by the host operating system. Examples:
            &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.Image">
            <summary>
            image is the rados image name. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.Keyring">
            <summary>
            keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More
            info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.Monitors">
            <summary>
            monitors is a collection of Ceph monitors. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.Pool">
            <summary>
            pool is the rados pool name. Default is rbd. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
            false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.SecretRef">
            <summary>
            secretRef is name of the authentication secret for RBDUser. If provided
            overrides keyring. Default is nil. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="P:k8s.Models.V1RBDVolumeSource.User">
            <summary>
            user is the rados user name. Default is admin. More info:
            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            </summary>
        </member>
        <member name="M:k8s.Models.V1RBDVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicationController">
            <summary>
            ReplicationController represents the configuration of a replication controller.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationController.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicationController class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationController.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1ReplicationControllerSpec,k8s.Models.V1ReplicationControllerStatus)">
            <summary>
            Initializes a new instance of the V1ReplicationController class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            If the Labels of a ReplicationController are empty, they are defaulted to be the
            same as the Pod(s) that the replication controller manages. Standard object&apos;s
            metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the specification of the desired behavior of the replication
            controller. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Status is the most recently observed status of the replication controller. This
            data may be out of date by some window of time. Populated by the system.
            Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicationController.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationController.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationController.Metadata">
            <summary>
            If the Labels of a ReplicationController are empty, they are defaulted to be the
            same as the Pod(s) that the replication controller manages. Standard object&apos;s
            metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationController.Spec">
            <summary>
            Spec defines the specification of the desired behavior of the replication
            controller. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationController.Status">
            <summary>
            Status is the most recently observed status of the replication controller. This
            data may be out of date by some window of time. Populated by the system.
            Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationController.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicationControllerCondition">
            <summary>
            ReplicationControllerCondition describes the state of a replication controller
            at a certain point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerCondition.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicationControllerCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ReplicationControllerCondition class.
            </summary>
            <param name="status">
            Status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            Type of replication controller condition.
            </param>
            <param name="lastTransitionTime">
            The last time the condition transitioned from one status to another.
            </param>
            <param name="message">
            A human readable message indicating details about the transition.
            </param>
            <param name="reason">
            The reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerCondition.LastTransitionTime">
            <summary>
            The last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerCondition.Message">
            <summary>
            A human readable message indicating details about the transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerCondition.Reason">
            <summary>
            The reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerCondition.Status">
            <summary>
            Status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerCondition.Type">
            <summary>
            Type of replication controller condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicationControllerList">
            <summary>
            ReplicationControllerList is a collection of replication controllers.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerList.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicationControllerList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ReplicationController},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ReplicationControllerList class.
            </summary>
            <param name="items">
            List of replication controllers. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerList.Items">
            <summary>
            List of replication controllers. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicationControllerSpec">
            <summary>
            ReplicationControllerSpec is the specification of a replication controller.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerSpec.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicationControllerSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerSpec.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.String},k8s.Models.V1PodTemplateSpec)">
            <summary>
            Initializes a new instance of the V1ReplicationControllerSpec class.
            </summary>
            <param name="minReadySeconds">
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing, for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </param>
            <param name="replicas">
            Replicas is the number of desired replicas. This is a pointer to distinguish
            between explicit zero and unspecified. Defaults to 1. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
            </param>
            <param name="selector">
            Selector is a label query over pods that should match the Replicas count. If
            Selector is empty, it is defaulted to the labels present on the Pod template.
            Label keys and values that must match in order to be controlled by this
            replication controller, if empty defaulted to labels on Pod template. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </param>
            <param name="template">
            Template is the object that describes the pod that will be created if
            insufficient replicas are detected. This takes precedence over a TemplateRef.
            The only allowed template.spec.restartPolicy value is &quot;Always&quot;. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerSpec.MinReadySeconds">
            <summary>
            Minimum number of seconds for which a newly created pod should be ready without
            any of its container crashing, for it to be considered available. Defaults to 0
            (pod will be considered available as soon as it is ready)
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerSpec.Replicas">
            <summary>
            Replicas is the number of desired replicas. This is a pointer to distinguish
            between explicit zero and unspecified. Defaults to 1. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerSpec.Selector">
            <summary>
            Selector is a label query over pods that should match the Replicas count. If
            Selector is empty, it is defaulted to the labels present on the Pod template.
            Label keys and values that must match in order to be controlled by this
            replication controller, if empty defaulted to labels on Pod template. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerSpec.Template">
            <summary>
            Template is the object that describes the pod that will be created if
            insufficient replicas are detected. This takes precedence over a TemplateRef.
            The only allowed template.spec.restartPolicy value is &quot;Always&quot;. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ReplicationControllerStatus">
            <summary>
            ReplicationControllerStatus represents the current status of a replication
            controller.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerStatus.#ctor">
            <summary>
            Initializes a new instance of the V1ReplicationControllerStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerStatus.#ctor(System.Int32,System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1ReplicationControllerCondition},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1ReplicationControllerStatus class.
            </summary>
            <param name="replicas">
            Replicas is the most recently observed number of replicas. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
            </param>
            <param name="availableReplicas">
            The number of available replicas (ready for at least minReadySeconds) for this
            replication controller.
            </param>
            <param name="conditions">
            Represents the latest available observations of a replication controller&apos;s
            current state.
            </param>
            <param name="fullyLabeledReplicas">
            The number of pods that have labels matching the labels of the pod template of
            the replication controller.
            </param>
            <param name="observedGeneration">
            ObservedGeneration reflects the generation of the most recently observed
            replication controller.
            </param>
            <param name="readyReplicas">
            The number of ready replicas for this replication controller.
            </param>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerStatus.AvailableReplicas">
            <summary>
            The number of available replicas (ready for at least minReadySeconds) for this
            replication controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerStatus.Conditions">
            <summary>
            Represents the latest available observations of a replication controller&apos;s
            current state.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerStatus.FullyLabeledReplicas">
            <summary>
            The number of pods that have labels matching the labels of the pod template of
            the replication controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerStatus.ObservedGeneration">
            <summary>
            ObservedGeneration reflects the generation of the most recently observed
            replication controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerStatus.ReadyReplicas">
            <summary>
            The number of ready replicas for this replication controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ReplicationControllerStatus.Replicas">
            <summary>
            Replicas is the most recently observed number of replicas. More info:
            https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
            </summary>
        </member>
        <member name="M:k8s.Models.V1ReplicationControllerStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceClaim">
            <summary>
            ResourceClaim references one entry in PodSpec.ResourceClaims.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceClaim.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceClaim class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceClaim.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1ResourceClaim class.
            </summary>
            <param name="name">
            Name must match the name of one entry in pod.spec.resourceClaims of the Pod
            where this field is used. It makes that resource available inside a container.
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceClaim.Name">
            <summary>
            Name must match the name of one entry in pod.spec.resourceClaims of the Pod
            where this field is used. It makes that resource available inside a container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceClaim.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceFieldSelector">
            <summary>
            ResourceFieldSelector represents container resources (cpu, memory) and their
            output format
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceFieldSelector.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceFieldSelector class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceFieldSelector.#ctor(System.String,System.String,k8s.Models.ResourceQuantity)">
            <summary>
            Initializes a new instance of the V1ResourceFieldSelector class.
            </summary>
            <param name="resource">
            Required: resource to select
            </param>
            <param name="containerName">
            Container name: required for volumes, optional for env vars
            </param>
            <param name="divisor">
            Specifies the output format of the exposed resources, defaults to &quot;1&quot;
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceFieldSelector.ContainerName">
            <summary>
            Container name: required for volumes, optional for env vars
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceFieldSelector.Divisor">
            <summary>
            Specifies the output format of the exposed resources, defaults to &quot;1&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceFieldSelector.Resource">
            <summary>
            Required: resource to select
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceFieldSelector.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceQuota">
            <summary>
            ResourceQuota sets aggregate quota restrictions enforced per namespace
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuota.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceQuota class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuota.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1ResourceQuotaSpec,k8s.Models.V1ResourceQuotaStatus)">
            <summary>
            Initializes a new instance of the V1ResourceQuota class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the desired quota.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Status defines the actual enforced quota and its current usage.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceQuota.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuota.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuota.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuota.Spec">
            <summary>
            Spec defines the desired quota.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuota.Status">
            <summary>
            Status defines the actual enforced quota and its current usage.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuota.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceQuotaList">
            <summary>
            ResourceQuotaList is a list of ResourceQuota items.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaList.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceQuotaList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ResourceQuota},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ResourceQuotaList class.
            </summary>
            <param name="items">
            Items is a list of ResourceQuota objects. More info:
            https://kubernetes.io/docs/concepts/policy/resource-quotas/
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaList.Items">
            <summary>
            Items is a list of ResourceQuota objects. More info:
            https://kubernetes.io/docs/concepts/policy/resource-quotas/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceQuotaSpec">
            <summary>
            ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaSpec.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceQuotaSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaSpec.#ctor(System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},k8s.Models.V1ScopeSelector,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1ResourceQuotaSpec class.
            </summary>
            <param name="hard">
            hard is the set of desired hard limits for each named resource. More info:
            https://kubernetes.io/docs/concepts/policy/resource-quotas/
            </param>
            <param name="scopeSelector">
            scopeSelector is also a collection of filters like scopes that must match each
            object tracked by a quota but expressed using ScopeSelectorOperator in
            combination with possible values. For a resource to match, both scopes AND
            scopeSelector (if specified in spec), must be matched.
            </param>
            <param name="scopes">
            A collection of filters that must match each object tracked by a quota. If not
            specified, the quota matches all objects.
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaSpec.Hard">
            <summary>
            hard is the set of desired hard limits for each named resource. More info:
            https://kubernetes.io/docs/concepts/policy/resource-quotas/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaSpec.ScopeSelector">
            <summary>
            scopeSelector is also a collection of filters like scopes that must match each
            object tracked by a quota but expressed using ScopeSelectorOperator in
            combination with possible values. For a resource to match, both scopes AND
            scopeSelector (if specified in spec), must be matched.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaSpec.Scopes">
            <summary>
            A collection of filters that must match each object tracked by a quota. If not
            specified, the quota matches all objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceQuotaStatus">
            <summary>
            ResourceQuotaStatus defines the enforced hard limits and observed use.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaStatus.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceQuotaStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaStatus.#ctor(System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity})">
            <summary>
            Initializes a new instance of the V1ResourceQuotaStatus class.
            </summary>
            <param name="hard">
            Hard is the set of enforced hard limits for each named resource. More info:
            https://kubernetes.io/docs/concepts/policy/resource-quotas/
            </param>
            <param name="used">
            Used is the current observed total usage of the resource in the namespace.
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaStatus.Hard">
            <summary>
            Hard is the set of enforced hard limits for each named resource. More info:
            https://kubernetes.io/docs/concepts/policy/resource-quotas/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceQuotaStatus.Used">
            <summary>
            Used is the current observed total usage of the resource in the namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceQuotaStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ResourceRequirements">
            <summary>
            ResourceRequirements describes the compute resource requirements.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceRequirements.#ctor">
            <summary>
            Initializes a new instance of the V1ResourceRequirements class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceRequirements.#ctor(System.Collections.Generic.IList{k8s.Models.V1ResourceClaim},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity},System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity})">
            <summary>
            Initializes a new instance of the V1ResourceRequirements class.
            </summary>
            <param name="claims">
            Claims lists the names of resources, defined in spec.resourceClaims, that are
            used by this container.
            
            This is an alpha field and requires enabling the DynamicResourceAllocation
            feature gate.
            
            This field is immutable. It can only be set for containers.
            </param>
            <param name="limits">
            Limits describes the maximum amount of compute resources allowed. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </param>
            <param name="requests">
            Requests describes the minimum amount of compute resources required. If Requests
            is omitted for a container, it defaults to Limits if that is explicitly
            specified, otherwise to an implementation-defined value. Requests cannot exceed
            Limits. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </param>
        </member>
        <member name="P:k8s.Models.V1ResourceRequirements.Claims">
            <summary>
            Claims lists the names of resources, defined in spec.resourceClaims, that are
            used by this container.
            
            This is an alpha field and requires enabling the DynamicResourceAllocation
            feature gate.
            
            This field is immutable. It can only be set for containers.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceRequirements.Limits">
            <summary>
            Limits describes the maximum amount of compute resources allowed. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ResourceRequirements.Requests">
            <summary>
            Requests describes the minimum amount of compute resources required. If Requests
            is omitted for a container, it defaults to Limits if that is explicitly
            specified, otherwise to an implementation-defined value. Requests cannot exceed
            Limits. More info:
            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            </summary>
        </member>
        <member name="M:k8s.Models.V1ResourceRequirements.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SELinuxOptions">
            <summary>
            SELinuxOptions are the labels to be applied to the container
            </summary>
        </member>
        <member name="M:k8s.Models.V1SELinuxOptions.#ctor">
            <summary>
            Initializes a new instance of the V1SELinuxOptions class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SELinuxOptions.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1SELinuxOptions class.
            </summary>
            <param name="level">
            Level is SELinux level label that applies to the container.
            </param>
            <param name="role">
            Role is a SELinux role label that applies to the container.
            </param>
            <param name="type">
            Type is a SELinux type label that applies to the container.
            </param>
            <param name="user">
            User is a SELinux user label that applies to the container.
            </param>
        </member>
        <member name="P:k8s.Models.V1SELinuxOptions.Level">
            <summary>
            Level is SELinux level label that applies to the container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SELinuxOptions.Role">
            <summary>
            Role is a SELinux role label that applies to the container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SELinuxOptions.Type">
            <summary>
            Type is a SELinux type label that applies to the container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SELinuxOptions.User">
            <summary>
            User is a SELinux user label that applies to the container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SELinuxOptions.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ScaleIOPersistentVolumeSource">
            <summary>
            ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleIOPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1ScaleIOPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleIOPersistentVolumeSource.#ctor(System.String,k8s.Models.V1SecretReference,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ScaleIOPersistentVolumeSource class.
            </summary>
            <param name="gateway">
            gateway is the host address of the ScaleIO API Gateway.
            </param>
            <param name="secretRef">
            secretRef references to the secret for ScaleIO user and other sensitive
            information. If this is not provided, Login operation will fail.
            </param>
            <param name="system">
            system is the name of the storage system as configured in ScaleIO.
            </param>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Default is &quot;xfs&quot;
            </param>
            <param name="protectionDomain">
            protectionDomain is the name of the ScaleIO Protection Domain for the configured
            storage.
            </param>
            <param name="readOnlyProperty">
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
            <param name="sslEnabled">
            sslEnabled is the flag to enable/disable SSL communication with Gateway, default
            false
            </param>
            <param name="storageMode">
            storageMode indicates whether the storage for a volume should be
            ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
            </param>
            <param name="storagePool">
            storagePool is the ScaleIO Storage Pool associated with the protection domain.
            </param>
            <param name="volumeName">
            volumeName is the name of a volume already created in the ScaleIO system that is
            associated with this volume source.
            </param>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Default is &quot;xfs&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.Gateway">
            <summary>
            gateway is the host address of the ScaleIO API Gateway.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.ProtectionDomain">
            <summary>
            protectionDomain is the name of the ScaleIO Protection Domain for the configured
            storage.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.SecretRef">
            <summary>
            secretRef references to the secret for ScaleIO user and other sensitive
            information. If this is not provided, Login operation will fail.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.SslEnabled">
            <summary>
            sslEnabled is the flag to enable/disable SSL communication with Gateway, default
            false
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.StorageMode">
            <summary>
            storageMode indicates whether the storage for a volume should be
            ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.StoragePool">
            <summary>
            storagePool is the ScaleIO Storage Pool associated with the protection domain.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.System">
            <summary>
            system is the name of the storage system as configured in ScaleIO.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOPersistentVolumeSource.VolumeName">
            <summary>
            volumeName is the name of a volume already created in the ScaleIO system that is
            associated with this volume source.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleIOPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ScaleIOVolumeSource">
            <summary>
            ScaleIOVolumeSource represents a persistent ScaleIO volume
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleIOVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1ScaleIOVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleIOVolumeSource.#ctor(System.String,k8s.Models.V1LocalObjectReference,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ScaleIOVolumeSource class.
            </summary>
            <param name="gateway">
            gateway is the host address of the ScaleIO API Gateway.
            </param>
            <param name="secretRef">
            secretRef references to the secret for ScaleIO user and other sensitive
            information. If this is not provided, Login operation will fail.
            </param>
            <param name="system">
            system is the name of the storage system as configured in ScaleIO.
            </param>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Default is &quot;xfs&quot;.
            </param>
            <param name="protectionDomain">
            protectionDomain is the name of the ScaleIO Protection Domain for the configured
            storage.
            </param>
            <param name="readOnlyProperty">
            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
            <param name="sslEnabled">
            sslEnabled Flag enable/disable SSL communication with Gateway, default false
            </param>
            <param name="storageMode">
            storageMode indicates whether the storage for a volume should be
            ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
            </param>
            <param name="storagePool">
            storagePool is the ScaleIO Storage Pool associated with the protection domain.
            </param>
            <param name="volumeName">
            volumeName is the name of a volume already created in the ScaleIO system that is
            associated with this volume source.
            </param>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Default is &quot;xfs&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.Gateway">
            <summary>
            gateway is the host address of the ScaleIO API Gateway.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.ProtectionDomain">
            <summary>
            protectionDomain is the name of the ScaleIO Protection Domain for the configured
            storage.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.SecretRef">
            <summary>
            secretRef references to the secret for ScaleIO user and other sensitive
            information. If this is not provided, Login operation will fail.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.SslEnabled">
            <summary>
            sslEnabled Flag enable/disable SSL communication with Gateway, default false
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.StorageMode">
            <summary>
            storageMode indicates whether the storage for a volume should be
            ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.StoragePool">
            <summary>
            storagePool is the ScaleIO Storage Pool associated with the protection domain.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.System">
            <summary>
            system is the name of the storage system as configured in ScaleIO.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScaleIOVolumeSource.VolumeName">
            <summary>
            volumeName is the name of a volume already created in the ScaleIO system that is
            associated with this volume source.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScaleIOVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ScopeSelector">
            <summary>
            A scope selector represents the AND of the selectors represented by the
            scoped-resource selector requirements.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScopeSelector.#ctor">
            <summary>
            Initializes a new instance of the V1ScopeSelector class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScopeSelector.#ctor(System.Collections.Generic.IList{k8s.Models.V1ScopedResourceSelectorRequirement})">
            <summary>
            Initializes a new instance of the V1ScopeSelector class.
            </summary>
            <param name="matchExpressions">
            A list of scope selector requirements by scope of the resources.
            </param>
        </member>
        <member name="P:k8s.Models.V1ScopeSelector.MatchExpressions">
            <summary>
            A list of scope selector requirements by scope of the resources.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScopeSelector.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ScopedResourceSelectorRequirement">
            <summary>
            A scoped-resource selector requirement is a selector that contains values, a
            scope name, and an operator that relates the scope name and values.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScopedResourceSelectorRequirement.#ctor">
            <summary>
            Initializes a new instance of the V1ScopedResourceSelectorRequirement class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScopedResourceSelectorRequirement.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1ScopedResourceSelectorRequirement class.
            </summary>
            <param name="operatorProperty">
            Represents a scope&apos;s relationship to a set of values. Valid operators are In,
            NotIn, Exists, DoesNotExist.
            </param>
            <param name="scopeName">
            The name of the scope that the selector applies to.
            </param>
            <param name="values">
            An array of string values. If the operator is In or NotIn, the values array must
            be non-empty. If the operator is Exists or DoesNotExist, the values array must
            be empty. This array is replaced during a strategic merge patch.
            </param>
        </member>
        <member name="P:k8s.Models.V1ScopedResourceSelectorRequirement.OperatorProperty">
            <summary>
            Represents a scope&apos;s relationship to a set of values. Valid operators are In,
            NotIn, Exists, DoesNotExist.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScopedResourceSelectorRequirement.ScopeName">
            <summary>
            The name of the scope that the selector applies to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ScopedResourceSelectorRequirement.Values">
            <summary>
            An array of string values. If the operator is In or NotIn, the values array must
            be non-empty. If the operator is Exists or DoesNotExist, the values array must
            be empty. This array is replaced during a strategic merge patch.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ScopedResourceSelectorRequirement.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SeccompProfile">
            <summary>
            SeccompProfile defines a pod/container&apos;s seccomp profile settings. Only one
            profile source may be set.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SeccompProfile.#ctor">
            <summary>
            Initializes a new instance of the V1SeccompProfile class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SeccompProfile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1SeccompProfile class.
            </summary>
            <param name="type">
            type indicates which kind of seccomp profile will be applied. Valid options are:
            
            Localhost - a profile defined in a file on the node should be used.
            RuntimeDefault - the container runtime default profile should be used.
            Unconfined - no profile should be applied.
            </param>
            <param name="localhostProfile">
            localhostProfile indicates a profile defined in a file on the node should be
            used. The profile must be preconfigured on the node to work. Must be a
            descending path, relative to the kubelet&apos;s configured seccomp profile location.
            Must be set if type is &quot;Localhost&quot;. Must NOT be set for any other type.
            </param>
        </member>
        <member name="P:k8s.Models.V1SeccompProfile.LocalhostProfile">
            <summary>
            localhostProfile indicates a profile defined in a file on the node should be
            used. The profile must be preconfigured on the node to work. Must be a
            descending path, relative to the kubelet&apos;s configured seccomp profile location.
            Must be set if type is &quot;Localhost&quot;. Must NOT be set for any other type.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SeccompProfile.Type">
            <summary>
            type indicates which kind of seccomp profile will be applied. Valid options are:
            
            Localhost - a profile defined in a file on the node should be used.
            RuntimeDefault - the container runtime default profile should be used.
            Unconfined - no profile should be applied.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SeccompProfile.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Secret">
            <summary>
            Secret holds secret data of a certain type. The total bytes of the values in the
            Data field must be less than MaxSecretSize bytes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Secret.#ctor">
            <summary>
            Initializes a new instance of the V1Secret class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Secret.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.Nullable{System.Boolean},System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the V1Secret class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="data">
            Data contains the secret data. Each key must consist of alphanumeric characters,
            &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. The serialized form of the secret data is a base64 encoded
            string, representing the arbitrary (possibly non-string) data value here.
            Described in https://tools.ietf.org/html/rfc4648#section-4
            </param>
            <param name="immutable">
            Immutable, if set to true, ensures that data stored in the Secret cannot be
            updated (only object metadata can be modified). If not set to true, the field
            can be modified at any time. Defaulted to nil.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="stringData">
            stringData allows specifying non-binary secret data in string form. It is
            provided as a write-only input field for convenience. All keys and values are
            merged into the data field on write, overwriting any existing values. The
            stringData field is never output when reading from the API.
            </param>
            <param name="type">
            Used to facilitate programmatic handling of secret data. More info:
            https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
            </param>
        </member>
        <member name="P:k8s.Models.V1Secret.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Secret.Data">
            <summary>
            Data contains the secret data. Each key must consist of alphanumeric characters,
            &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. The serialized form of the secret data is a base64 encoded
            string, representing the arbitrary (possibly non-string) data value here.
            Described in https://tools.ietf.org/html/rfc4648#section-4
            </summary>
        </member>
        <member name="P:k8s.Models.V1Secret.Immutable">
            <summary>
            Immutable, if set to true, ensures that data stored in the Secret cannot be
            updated (only object metadata can be modified). If not set to true, the field
            can be modified at any time. Defaulted to nil.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Secret.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Secret.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Secret.StringData">
            <summary>
            stringData allows specifying non-binary secret data in string form. It is
            provided as a write-only input field for convenience. All keys and values are
            merged into the data field on write, overwriting any existing values. The
            stringData field is never output when reading from the API.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Secret.Type">
            <summary>
            Used to facilitate programmatic handling of secret data. More info:
            https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
            </summary>
        </member>
        <member name="M:k8s.Models.V1Secret.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SecretEnvSource">
            <summary>
            SecretEnvSource selects a Secret to populate the environment variables with.
            
            The contents of the target Secret&apos;s Data field will represent the key-value
            pairs as environment variables.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretEnvSource.#ctor">
            <summary>
            Initializes a new instance of the V1SecretEnvSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretEnvSource.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1SecretEnvSource class.
            </summary>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="optional">
            Specify whether the Secret must be defined
            </param>
        </member>
        <member name="P:k8s.Models.V1SecretEnvSource.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretEnvSource.Optional">
            <summary>
            Specify whether the Secret must be defined
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretEnvSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SecretKeySelector">
            <summary>
            SecretKeySelector selects a key of a Secret.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretKeySelector.#ctor">
            <summary>
            Initializes a new instance of the V1SecretKeySelector class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretKeySelector.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1SecretKeySelector class.
            </summary>
            <param name="key">
            The key of the secret to select from.  Must be a valid secret key.
            </param>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="optional">
            Specify whether the Secret or its key must be defined
            </param>
        </member>
        <member name="P:k8s.Models.V1SecretKeySelector.Key">
            <summary>
            The key of the secret to select from.  Must be a valid secret key.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretKeySelector.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretKeySelector.Optional">
            <summary>
            Specify whether the Secret or its key must be defined
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretKeySelector.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SecretList">
            <summary>
            SecretList is a list of Secret.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretList.#ctor">
            <summary>
            Initializes a new instance of the V1SecretList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Secret},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1SecretList class.
            </summary>
            <param name="items">
            Items is a list of secret objects. More info:
            https://kubernetes.io/docs/concepts/configuration/secret
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1SecretList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretList.Items">
            <summary>
            Items is a list of secret objects. More info:
            https://kubernetes.io/docs/concepts/configuration/secret
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SecretProjection">
            <summary>
            Adapts a secret into a projected volume.
            
            The contents of the target Secret&apos;s Data field will be presented in a projected
            volume as files using the keys in the Data field as the file names. Note that
            this is identical to a secret volume source without the default mode.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretProjection.#ctor">
            <summary>
            Initializes a new instance of the V1SecretProjection class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretProjection.#ctor(System.Collections.Generic.IList{k8s.Models.V1KeyToPath},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1SecretProjection class.
            </summary>
            <param name="items">
            items if unspecified, each key-value pair in the Data field of the referenced
            Secret will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the Secret, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </param>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="optional">
            optional field specify whether the Secret or its key must be defined
            </param>
        </member>
        <member name="P:k8s.Models.V1SecretProjection.Items">
            <summary>
            items if unspecified, each key-value pair in the Data field of the referenced
            Secret will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the Secret, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretProjection.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretProjection.Optional">
            <summary>
            optional field specify whether the Secret or its key must be defined
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretProjection.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SecretReference">
            <summary>
            SecretReference represents a Secret Reference. It has enough information to
            retrieve secret in any namespace
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretReference.#ctor">
            <summary>
            Initializes a new instance of the V1SecretReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretReference.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1SecretReference class.
            </summary>
            <param name="name">
            name is unique within a namespace to reference a secret resource.
            </param>
            <param name="namespaceProperty">
            namespace defines the space within which the secret name must be unique.
            </param>
        </member>
        <member name="P:k8s.Models.V1SecretReference.Name">
            <summary>
            name is unique within a namespace to reference a secret resource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretReference.NamespaceProperty">
            <summary>
            namespace defines the space within which the secret name must be unique.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SecretVolumeSource">
            <summary>
            Adapts a Secret into a volume.
            
            The contents of the target Secret&apos;s Data field will be presented in a volume as
            files using the keys in the Data field as the file names. Secret volumes support
            ownership management and SELinux relabeling.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1SecretVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretVolumeSource.#ctor(System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1KeyToPath},System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the V1SecretVolumeSource class.
            </summary>
            <param name="defaultMode">
            defaultMode is Optional: mode bits used to set permissions on created files by
            default. Must be an octal value between 0000 and 0777 or a decimal value between
            0 and 511. YAML accepts both octal and decimal values, JSON requires decimal
            values for mode bits. Defaults to 0644. Directories within the path are not
            affected by this setting. This might be in conflict with other options that
            affect the file mode, like fsGroup, and the result can be other mode bits set.
            </param>
            <param name="items">
            items If unspecified, each key-value pair in the Data field of the referenced
            Secret will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the Secret, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </param>
            <param name="optional">
            optional field specify whether the Secret or its keys must be defined
            </param>
            <param name="secretName">
            secretName is the name of the secret in the pod&apos;s namespace to use. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#secret
            </param>
        </member>
        <member name="P:k8s.Models.V1SecretVolumeSource.DefaultMode">
            <summary>
            defaultMode is Optional: mode bits used to set permissions on created files by
            default. Must be an octal value between 0000 and 0777 or a decimal value between
            0 and 511. YAML accepts both octal and decimal values, JSON requires decimal
            values for mode bits. Defaults to 0644. Directories within the path are not
            affected by this setting. This might be in conflict with other options that
            affect the file mode, like fsGroup, and the result can be other mode bits set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretVolumeSource.Items">
            <summary>
            items If unspecified, each key-value pair in the Data field of the referenced
            Secret will be projected into the volume as a file whose name is the key and
            content is the value. If specified, the listed keys will be projected into the
            specified paths, and unlisted keys will not be present. If a key is specified
            which is not present in the Secret, the volume setup will error unless it is
            marked optional. Paths must be relative and may not contain the &apos;..&apos; path or
            start with &apos;..&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretVolumeSource.Optional">
            <summary>
            optional field specify whether the Secret or its keys must be defined
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecretVolumeSource.SecretName">
            <summary>
            secretName is the name of the secret in the pod&apos;s namespace to use. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#secret
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecretVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SecurityContext">
            <summary>
            SecurityContext holds security configuration that will be applied to a
            container. Some fields are present in both SecurityContext and
            PodSecurityContext.  When both are set, the values in SecurityContext take
            precedence.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecurityContext.#ctor">
            <summary>
            Initializes a new instance of the V1SecurityContext class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecurityContext.#ctor(System.Nullable{System.Boolean},k8s.Models.V1Capabilities,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},k8s.Models.V1SELinuxOptions,k8s.Models.V1SeccompProfile,k8s.Models.V1WindowsSecurityContextOptions)">
            <summary>
            Initializes a new instance of the V1SecurityContext class.
            </summary>
            <param name="allowPrivilegeEscalation">
            AllowPrivilegeEscalation controls whether a process can gain more privileges
            than its parent process. This bool directly controls if the no_new_privs flag
            will be set on the container process. AllowPrivilegeEscalation is true always
            when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this
            field cannot be set when spec.os.name is windows.
            </param>
            <param name="capabilities">
            The capabilities to add/drop when running containers. Defaults to the default
            set of capabilities granted by the container runtime. Note that this field
            cannot be set when spec.os.name is windows.
            </param>
            <param name="privileged">
            Run container in privileged mode. Processes in privileged containers are
            essentially equivalent to root on the host. Defaults to false. Note that this
            field cannot be set when spec.os.name is windows.
            </param>
            <param name="procMount">
            procMount denotes the type of proc mount to use for the containers. The default
            is DefaultProcMount which uses the container runtime defaults for readonly paths
            and masked paths. This requires the ProcMountType feature flag to be enabled.
            Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="readOnlyRootFilesystem">
            Whether this container has a read-only root filesystem. Default is false. Note
            that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="runAsGroup">
            The GID to run the entrypoint of the container process. Uses runtime default if
            unset. May also be set in PodSecurityContext.  If set in both SecurityContext
            and PodSecurityContext, the value specified in SecurityContext takes precedence.
            Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="runAsNonRoot">
            Indicates that the container must run as a non-root user. If true, the Kubelet
            will validate the image at runtime to ensure that it does not run as UID 0
            (root) and fail to start the container if it does. If unset or false, no such
            validation will be performed. May also be set in PodSecurityContext.  If set in
            both SecurityContext and PodSecurityContext, the value specified in
            SecurityContext takes precedence.
            </param>
            <param name="runAsUser">
            The UID to run the entrypoint of the container process. Defaults to user
            specified in image metadata if unspecified. May also be set in
            PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the
            value specified in SecurityContext takes precedence. Note that this field cannot
            be set when spec.os.name is windows.
            </param>
            <param name="seLinuxOptions">
            The SELinux context to be applied to the container. If unspecified, the
            container runtime will allocate a random SELinux context for each container. 
            May also be set in PodSecurityContext.  If set in both SecurityContext and
            PodSecurityContext, the value specified in SecurityContext takes precedence.
            Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="seccompProfile">
            The seccomp options to use by this container. If seccomp options are provided at
            both the pod &amp; container level, the container options override the pod options.
            Note that this field cannot be set when spec.os.name is windows.
            </param>
            <param name="windowsOptions">
            The Windows specific settings applied to all containers. If unspecified, the
            options from the PodSecurityContext will be used. If set in both SecurityContext
            and PodSecurityContext, the value specified in SecurityContext takes precedence.
            Note that this field cannot be set when spec.os.name is linux.
            </param>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.AllowPrivilegeEscalation">
            <summary>
            AllowPrivilegeEscalation controls whether a process can gain more privileges
            than its parent process. This bool directly controls if the no_new_privs flag
            will be set on the container process. AllowPrivilegeEscalation is true always
            when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this
            field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.Capabilities">
            <summary>
            The capabilities to add/drop when running containers. Defaults to the default
            set of capabilities granted by the container runtime. Note that this field
            cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.Privileged">
            <summary>
            Run container in privileged mode. Processes in privileged containers are
            essentially equivalent to root on the host. Defaults to false. Note that this
            field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.ProcMount">
            <summary>
            procMount denotes the type of proc mount to use for the containers. The default
            is DefaultProcMount which uses the container runtime defaults for readonly paths
            and masked paths. This requires the ProcMountType feature flag to be enabled.
            Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.ReadOnlyRootFilesystem">
            <summary>
            Whether this container has a read-only root filesystem. Default is false. Note
            that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.RunAsGroup">
            <summary>
            The GID to run the entrypoint of the container process. Uses runtime default if
            unset. May also be set in PodSecurityContext.  If set in both SecurityContext
            and PodSecurityContext, the value specified in SecurityContext takes precedence.
            Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.RunAsNonRoot">
            <summary>
            Indicates that the container must run as a non-root user. If true, the Kubelet
            will validate the image at runtime to ensure that it does not run as UID 0
            (root) and fail to start the container if it does. If unset or false, no such
            validation will be performed. May also be set in PodSecurityContext.  If set in
            both SecurityContext and PodSecurityContext, the value specified in
            SecurityContext takes precedence.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.RunAsUser">
            <summary>
            The UID to run the entrypoint of the container process. Defaults to user
            specified in image metadata if unspecified. May also be set in
            PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the
            value specified in SecurityContext takes precedence. Note that this field cannot
            be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.SeLinuxOptions">
            <summary>
            The SELinux context to be applied to the container. If unspecified, the
            container runtime will allocate a random SELinux context for each container. 
            May also be set in PodSecurityContext.  If set in both SecurityContext and
            PodSecurityContext, the value specified in SecurityContext takes precedence.
            Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.SeccompProfile">
            <summary>
            The seccomp options to use by this container. If seccomp options are provided at
            both the pod &amp; container level, the container options override the pod options.
            Note that this field cannot be set when spec.os.name is windows.
            </summary>
        </member>
        <member name="P:k8s.Models.V1SecurityContext.WindowsOptions">
            <summary>
            The Windows specific settings applied to all containers. If unspecified, the
            options from the PodSecurityContext will be used. If set in both SecurityContext
            and PodSecurityContext, the value specified in SecurityContext takes precedence.
            Note that this field cannot be set when spec.os.name is linux.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SecurityContext.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Service">
            <summary>
            Service is a named abstraction of software service (for example, mysql)
            consisting of local port (for example 3306) that the proxy listens on, and the
            selector that determines which pods will answer requests sent through the proxy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Service.#ctor">
            <summary>
            Initializes a new instance of the V1Service class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Service.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1ServiceSpec,k8s.Models.V1ServiceStatus)">
            <summary>
            Initializes a new instance of the V1Service class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec defines the behavior of a service.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            Most recently observed status of the service. Populated by the system.
            Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Service.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Service.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Service.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Service.Spec">
            <summary>
            Spec defines the behavior of a service.
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1Service.Status">
            <summary>
            Most recently observed status of the service. Populated by the system.
            Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Service.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServiceAccount">
            <summary>
            ServiceAccount binds together: * a name, understood by users, and perhaps by
            peripheral systems, for an identity * a principal that can be authenticated and
            authorized * a set of secrets
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccount.#ctor">
            <summary>
            Initializes a new instance of the V1ServiceAccount class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccount.#ctor(System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.V1LocalObjectReference},System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1ObjectReference})">
            <summary>
            Initializes a new instance of the V1ServiceAccount class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="automountServiceAccountToken">
            AutomountServiceAccountToken indicates whether pods running as this service
            account should have an API token automatically mounted. Can be overridden at the
            pod level.
            </param>
            <param name="imagePullSecrets">
            ImagePullSecrets is a list of references to secrets in the same namespace to use
            for pulling any images in pods that reference this ServiceAccount.
            ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the
            pod, but ImagePullSecrets are only accessed by the kubelet. More info:
            https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="secrets">
            Secrets is a list of the secrets in the same namespace that pods running using
            this ServiceAccount are allowed to use. Pods are only limited to this list if
            this service account has a &quot;kubernetes.io/enforce-mountable-secrets&quot; annotation
            set to &quot;true&quot;. This field should not be used to find auto-generated service
            account token secrets for use outside of pods. Instead, tokens can be requested
            directly using the TokenRequest API, or service account token secrets can be
            manually created. More info:
            https://kubernetes.io/docs/concepts/configuration/secret
            </param>
        </member>
        <member name="P:k8s.Models.V1ServiceAccount.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccount.AutomountServiceAccountToken">
            <summary>
            AutomountServiceAccountToken indicates whether pods running as this service
            account should have an API token automatically mounted. Can be overridden at the
            pod level.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccount.ImagePullSecrets">
            <summary>
            ImagePullSecrets is a list of references to secrets in the same namespace to use
            for pulling any images in pods that reference this ServiceAccount.
            ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the
            pod, but ImagePullSecrets are only accessed by the kubelet. More info:
            https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccount.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccount.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccount.Secrets">
            <summary>
            Secrets is a list of the secrets in the same namespace that pods running using
            this ServiceAccount are allowed to use. Pods are only limited to this list if
            this service account has a &quot;kubernetes.io/enforce-mountable-secrets&quot; annotation
            set to &quot;true&quot;. This field should not be used to find auto-generated service
            account token secrets for use outside of pods. Instead, tokens can be requested
            directly using the TokenRequest API, or service account token secrets can be
            manually created. More info:
            https://kubernetes.io/docs/concepts/configuration/secret
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccount.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServiceAccountList">
            <summary>
            ServiceAccountList is a list of ServiceAccount objects
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccountList.#ctor">
            <summary>
            Initializes a new instance of the V1ServiceAccountList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccountList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ServiceAccount},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ServiceAccountList class.
            </summary>
            <param name="items">
            List of ServiceAccounts. More info:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1ServiceAccountList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccountList.Items">
            <summary>
            List of ServiceAccounts. More info:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccountList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccountList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccountList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServiceAccountTokenProjection">
            <summary>
            ServiceAccountTokenProjection represents a projected service account token
            volume. This projection can be used to insert a service account token into the
            pods runtime filesystem for use against APIs (Kubernetes API Server or
            otherwise).
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccountTokenProjection.#ctor">
            <summary>
            Initializes a new instance of the V1ServiceAccountTokenProjection class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccountTokenProjection.#ctor(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V1ServiceAccountTokenProjection class.
            </summary>
            <param name="path">
            path is the path relative to the mount point of the file to project the token
            into.
            </param>
            <param name="audience">
            audience is the intended audience of the token. A recipient of a token must
            identify itself with an identifier specified in the audience of the token, and
            otherwise should reject the token. The audience defaults to the identifier of
            the apiserver.
            </param>
            <param name="expirationSeconds">
            expirationSeconds is the requested duration of validity of the service account
            token. As the token approaches expiration, the kubelet volume plugin will
            proactively rotate the service account token. The kubelet will start trying to
            rotate the token if the token is older than 80 percent of its time to live or if
            the token is older than 24 hours.Defaults to 1 hour and must be at least 10
            minutes.
            </param>
        </member>
        <member name="P:k8s.Models.V1ServiceAccountTokenProjection.Audience">
            <summary>
            audience is the intended audience of the token. A recipient of a token must
            identify itself with an identifier specified in the audience of the token, and
            otherwise should reject the token. The audience defaults to the identifier of
            the apiserver.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccountTokenProjection.ExpirationSeconds">
            <summary>
            expirationSeconds is the requested duration of validity of the service account
            token. As the token approaches expiration, the kubelet volume plugin will
            proactively rotate the service account token. The kubelet will start trying to
            rotate the token if the token is older than 80 percent of its time to live or if
            the token is older than 24 hours.Defaults to 1 hour and must be at least 10
            minutes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceAccountTokenProjection.Path">
            <summary>
            path is the path relative to the mount point of the file to project the token
            into.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceAccountTokenProjection.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServiceList">
            <summary>
            ServiceList holds a list of services.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceList.#ctor">
            <summary>
            Initializes a new instance of the V1ServiceList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Service},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ServiceList class.
            </summary>
            <param name="items">
            List of services
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1ServiceList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceList.Items">
            <summary>
            List of services
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServicePort">
            <summary>
            ServicePort contains information on service&apos;s port.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServicePort.#ctor">
            <summary>
            Initializes a new instance of the V1ServicePort class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServicePort.#ctor(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.String,k8s.Models.IntstrIntOrString)">
            <summary>
            Initializes a new instance of the V1ServicePort class.
            </summary>
            <param name="port">
            The port that will be exposed by this service.
            </param>
            <param name="appProtocol">
            The application protocol for this port. This is used as a hint for
            implementations to offer richer behavior for protocols that they understand.
            This field follows standard Kubernetes label syntax. Valid values are either:
            
            * Un-prefixed protocol names - reserved for IANA standard service names (as per
            RFC-6335 and https://www.iana.org/assignments/service-names).
            
            * Kubernetes-defined prefixed names:
            * &apos;kubernetes.io/h2c&apos; - HTTP/2 over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc7540
            * &apos;kubernetes.io/ws&apos;  - WebSocket over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc6455
            * &apos;kubernetes.io/wss&apos; - WebSocket over TLS as described in
            https://www.rfc-editor.org/rfc/rfc6455
            
            * Other protocols should use implementation-defined prefixed names such as
            mycompany.com/my-custom-protocol.
            </param>
            <param name="name">
            The name of this port within the service. This must be a DNS_LABEL. All ports
            within a ServiceSpec must have unique names. When considering the endpoints for
            a Service, this must match the &apos;name&apos; field in the EndpointPort. Optional if
            only one ServicePort is defined on this service.
            </param>
            <param name="nodePort">
            The port on each node on which this service is exposed when type is NodePort or
            LoadBalancer.  Usually assigned by the system. If a value is specified,
            in-range, and not in use it will be used, otherwise the operation will fail.  If
            not specified, a port will be allocated if this Service requires one.  If this
            field is specified when creating a Service which does not need it, creation will
            fail. This field will be wiped when updating a Service to no longer need it
            (e.g. changing type from NodePort to ClusterIP). More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
            </param>
            <param name="protocol">
            The IP protocol for this port. Supports &quot;TCP&quot;, &quot;UDP&quot;, and &quot;SCTP&quot;. Default is
            TCP.
            </param>
            <param name="targetPort">
            Number or name of the port to access on the pods targeted by the service. Number
            must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a
            string, it will be looked up as a named port in the target Pod&apos;s container
            ports. If this is not specified, the value of the &apos;port&apos; field is used (an
            identity map). This field is ignored for services with clusterIP=None, and
            should be omitted or set equal to the &apos;port&apos; field. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
            </param>
        </member>
        <member name="P:k8s.Models.V1ServicePort.AppProtocol">
            <summary>
            The application protocol for this port. This is used as a hint for
            implementations to offer richer behavior for protocols that they understand.
            This field follows standard Kubernetes label syntax. Valid values are either:
            
            * Un-prefixed protocol names - reserved for IANA standard service names (as per
            RFC-6335 and https://www.iana.org/assignments/service-names).
            
            * Kubernetes-defined prefixed names:
            * &apos;kubernetes.io/h2c&apos; - HTTP/2 over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc7540
            * &apos;kubernetes.io/ws&apos;  - WebSocket over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc6455
            * &apos;kubernetes.io/wss&apos; - WebSocket over TLS as described in
            https://www.rfc-editor.org/rfc/rfc6455
            
            * Other protocols should use implementation-defined prefixed names such as
            mycompany.com/my-custom-protocol.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServicePort.Name">
            <summary>
            The name of this port within the service. This must be a DNS_LABEL. All ports
            within a ServiceSpec must have unique names. When considering the endpoints for
            a Service, this must match the &apos;name&apos; field in the EndpointPort. Optional if
            only one ServicePort is defined on this service.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServicePort.NodePort">
            <summary>
            The port on each node on which this service is exposed when type is NodePort or
            LoadBalancer.  Usually assigned by the system. If a value is specified,
            in-range, and not in use it will be used, otherwise the operation will fail.  If
            not specified, a port will be allocated if this Service requires one.  If this
            field is specified when creating a Service which does not need it, creation will
            fail. This field will be wiped when updating a Service to no longer need it
            (e.g. changing type from NodePort to ClusterIP). More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServicePort.Port">
            <summary>
            The port that will be exposed by this service.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServicePort.Protocol">
            <summary>
            The IP protocol for this port. Supports &quot;TCP&quot;, &quot;UDP&quot;, and &quot;SCTP&quot;. Default is
            TCP.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServicePort.TargetPort">
            <summary>
            Number or name of the port to access on the pods targeted by the service. Number
            must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a
            string, it will be looked up as a named port in the target Pod&apos;s container
            ports. If this is not specified, the value of the &apos;port&apos; field is used (an
            identity map). This field is ignored for services with clusterIP=None, and
            should be omitted or set equal to the &apos;port&apos; field. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServicePort.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServiceSpec">
            <summary>
            ServiceSpec describes the attributes that a user creates on a service.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceSpec.#ctor">
            <summary>
            Initializes a new instance of the V1ServiceSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceSpec.#ctor(System.Nullable{System.Boolean},System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String,System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{k8s.Models.V1ServicePort},System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String},System.String,k8s.Models.V1SessionAffinityConfig,System.String)">
            <summary>
            Initializes a new instance of the V1ServiceSpec class.
            </summary>
            <param name="allocateLoadBalancerNodePorts">
            allocateLoadBalancerNodePorts defines if NodePorts will be automatically
            allocated for services with type LoadBalancer.  Default is &quot;true&quot;. It may be set
            to &quot;false&quot; if the cluster load-balancer does not rely on NodePorts.  If the
            caller requests specific NodePorts (by specifying a value), those requests will
            be respected, regardless of this field. This field may only be set for services
            with type LoadBalancer and will be cleared if the type is changed to any other
            type.
            </param>
            <param name="clusterIP">
            clusterIP is the IP address of the service and is usually assigned randomly. If
            an address is specified manually, is in-range (as per system configuration), and
            is not in use, it will be allocated to the service; otherwise creation of the
            service will fail. This field may not be changed through updates unless the type
            field is also being changed to ExternalName (which requires this field to be
            blank) or the type field is being changed from ExternalName (in which case this
            field may optionally be specified, as describe above).  Valid values are &quot;None&quot;,
            empty string (&quot;&quot;), or a valid IP address. Setting this to &quot;None&quot; makes a
            &quot;headless service&quot; (no virtual IP), which is useful when direct endpoint
            connections are preferred and proxying is not required.  Only applies to types
            ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating
            a Service of type ExternalName, creation will fail. This field will be wiped
            when updating a Service to type ExternalName. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </param>
            <param name="clusterIPs">
            ClusterIPs is a list of IP addresses assigned to this service, and are usually
            assigned randomly.  If an address is specified manually, is in-range (as per
            system configuration), and is not in use, it will be allocated to the service;
            otherwise creation of the service will fail. This field may not be changed
            through updates unless the type field is also being changed to ExternalName
            (which requires this field to be empty) or the type field is being changed from
            ExternalName (in which case this field may optionally be specified, as describe
            above).  Valid values are &quot;None&quot;, empty string (&quot;&quot;), or a valid IP address. 
            Setting this to &quot;None&quot; makes a &quot;headless service&quot; (no virtual IP), which is
            useful when direct endpoint connections are preferred and proxying is not
            required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this
            field is specified when creating a Service of type ExternalName, creation will
            fail. This field will be wiped when updating a Service to type ExternalName.  If
            this field is not specified, it will be initialized from the clusterIP field. 
            If this field is specified, clients must ensure that clusterIPs[0] and clusterIP
            have the same value.
            
            This field may hold a maximum of two entries (dual-stack IPs, in either order).
            These IPs must correspond to the values of the ipFamilies field. Both clusterIPs
            and ipFamilies are governed by the ipFamilyPolicy field. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </param>
            <param name="externalIPs">
            externalIPs is a list of IP addresses for which nodes in the cluster will also
            accept traffic for this service.  These IPs are not managed by Kubernetes.  The
            user is responsible for ensuring that traffic arrives at a node with this IP.  A
            common example is external load-balancers that are not part of the Kubernetes
            system.
            </param>
            <param name="externalName">
            externalName is the external reference that discovery mechanisms will return as
            an alias for this service (e.g. a DNS CNAME record). No proxying will be
            involved.  Must be a lowercase RFC-1123 hostname
            (https://tools.ietf.org/html/rfc1123) and requires `type` to be &quot;ExternalName&quot;.
            </param>
            <param name="externalTrafficPolicy">
            externalTrafficPolicy describes how nodes distribute service traffic they
            receive on one of the Service&apos;s &quot;externally-facing&quot; addresses (NodePorts,
            ExternalIPs, and LoadBalancer IPs). If set to &quot;Local&quot;, the proxy will configure
            the service in a way that assumes that external load balancers will take care of
            balancing the service traffic between nodes, and so each node will deliver
            traffic only to the node-local endpoints of the service, without masquerading
            the client source IP. (Traffic mistakenly sent to a node with no endpoints will
            be dropped.) The default value, &quot;Cluster&quot;, uses the standard behavior of routing
            to all endpoints evenly (possibly modified by topology and other features). Note
            that traffic sent to an External IP or LoadBalancer IP from within the cluster
            will always get &quot;Cluster&quot; semantics, but clients sending to a NodePort from
            within the cluster may need to take traffic policy into account when picking a
            node.
            </param>
            <param name="healthCheckNodePort">
            healthCheckNodePort specifies the healthcheck nodePort for the service. This
            only applies when type is set to LoadBalancer and externalTrafficPolicy is set
            to Local. If a value is specified, is in-range, and is not in use, it will be
            used.  If not specified, a value will be automatically allocated.  External
            systems (e.g. load-balancers) can use this port to determine if a given node
            holds endpoints for this service or not.  If this field is specified when
            creating a Service which does not need it, creation will fail. This field will
            be wiped when updating a Service to no longer need it (e.g. changing type). This
            field cannot be updated once set.
            </param>
            <param name="internalTrafficPolicy">
            InternalTrafficPolicy describes how nodes distribute service traffic they
            receive on the ClusterIP. If set to &quot;Local&quot;, the proxy will assume that pods
            only want to talk to endpoints of the service on the same node as the pod,
            dropping the traffic if there are no local endpoints. The default value,
            &quot;Cluster&quot;, uses the standard behavior of routing to all endpoints evenly
            (possibly modified by topology and other features).
            </param>
            <param name="ipFamilies">
            IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service.
            This field is usually assigned automatically based on cluster configuration and
            the ipFamilyPolicy field. If this field is specified manually, the requested
            family is available in the cluster, and ipFamilyPolicy allows it, it will be
            used; otherwise creation of the service will fail. This field is conditionally
            mutable: it allows for adding or removing a secondary IP family, but it does not
            allow changing the primary IP family of the Service. Valid values are &quot;IPv4&quot; and
            &quot;IPv6&quot;.  This field only applies to Services of types ClusterIP, NodePort, and
            LoadBalancer, and does apply to &quot;headless&quot; services. This field will be wiped
            when updating a Service to type ExternalName.
            
            This field may hold a maximum of two entries (dual-stack families, in either
            order).  These families must correspond to the values of the clusterIPs field,
            if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy
            field.
            </param>
            <param name="ipFamilyPolicy">
            IPFamilyPolicy represents the dual-stack-ness requested or required by this
            Service. If there is no value provided, then this field will be set to
            SingleStack. Services can be &quot;SingleStack&quot; (a single IP family),
            &quot;PreferDualStack&quot; (two IP families on dual-stack configured clusters or a single
            IP family on single-stack clusters), or &quot;RequireDualStack&quot; (two IP families on
            dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs
            fields depend on the value of this field. This field will be wiped when updating
            a service to type ExternalName.
            </param>
            <param name="loadBalancerClass">
            loadBalancerClass is the class of the load balancer implementation this Service
            belongs to. If specified, the value of this field must be a label-style
            identifier, with an optional prefix, e.g. &quot;internal-vip&quot; or
            &quot;example.com/internal-vip&quot;. Unprefixed names are reserved for end-users. This
            field can only be set when the Service type is &apos;LoadBalancer&apos;. If not set, the
            default load balancer implementation is used, today this is typically done
            through the cloud provider integration, but should apply for any default
            implementation. If set, it is assumed that a load balancer implementation is
            watching for Services with a matching class. Any default load balancer
            implementation (e.g. cloud providers) should ignore Services that set this
            field. This field can only be set when creating or updating a Service to type
            &apos;LoadBalancer&apos;. Once set, it can not be changed. This field will be wiped when a
            service is updated to a non &apos;LoadBalancer&apos; type.
            </param>
            <param name="loadBalancerIP">
            Only applies to Service Type: LoadBalancer. This feature depends on whether the
            underlying cloud-provider supports specifying the loadBalancerIP when a load
            balancer is created. This field will be ignored if the cloud-provider does not
            support the feature. Deprecated: This field was under-specified and its meaning
            varies across implementations. Using it is non-portable and it may not support
            dual-stack. Users are encouraged to use implementation-specific annotations when
            available.
            </param>
            <param name="loadBalancerSourceRanges">
            If specified and supported by the platform, this will restrict traffic through
            the cloud-provider load-balancer will be restricted to the specified client IPs.
            This field will be ignored if the cloud-provider does not support the feature.&quot;
            More info:
            https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
            </param>
            <param name="ports">
            The list of ports that are exposed by this service. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </param>
            <param name="publishNotReadyAddresses">
            publishNotReadyAddresses indicates that any agent which deals with endpoints for
            this Service should disregard any indications of ready/not-ready. The primary
            use case for setting this field is for a StatefulSet&apos;s Headless Service to
            propagate SRV DNS records for its Pods for the purpose of peer discovery. The
            Kubernetes controllers that generate Endpoints and EndpointSlice resources for
            Services interpret this to mean that all endpoints are considered &quot;ready&quot; even
            if the Pods themselves are not. Agents which consume only Kubernetes generated
            endpoints through the Endpoints or EndpointSlice resources can safely assume
            this behavior.
            </param>
            <param name="selector">
            Route service traffic to pods with label keys and values matching this selector.
            If empty or not present, the service is assumed to have an external process
            managing its endpoints, which Kubernetes will not modify. Only applies to types
            ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More
            info: https://kubernetes.io/docs/concepts/services-networking/service/
            </param>
            <param name="sessionAffinity">
            Supports &quot;ClientIP&quot; and &quot;None&quot;. Used to maintain session affinity. Enable client
            IP based session affinity. Must be ClientIP or None. Defaults to None. More
            info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </param>
            <param name="sessionAffinityConfig">
            sessionAffinityConfig contains the configurations of session affinity.
            </param>
            <param name="type">
            type determines how the Service is exposed. Defaults to ClusterIP. Valid options
            are ExternalName, ClusterIP, NodePort, and LoadBalancer. &quot;ClusterIP&quot; allocates a
            cluster-internal IP address for load-balancing to endpoints. Endpoints are
            determined by the selector or if that is not specified, by manual construction
            of an Endpoints object or EndpointSlice objects. If clusterIP is &quot;None&quot;, no
            virtual IP is allocated and the endpoints are published as a set of endpoints
            rather than a virtual IP. &quot;NodePort&quot; builds on ClusterIP and allocates a port on
            every node which routes to the same endpoints as the clusterIP. &quot;LoadBalancer&quot;
            builds on NodePort and creates an external load-balancer (if supported in the
            current cloud) which routes to the same endpoints as the clusterIP.
            &quot;ExternalName&quot; aliases this service to the specified externalName. Several other
            fields do not apply to ExternalName services. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
            </param>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.AllocateLoadBalancerNodePorts">
            <summary>
            allocateLoadBalancerNodePorts defines if NodePorts will be automatically
            allocated for services with type LoadBalancer.  Default is &quot;true&quot;. It may be set
            to &quot;false&quot; if the cluster load-balancer does not rely on NodePorts.  If the
            caller requests specific NodePorts (by specifying a value), those requests will
            be respected, regardless of this field. This field may only be set for services
            with type LoadBalancer and will be cleared if the type is changed to any other
            type.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.ClusterIP">
            <summary>
            clusterIP is the IP address of the service and is usually assigned randomly. If
            an address is specified manually, is in-range (as per system configuration), and
            is not in use, it will be allocated to the service; otherwise creation of the
            service will fail. This field may not be changed through updates unless the type
            field is also being changed to ExternalName (which requires this field to be
            blank) or the type field is being changed from ExternalName (in which case this
            field may optionally be specified, as describe above).  Valid values are &quot;None&quot;,
            empty string (&quot;&quot;), or a valid IP address. Setting this to &quot;None&quot; makes a
            &quot;headless service&quot; (no virtual IP), which is useful when direct endpoint
            connections are preferred and proxying is not required.  Only applies to types
            ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating
            a Service of type ExternalName, creation will fail. This field will be wiped
            when updating a Service to type ExternalName. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.ClusterIPs">
            <summary>
            ClusterIPs is a list of IP addresses assigned to this service, and are usually
            assigned randomly.  If an address is specified manually, is in-range (as per
            system configuration), and is not in use, it will be allocated to the service;
            otherwise creation of the service will fail. This field may not be changed
            through updates unless the type field is also being changed to ExternalName
            (which requires this field to be empty) or the type field is being changed from
            ExternalName (in which case this field may optionally be specified, as describe
            above).  Valid values are &quot;None&quot;, empty string (&quot;&quot;), or a valid IP address. 
            Setting this to &quot;None&quot; makes a &quot;headless service&quot; (no virtual IP), which is
            useful when direct endpoint connections are preferred and proxying is not
            required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this
            field is specified when creating a Service of type ExternalName, creation will
            fail. This field will be wiped when updating a Service to type ExternalName.  If
            this field is not specified, it will be initialized from the clusterIP field. 
            If this field is specified, clients must ensure that clusterIPs[0] and clusterIP
            have the same value.
            
            This field may hold a maximum of two entries (dual-stack IPs, in either order).
            These IPs must correspond to the values of the ipFamilies field. Both clusterIPs
            and ipFamilies are governed by the ipFamilyPolicy field. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.ExternalIPs">
            <summary>
            externalIPs is a list of IP addresses for which nodes in the cluster will also
            accept traffic for this service.  These IPs are not managed by Kubernetes.  The
            user is responsible for ensuring that traffic arrives at a node with this IP.  A
            common example is external load-balancers that are not part of the Kubernetes
            system.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.ExternalName">
            <summary>
            externalName is the external reference that discovery mechanisms will return as
            an alias for this service (e.g. a DNS CNAME record). No proxying will be
            involved.  Must be a lowercase RFC-1123 hostname
            (https://tools.ietf.org/html/rfc1123) and requires `type` to be &quot;ExternalName&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.ExternalTrafficPolicy">
            <summary>
            externalTrafficPolicy describes how nodes distribute service traffic they
            receive on one of the Service&apos;s &quot;externally-facing&quot; addresses (NodePorts,
            ExternalIPs, and LoadBalancer IPs). If set to &quot;Local&quot;, the proxy will configure
            the service in a way that assumes that external load balancers will take care of
            balancing the service traffic between nodes, and so each node will deliver
            traffic only to the node-local endpoints of the service, without masquerading
            the client source IP. (Traffic mistakenly sent to a node with no endpoints will
            be dropped.) The default value, &quot;Cluster&quot;, uses the standard behavior of routing
            to all endpoints evenly (possibly modified by topology and other features). Note
            that traffic sent to an External IP or LoadBalancer IP from within the cluster
            will always get &quot;Cluster&quot; semantics, but clients sending to a NodePort from
            within the cluster may need to take traffic policy into account when picking a
            node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.HealthCheckNodePort">
            <summary>
            healthCheckNodePort specifies the healthcheck nodePort for the service. This
            only applies when type is set to LoadBalancer and externalTrafficPolicy is set
            to Local. If a value is specified, is in-range, and is not in use, it will be
            used.  If not specified, a value will be automatically allocated.  External
            systems (e.g. load-balancers) can use this port to determine if a given node
            holds endpoints for this service or not.  If this field is specified when
            creating a Service which does not need it, creation will fail. This field will
            be wiped when updating a Service to no longer need it (e.g. changing type). This
            field cannot be updated once set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.InternalTrafficPolicy">
            <summary>
            InternalTrafficPolicy describes how nodes distribute service traffic they
            receive on the ClusterIP. If set to &quot;Local&quot;, the proxy will assume that pods
            only want to talk to endpoints of the service on the same node as the pod,
            dropping the traffic if there are no local endpoints. The default value,
            &quot;Cluster&quot;, uses the standard behavior of routing to all endpoints evenly
            (possibly modified by topology and other features).
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.IpFamilies">
            <summary>
            IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service.
            This field is usually assigned automatically based on cluster configuration and
            the ipFamilyPolicy field. If this field is specified manually, the requested
            family is available in the cluster, and ipFamilyPolicy allows it, it will be
            used; otherwise creation of the service will fail. This field is conditionally
            mutable: it allows for adding or removing a secondary IP family, but it does not
            allow changing the primary IP family of the Service. Valid values are &quot;IPv4&quot; and
            &quot;IPv6&quot;.  This field only applies to Services of types ClusterIP, NodePort, and
            LoadBalancer, and does apply to &quot;headless&quot; services. This field will be wiped
            when updating a Service to type ExternalName.
            
            This field may hold a maximum of two entries (dual-stack families, in either
            order).  These families must correspond to the values of the clusterIPs field,
            if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy
            field.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.IpFamilyPolicy">
            <summary>
            IPFamilyPolicy represents the dual-stack-ness requested or required by this
            Service. If there is no value provided, then this field will be set to
            SingleStack. Services can be &quot;SingleStack&quot; (a single IP family),
            &quot;PreferDualStack&quot; (two IP families on dual-stack configured clusters or a single
            IP family on single-stack clusters), or &quot;RequireDualStack&quot; (two IP families on
            dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs
            fields depend on the value of this field. This field will be wiped when updating
            a service to type ExternalName.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.LoadBalancerClass">
            <summary>
            loadBalancerClass is the class of the load balancer implementation this Service
            belongs to. If specified, the value of this field must be a label-style
            identifier, with an optional prefix, e.g. &quot;internal-vip&quot; or
            &quot;example.com/internal-vip&quot;. Unprefixed names are reserved for end-users. This
            field can only be set when the Service type is &apos;LoadBalancer&apos;. If not set, the
            default load balancer implementation is used, today this is typically done
            through the cloud provider integration, but should apply for any default
            implementation. If set, it is assumed that a load balancer implementation is
            watching for Services with a matching class. Any default load balancer
            implementation (e.g. cloud providers) should ignore Services that set this
            field. This field can only be set when creating or updating a Service to type
            &apos;LoadBalancer&apos;. Once set, it can not be changed. This field will be wiped when a
            service is updated to a non &apos;LoadBalancer&apos; type.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.LoadBalancerIP">
            <summary>
            Only applies to Service Type: LoadBalancer. This feature depends on whether the
            underlying cloud-provider supports specifying the loadBalancerIP when a load
            balancer is created. This field will be ignored if the cloud-provider does not
            support the feature. Deprecated: This field was under-specified and its meaning
            varies across implementations. Using it is non-portable and it may not support
            dual-stack. Users are encouraged to use implementation-specific annotations when
            available.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.LoadBalancerSourceRanges">
            <summary>
            If specified and supported by the platform, this will restrict traffic through
            the cloud-provider load-balancer will be restricted to the specified client IPs.
            This field will be ignored if the cloud-provider does not support the feature.&quot;
            More info:
            https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.Ports">
            <summary>
            The list of ports that are exposed by this service. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.PublishNotReadyAddresses">
            <summary>
            publishNotReadyAddresses indicates that any agent which deals with endpoints for
            this Service should disregard any indications of ready/not-ready. The primary
            use case for setting this field is for a StatefulSet&apos;s Headless Service to
            propagate SRV DNS records for its Pods for the purpose of peer discovery. The
            Kubernetes controllers that generate Endpoints and EndpointSlice resources for
            Services interpret this to mean that all endpoints are considered &quot;ready&quot; even
            if the Pods themselves are not. Agents which consume only Kubernetes generated
            endpoints through the Endpoints or EndpointSlice resources can safely assume
            this behavior.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.Selector">
            <summary>
            Route service traffic to pods with label keys and values matching this selector.
            If empty or not present, the service is assumed to have an external process
            managing its endpoints, which Kubernetes will not modify. Only applies to types
            ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More
            info: https://kubernetes.io/docs/concepts/services-networking/service/
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.SessionAffinity">
            <summary>
            Supports &quot;ClientIP&quot; and &quot;None&quot;. Used to maintain session affinity. Enable client
            IP based session affinity. Must be ClientIP or None. Defaults to None. More
            info:
            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.SessionAffinityConfig">
            <summary>
            sessionAffinityConfig contains the configurations of session affinity.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceSpec.Type">
            <summary>
            type determines how the Service is exposed. Defaults to ClusterIP. Valid options
            are ExternalName, ClusterIP, NodePort, and LoadBalancer. &quot;ClusterIP&quot; allocates a
            cluster-internal IP address for load-balancing to endpoints. Endpoints are
            determined by the selector or if that is not specified, by manual construction
            of an Endpoints object or EndpointSlice objects. If clusterIP is &quot;None&quot;, no
            virtual IP is allocated and the endpoints are published as a set of endpoints
            rather than a virtual IP. &quot;NodePort&quot; builds on ClusterIP and allocates a port on
            every node which routes to the same endpoints as the clusterIP. &quot;LoadBalancer&quot;
            builds on NodePort and creates an external load-balancer (if supported in the
            current cloud) which routes to the same endpoints as the clusterIP.
            &quot;ExternalName&quot; aliases this service to the specified externalName. Several other
            fields do not apply to ExternalName services. More info:
            https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServiceStatus">
            <summary>
            ServiceStatus represents the current status of a service.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceStatus.#ctor">
            <summary>
            Initializes a new instance of the V1ServiceStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1Condition},k8s.Models.V1LoadBalancerStatus)">
            <summary>
            Initializes a new instance of the V1ServiceStatus class.
            </summary>
            <param name="conditions">
            Current service state
            </param>
            <param name="loadBalancer">
            LoadBalancer contains the current status of the load-balancer, if one is
            present.
            </param>
        </member>
        <member name="P:k8s.Models.V1ServiceStatus.Conditions">
            <summary>
            Current service state
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceStatus.LoadBalancer">
            <summary>
            LoadBalancer contains the current status of the load-balancer, if one is
            present.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1SessionAffinityConfig">
            <summary>
            SessionAffinityConfig represents the configurations of session affinity.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SessionAffinityConfig.#ctor">
            <summary>
            Initializes a new instance of the V1SessionAffinityConfig class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SessionAffinityConfig.#ctor(k8s.Models.V1ClientIPConfig)">
            <summary>
            Initializes a new instance of the V1SessionAffinityConfig class.
            </summary>
            <param name="clientIP">
            clientIP contains the configurations of Client IP based session affinity.
            </param>
        </member>
        <member name="P:k8s.Models.V1SessionAffinityConfig.ClientIP">
            <summary>
            clientIP contains the configurations of Client IP based session affinity.
            </summary>
        </member>
        <member name="M:k8s.Models.V1SessionAffinityConfig.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StorageOSPersistentVolumeSource">
            <summary>
            Represents a StorageOS persistent volume resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageOSPersistentVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1StorageOSPersistentVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageOSPersistentVolumeSource.#ctor(System.String,System.Nullable{System.Boolean},k8s.Models.V1ObjectReference,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1StorageOSPersistentVolumeSource class.
            </summary>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </param>
            <param name="readOnlyProperty">
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
            <param name="secretRef">
            secretRef specifies the secret to use for obtaining the StorageOS API
            credentials.  If not specified, default values will be attempted.
            </param>
            <param name="volumeName">
            volumeName is the human-readable name of the StorageOS volume.  Volume names are
            only unique within a namespace.
            </param>
            <param name="volumeNamespace">
            volumeNamespace specifies the scope of the volume within StorageOS.  If no
            namespace is specified then the Pod&apos;s namespace will be used.  This allows the
            Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
            Set VolumeName to any name to override the default behaviour. Set to &quot;default&quot;
            if you are not using namespaces within StorageOS. Namespaces that do not
            pre-exist within StorageOS will be created.
            </param>
        </member>
        <member name="P:k8s.Models.V1StorageOSPersistentVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSPersistentVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSPersistentVolumeSource.SecretRef">
            <summary>
            secretRef specifies the secret to use for obtaining the StorageOS API
            credentials.  If not specified, default values will be attempted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSPersistentVolumeSource.VolumeName">
            <summary>
            volumeName is the human-readable name of the StorageOS volume.  Volume names are
            only unique within a namespace.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSPersistentVolumeSource.VolumeNamespace">
            <summary>
            volumeNamespace specifies the scope of the volume within StorageOS.  If no
            namespace is specified then the Pod&apos;s namespace will be used.  This allows the
            Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
            Set VolumeName to any name to override the default behaviour. Set to &quot;default&quot;
            if you are not using namespaces within StorageOS. Namespaces that do not
            pre-exist within StorageOS will be created.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageOSPersistentVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StorageOSVolumeSource">
            <summary>
            Represents a StorageOS persistent volume resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageOSVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1StorageOSVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageOSVolumeSource.#ctor(System.String,System.Nullable{System.Boolean},k8s.Models.V1LocalObjectReference,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1StorageOSVolumeSource class.
            </summary>
            <param name="fsType">
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </param>
            <param name="readOnlyProperty">
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </param>
            <param name="secretRef">
            secretRef specifies the secret to use for obtaining the StorageOS API
            credentials.  If not specified, default values will be attempted.
            </param>
            <param name="volumeName">
            volumeName is the human-readable name of the StorageOS volume.  Volume names are
            only unique within a namespace.
            </param>
            <param name="volumeNamespace">
            volumeNamespace specifies the scope of the volume within StorageOS.  If no
            namespace is specified then the Pod&apos;s namespace will be used.  This allows the
            Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
            Set VolumeName to any name to override the default behaviour. Set to &quot;default&quot;
            if you are not using namespaces within StorageOS. Namespaces that do not
            pre-exist within StorageOS will be created.
            </param>
        </member>
        <member name="P:k8s.Models.V1StorageOSVolumeSource.FsType">
            <summary>
            fsType is the filesystem type to mount. Must be a filesystem type supported by
            the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSVolumeSource.ReadOnlyProperty">
            <summary>
            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly
            setting in VolumeMounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSVolumeSource.SecretRef">
            <summary>
            secretRef specifies the secret to use for obtaining the StorageOS API
            credentials.  If not specified, default values will be attempted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSVolumeSource.VolumeName">
            <summary>
            volumeName is the human-readable name of the StorageOS volume.  Volume names are
            only unique within a namespace.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageOSVolumeSource.VolumeNamespace">
            <summary>
            volumeNamespace specifies the scope of the volume within StorageOS.  If no
            namespace is specified then the Pod&apos;s namespace will be used.  This allows the
            Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
            Set VolumeName to any name to override the default behaviour. Set to &quot;default&quot;
            if you are not using namespaces within StorageOS. Namespaces that do not
            pre-exist within StorageOS will be created.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageOSVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Sysctl">
            <summary>
            Sysctl defines a kernel parameter to be set
            </summary>
        </member>
        <member name="M:k8s.Models.V1Sysctl.#ctor">
            <summary>
            Initializes a new instance of the V1Sysctl class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Sysctl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1Sysctl class.
            </summary>
            <param name="name">
            Name of a property to set
            </param>
            <param name="value">
            Value of a property to set
            </param>
        </member>
        <member name="P:k8s.Models.V1Sysctl.Name">
            <summary>
            Name of a property to set
            </summary>
        </member>
        <member name="P:k8s.Models.V1Sysctl.Value">
            <summary>
            Value of a property to set
            </summary>
        </member>
        <member name="M:k8s.Models.V1Sysctl.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TCPSocketAction">
            <summary>
            TCPSocketAction describes an action based on opening a socket
            </summary>
        </member>
        <member name="M:k8s.Models.V1TCPSocketAction.#ctor">
            <summary>
            Initializes a new instance of the V1TCPSocketAction class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TCPSocketAction.#ctor(k8s.Models.IntstrIntOrString,System.String)">
            <summary>
            Initializes a new instance of the V1TCPSocketAction class.
            </summary>
            <param name="port">
            Number or name of the port to access on the container. Number must be in the
            range 1 to 65535. Name must be an IANA_SVC_NAME.
            </param>
            <param name="host">
            Optional: Host name to connect to, defaults to the pod IP.
            </param>
        </member>
        <member name="P:k8s.Models.V1TCPSocketAction.Host">
            <summary>
            Optional: Host name to connect to, defaults to the pod IP.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TCPSocketAction.Port">
            <summary>
            Number or name of the port to access on the container. Number must be in the
            range 1 to 65535. Name must be an IANA_SVC_NAME.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TCPSocketAction.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Taint">
            <summary>
            The node this Taint is attached to has the &quot;effect&quot; on any pod that does not
            tolerate the Taint.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Taint.#ctor">
            <summary>
            Initializes a new instance of the V1Taint class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Taint.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the V1Taint class.
            </summary>
            <param name="effect">
            Required. The effect of the taint on pods that do not tolerate the taint. Valid
            effects are NoSchedule, PreferNoSchedule and NoExecute.
            </param>
            <param name="key">
            Required. The taint key to be applied to a node.
            </param>
            <param name="timeAdded">
            TimeAdded represents the time at which the taint was added. It is only written
            for NoExecute taints.
            </param>
            <param name="value">
            The taint value corresponding to the taint key.
            </param>
        </member>
        <member name="P:k8s.Models.V1Taint.Effect">
            <summary>
            Required. The effect of the taint on pods that do not tolerate the taint. Valid
            effects are NoSchedule, PreferNoSchedule and NoExecute.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Taint.Key">
            <summary>
            Required. The taint key to be applied to a node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Taint.TimeAdded">
            <summary>
            TimeAdded represents the time at which the taint was added. It is only written
            for NoExecute taints.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Taint.Value">
            <summary>
            The taint value corresponding to the taint key.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Taint.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Toleration">
            <summary>
            The pod this Toleration is attached to tolerates any taint that matches the
            triple &lt;key,value,effect&gt; using the matching operator &lt;operator&gt;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Toleration.#ctor">
            <summary>
            Initializes a new instance of the V1Toleration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Toleration.#ctor(System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Initializes a new instance of the V1Toleration class.
            </summary>
            <param name="effect">
            Effect indicates the taint effect to match. Empty means match all taint effects.
            When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
            </param>
            <param name="key">
            Key is the taint key that the toleration applies to. Empty means match all taint
            keys. If the key is empty, operator must be Exists; this combination means to
            match all values and all keys.
            </param>
            <param name="operatorProperty">
            Operator represents a key&apos;s relationship to the value. Valid operators are
            Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value,
            so that a pod can tolerate all taints of a particular category.
            </param>
            <param name="tolerationSeconds">
            TolerationSeconds represents the period of time the toleration (which must be of
            effect NoExecute, otherwise this field is ignored) tolerates the taint. By
            default, it is not set, which means tolerate the taint forever (do not evict).
            Zero and negative values will be treated as 0 (evict immediately) by the system.
            </param>
            <param name="value">
            Value is the taint value the toleration matches to. If the operator is Exists,
            the value should be empty, otherwise just a regular string.
            </param>
        </member>
        <member name="P:k8s.Models.V1Toleration.Effect">
            <summary>
            Effect indicates the taint effect to match. Empty means match all taint effects.
            When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Toleration.Key">
            <summary>
            Key is the taint key that the toleration applies to. Empty means match all taint
            keys. If the key is empty, operator must be Exists; this combination means to
            match all values and all keys.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Toleration.OperatorProperty">
            <summary>
            Operator represents a key&apos;s relationship to the value. Valid operators are
            Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value,
            so that a pod can tolerate all taints of a particular category.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Toleration.TolerationSeconds">
            <summary>
            TolerationSeconds represents the period of time the toleration (which must be of
            effect NoExecute, otherwise this field is ignored) tolerates the taint. By
            default, it is not set, which means tolerate the taint forever (do not evict).
            Zero and negative values will be treated as 0 (evict immediately) by the system.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Toleration.Value">
            <summary>
            Value is the taint value the toleration matches to. If the operator is Exists,
            the value should be empty, otherwise just a regular string.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Toleration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TopologySelectorLabelRequirement">
            <summary>
            A topology selector requirement is a selector that matches given label. This is
            an alpha feature and may change in the future.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySelectorLabelRequirement.#ctor">
            <summary>
            Initializes a new instance of the V1TopologySelectorLabelRequirement class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySelectorLabelRequirement.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1TopologySelectorLabelRequirement class.
            </summary>
            <param name="key">
            The label key that the selector applies to.
            </param>
            <param name="values">
            An array of string values. One value must match the label to be selected. Each
            entry in Values is ORed.
            </param>
        </member>
        <member name="P:k8s.Models.V1TopologySelectorLabelRequirement.Key">
            <summary>
            The label key that the selector applies to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySelectorLabelRequirement.Values">
            <summary>
            An array of string values. One value must match the label to be selected. Each
            entry in Values is ORed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySelectorLabelRequirement.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TopologySelectorTerm">
            <summary>
            A topology selector term represents the result of label queries. A null or empty
            topology selector term matches no objects. The requirements of them are ANDed.
            It provides a subset of functionality as NodeSelectorTerm. This is an alpha
            feature and may change in the future.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySelectorTerm.#ctor">
            <summary>
            Initializes a new instance of the V1TopologySelectorTerm class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySelectorTerm.#ctor(System.Collections.Generic.IList{k8s.Models.V1TopologySelectorLabelRequirement})">
            <summary>
            Initializes a new instance of the V1TopologySelectorTerm class.
            </summary>
            <param name="matchLabelExpressions">
            A list of topology selector requirements by labels.
            </param>
        </member>
        <member name="P:k8s.Models.V1TopologySelectorTerm.MatchLabelExpressions">
            <summary>
            A list of topology selector requirements by labels.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySelectorTerm.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TopologySpreadConstraint">
            <summary>
            TopologySpreadConstraint specifies how to spread matching pods among the given
            topology.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySpreadConstraint.#ctor">
            <summary>
            Initializes a new instance of the V1TopologySpreadConstraint class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySpreadConstraint.#ctor(System.Int32,System.String,System.String,k8s.Models.V1LabelSelector,System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1TopologySpreadConstraint class.
            </summary>
            <param name="maxSkew">
            MaxSkew describes the degree to which pods may be unevenly distributed. When
            `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
            between the number of matching pods in the target topology and the global
            minimum. The global minimum is the minimum number of matching pods in an
            eligible domain or zero if the number of eligible domains is less than
            MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with
            the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. |
            zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming
            pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto
            zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1).
            - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When
            `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to
            topologies that satisfy it. It&apos;s a required field. Default value is 1 and 0 is
            not allowed.
            </param>
            <param name="topologyKey">
            TopologyKey is the key of node labels. Nodes that have a label with this key and
            identical values are considered to be in the same topology. We consider each
            &lt;key, value&gt; as a &quot;bucket&quot;, and try to put balanced number of pods into each
            bucket. We define a domain as a particular instance of a topology. Also, we
            define an eligible domain as a domain whose nodes meet the requirements of
            nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is
            &quot;kubernetes.io/hostname&quot;, each Node is a domain of that topology. And, if
            TopologyKey is &quot;topology.kubernetes.io/zone&quot;, each zone is a domain of that
            topology. It&apos;s a required field.
            </param>
            <param name="whenUnsatisfiable">
            WhenUnsatisfiable indicates how to deal with a pod if it doesn&apos;t satisfy the
            spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule
            it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
            but giving higher precedence to topologies that would help reduce the
            skew.
            A constraint is considered &quot;Unsatisfiable&quot; for an incoming pod if and only if
            every possible node assignment for that pod would violate &quot;MaxSkew&quot; on some
            topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with
            the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P 
            |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be
            scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on
            zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be
            imbalanced, but scheduler won&apos;t make it *more* imbalanced. It&apos;s a required
            field.
            </param>
            <param name="labelSelector">
            LabelSelector is used to find matching pods. Pods that match this label selector
            are counted to determine the number of pods in their corresponding topology
            domain.
            </param>
            <param name="matchLabelKeys">
            MatchLabelKeys is a set of pod label keys to select the pods over which
            spreading will be calculated. The keys are used to lookup values from the
            incoming pod labels, those key-value labels are ANDed with labelSelector to
            select the group of existing pods over which spreading will be calculated for
            the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and
            LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn&apos;t set. Keys
            that don&apos;t exist in the incoming pod labels will be ignored. A null or empty
            list means only match against labelSelector.
            
            This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature
            gate to be enabled (enabled by default).
            </param>
            <param name="minDomains">
            MinDomains indicates a minimum number of eligible domains. When the number of
            eligible domains with matching topology keys is less than minDomains, Pod
            Topology Spread treats &quot;global minimum&quot; as 0, and then the calculation of Skew
            is performed. And when the number of eligible domains with matching topology
            keys equals or greater than minDomains, this value has no effect on scheduling.
            As a result, when the number of eligible domains is less than minDomains,
            scheduler won&apos;t schedule more than maxSkew Pods to those domains. If value is
            nil, the constraint behaves as if MinDomains is equal to 1. Valid values are
            integers greater than 0. When value is not nil, WhenUnsatisfiable must be
            DoNotSchedule.
            
            For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5
            and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 |
            |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so
            &quot;global minimum&quot; is treated as 0. In this situation, new pod with the same
            labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new
            Pod is scheduled to any of the three zones, it will violate MaxSkew.
            
            This is a beta field and requires the MinDomainsInPodTopologySpread feature gate
            to be enabled (enabled by default).
            </param>
            <param name="nodeAffinityPolicy">
            NodeAffinityPolicy indicates how we will treat Pod&apos;s nodeAffinity/nodeSelector
            when calculating pod topology spread skew. Options are: - Honor: only nodes
            matching nodeAffinity/nodeSelector are included in the calculations. - Ignore:
            nodeAffinity/nodeSelector are ignored. All nodes are included in the
            calculations.
            
            If this value is nil, the behavior is equivalent to the Honor policy. This is a
            beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread
            feature flag.
            </param>
            <param name="nodeTaintsPolicy">
            NodeTaintsPolicy indicates how we will treat node taints when calculating pod
            topology spread skew. Options are: - Honor: nodes without taints, along with
            tainted nodes for which the incoming pod has a toleration, are included. -
            Ignore: node taints are ignored. All nodes are included.
            
            If this value is nil, the behavior is equivalent to the Ignore policy. This is a
            beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread
            feature flag.
            </param>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.LabelSelector">
            <summary>
            LabelSelector is used to find matching pods. Pods that match this label selector
            are counted to determine the number of pods in their corresponding topology
            domain.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.MatchLabelKeys">
            <summary>
            MatchLabelKeys is a set of pod label keys to select the pods over which
            spreading will be calculated. The keys are used to lookup values from the
            incoming pod labels, those key-value labels are ANDed with labelSelector to
            select the group of existing pods over which spreading will be calculated for
            the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and
            LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn&apos;t set. Keys
            that don&apos;t exist in the incoming pod labels will be ignored. A null or empty
            list means only match against labelSelector.
            
            This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature
            gate to be enabled (enabled by default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.MaxSkew">
            <summary>
            MaxSkew describes the degree to which pods may be unevenly distributed. When
            `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
            between the number of matching pods in the target topology and the global
            minimum. The global minimum is the minimum number of matching pods in an
            eligible domain or zero if the number of eligible domains is less than
            MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with
            the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. |
            zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming
            pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto
            zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1).
            - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When
            `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to
            topologies that satisfy it. It&apos;s a required field. Default value is 1 and 0 is
            not allowed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.MinDomains">
            <summary>
            MinDomains indicates a minimum number of eligible domains. When the number of
            eligible domains with matching topology keys is less than minDomains, Pod
            Topology Spread treats &quot;global minimum&quot; as 0, and then the calculation of Skew
            is performed. And when the number of eligible domains with matching topology
            keys equals or greater than minDomains, this value has no effect on scheduling.
            As a result, when the number of eligible domains is less than minDomains,
            scheduler won&apos;t schedule more than maxSkew Pods to those domains. If value is
            nil, the constraint behaves as if MinDomains is equal to 1. Valid values are
            integers greater than 0. When value is not nil, WhenUnsatisfiable must be
            DoNotSchedule.
            
            For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5
            and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 |
            |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so
            &quot;global minimum&quot; is treated as 0. In this situation, new pod with the same
            labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new
            Pod is scheduled to any of the three zones, it will violate MaxSkew.
            
            This is a beta field and requires the MinDomainsInPodTopologySpread feature gate
            to be enabled (enabled by default).
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.NodeAffinityPolicy">
            <summary>
            NodeAffinityPolicy indicates how we will treat Pod&apos;s nodeAffinity/nodeSelector
            when calculating pod topology spread skew. Options are: - Honor: only nodes
            matching nodeAffinity/nodeSelector are included in the calculations. - Ignore:
            nodeAffinity/nodeSelector are ignored. All nodes are included in the
            calculations.
            
            If this value is nil, the behavior is equivalent to the Honor policy. This is a
            beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread
            feature flag.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.NodeTaintsPolicy">
            <summary>
            NodeTaintsPolicy indicates how we will treat node taints when calculating pod
            topology spread skew. Options are: - Honor: nodes without taints, along with
            tainted nodes for which the incoming pod has a toleration, are included. -
            Ignore: node taints are ignored. All nodes are included.
            
            If this value is nil, the behavior is equivalent to the Ignore policy. This is a
            beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread
            feature flag.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.TopologyKey">
            <summary>
            TopologyKey is the key of node labels. Nodes that have a label with this key and
            identical values are considered to be in the same topology. We consider each
            &lt;key, value&gt; as a &quot;bucket&quot;, and try to put balanced number of pods into each
            bucket. We define a domain as a particular instance of a topology. Also, we
            define an eligible domain as a domain whose nodes meet the requirements of
            nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is
            &quot;kubernetes.io/hostname&quot;, each Node is a domain of that topology. And, if
            TopologyKey is &quot;topology.kubernetes.io/zone&quot;, each zone is a domain of that
            topology. It&apos;s a required field.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TopologySpreadConstraint.WhenUnsatisfiable">
            <summary>
            WhenUnsatisfiable indicates how to deal with a pod if it doesn&apos;t satisfy the
            spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule
            it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
            but giving higher precedence to topologies that would help reduce the
            skew.
            A constraint is considered &quot;Unsatisfiable&quot; for an incoming pod if and only if
            every possible node assignment for that pod would violate &quot;MaxSkew&quot; on some
            topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with
            the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P 
            |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be
            scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on
            zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be
            imbalanced, but scheduler won&apos;t make it *more* imbalanced. It&apos;s a required
            field.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TopologySpreadConstraint.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TypedLocalObjectReference">
            <summary>
            TypedLocalObjectReference contains enough information to let you locate the
            typed referenced object inside the same namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TypedLocalObjectReference.#ctor">
            <summary>
            Initializes a new instance of the V1TypedLocalObjectReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TypedLocalObjectReference.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1TypedLocalObjectReference class.
            </summary>
            <param name="kind">
            Kind is the type of resource being referenced
            </param>
            <param name="name">
            Name is the name of resource being referenced
            </param>
            <param name="apiGroup">
            APIGroup is the group for the resource being referenced. If APIGroup is not
            specified, the specified Kind must be in the core API group. For any other
            third-party types, APIGroup is required.
            </param>
        </member>
        <member name="P:k8s.Models.V1TypedLocalObjectReference.ApiGroup">
            <summary>
            APIGroup is the group for the resource being referenced. If APIGroup is not
            specified, the specified Kind must be in the core API group. For any other
            third-party types, APIGroup is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TypedLocalObjectReference.Kind">
            <summary>
            Kind is the type of resource being referenced
            </summary>
        </member>
        <member name="P:k8s.Models.V1TypedLocalObjectReference.Name">
            <summary>
            Name is the name of resource being referenced
            </summary>
        </member>
        <member name="M:k8s.Models.V1TypedLocalObjectReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1TypedObjectReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1TypedObjectReference.#ctor">
            <summary>
            Initializes a new instance of the V1TypedObjectReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TypedObjectReference.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1TypedObjectReference class.
            </summary>
            <param name="kind">
            Kind is the type of resource being referenced
            </param>
            <param name="name">
            Name is the name of resource being referenced
            </param>
            <param name="apiGroup">
            APIGroup is the group for the resource being referenced. If APIGroup is not
            specified, the specified Kind must be in the core API group. For any other
            third-party types, APIGroup is required.
            </param>
            <param name="namespaceProperty">
            Namespace is the namespace of resource being referenced Note that when a
            namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is
            required in the referent namespace to allow that namespace&apos;s owner to accept the
            reference. See the ReferenceGrant documentation for details. (Alpha) This field
            requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
            </param>
        </member>
        <member name="P:k8s.Models.V1TypedObjectReference.ApiGroup">
            <summary>
            APIGroup is the group for the resource being referenced. If APIGroup is not
            specified, the specified Kind must be in the core API group. For any other
            third-party types, APIGroup is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1TypedObjectReference.Kind">
            <summary>
            Kind is the type of resource being referenced
            </summary>
        </member>
        <member name="P:k8s.Models.V1TypedObjectReference.Name">
            <summary>
            Name is the name of resource being referenced
            </summary>
        </member>
        <member name="P:k8s.Models.V1TypedObjectReference.NamespaceProperty">
            <summary>
            Namespace is the namespace of resource being referenced Note that when a
            namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is
            required in the referent namespace to allow that namespace&apos;s owner to accept the
            reference. See the ReferenceGrant documentation for details. (Alpha) This field
            requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
            </summary>
        </member>
        <member name="M:k8s.Models.V1TypedObjectReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Volume">
            <summary>
            Volume represents a named volume in a pod that may be accessed by any container
            in the pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Volume.#ctor">
            <summary>
            Initializes a new instance of the V1Volume class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Volume.#ctor(System.String,k8s.Models.V1AWSElasticBlockStoreVolumeSource,k8s.Models.V1AzureDiskVolumeSource,k8s.Models.V1AzureFileVolumeSource,k8s.Models.V1CephFSVolumeSource,k8s.Models.V1CinderVolumeSource,k8s.Models.V1ConfigMapVolumeSource,k8s.Models.V1CSIVolumeSource,k8s.Models.V1DownwardAPIVolumeSource,k8s.Models.V1EmptyDirVolumeSource,k8s.Models.V1EphemeralVolumeSource,k8s.Models.V1FCVolumeSource,k8s.Models.V1FlexVolumeSource,k8s.Models.V1FlockerVolumeSource,k8s.Models.V1GCEPersistentDiskVolumeSource,k8s.Models.V1GitRepoVolumeSource,k8s.Models.V1GlusterfsVolumeSource,k8s.Models.V1HostPathVolumeSource,k8s.Models.V1ISCSIVolumeSource,k8s.Models.V1NFSVolumeSource,k8s.Models.V1PersistentVolumeClaimVolumeSource,k8s.Models.V1PhotonPersistentDiskVolumeSource,k8s.Models.V1PortworxVolumeSource,k8s.Models.V1ProjectedVolumeSource,k8s.Models.V1QuobyteVolumeSource,k8s.Models.V1RBDVolumeSource,k8s.Models.V1ScaleIOVolumeSource,k8s.Models.V1SecretVolumeSource,k8s.Models.V1StorageOSVolumeSource,k8s.Models.V1VsphereVirtualDiskVolumeSource)">
            <summary>
            Initializes a new instance of the V1Volume class.
            </summary>
            <param name="name">
            name of the volume. Must be a DNS_LABEL and unique within the pod. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </param>
            <param name="awsElasticBlockStore">
            awsElasticBlockStore represents an AWS Disk resource that is attached to a
            kubelet&apos;s host machine and then exposed to the pod. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </param>
            <param name="azureDisk">
            azureDisk represents an Azure Data Disk mount on the host and bind mount to the
            pod.
            </param>
            <param name="azureFile">
            azureFile represents an Azure File Service mount on the host and bind mount to
            the pod.
            </param>
            <param name="cephfs">
            cephFS represents a Ceph FS mount on the host that shares a pod&apos;s lifetime
            </param>
            <param name="cinder">
            cinder represents a cinder volume attached and mounted on kubelets host machine.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            </param>
            <param name="configMap">
            configMap represents a configMap that should populate this volume
            </param>
            <param name="csi">
            csi (Container Storage Interface) represents ephemeral storage that is handled
            by certain external CSI drivers (Beta feature).
            </param>
            <param name="downwardAPI">
            downwardAPI represents downward API about the pod that should populate this
            volume
            </param>
            <param name="emptyDir">
            emptyDir represents a temporary directory that shares a pod&apos;s lifetime. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            </param>
            <param name="ephemeral">
            ephemeral represents a volume that is handled by a cluster storage driver. The
            volume&apos;s lifecycle is tied to the pod that defines it - it will be created
            before the pod starts, and deleted when the pod is removed.
            
            Use this if: a) the volume is only needed while the pod runs, b) features of
            normal volumes like restoring from snapshot or capacity
            tracking are needed,
            c) the storage driver is specified through a storage class, and d) the storage
            driver supports dynamic volume provisioning through
            a PersistentVolumeClaim (see EphemeralVolumeSource for more
            information on the connection between this volume type
            and PersistentVolumeClaim).
            
            Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that
            persist for longer than the lifecycle of an individual pod.
            
            Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
            be used that way - see the documentation of the driver for more information.
            
            A pod can use both types of ephemeral volumes and persistent volumes at the same
            time.
            </param>
            <param name="fc">
            fc represents a Fibre Channel resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod.
            </param>
            <param name="flexVolume">
            flexVolume represents a generic volume resource that is provisioned/attached
            using an exec based plugin.
            </param>
            <param name="flocker">
            flocker represents a Flocker volume attached to a kubelet&apos;s host machine. This
            depends on the Flocker control service being running
            </param>
            <param name="gcePersistentDisk">
            gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&apos;s
            host machine and then exposed to the pod. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </param>
            <param name="gitRepo">
            gitRepo represents a git repository at a particular revision. DEPRECATED:
            GitRepo is deprecated. To provision a container with a git repo, mount an
            EmptyDir into an InitContainer that clones the repo using git, then mount the
            EmptyDir into the Pod&apos;s container.
            </param>
            <param name="glusterfs">
            glusterfs represents a Glusterfs mount on the host that shares a pod&apos;s lifetime.
            More info: https://examples.k8s.io/volumes/glusterfs/README.md
            </param>
            <param name="hostPath">
            hostPath represents a pre-existing file or directory on the host machine that is
            directly exposed to the container. This is generally used for system agents or
            other privileged things that are allowed to see the host machine. Most
            containers will NOT need this. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </param>
            <param name="iscsi">
            iscsi represents an ISCSI Disk resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod. More info:
            https://examples.k8s.io/volumes/iscsi/README.md
            </param>
            <param name="nfs">
            nfs represents an NFS mount on the host that shares a pod&apos;s lifetime More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </param>
            <param name="persistentVolumeClaim">
            persistentVolumeClaimVolumeSource represents a reference to a
            PersistentVolumeClaim in the same namespace. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </param>
            <param name="photonPersistentDisk">
            photonPersistentDisk represents a PhotonController persistent disk attached and
            mounted on kubelets host machine
            </param>
            <param name="portworxVolume">
            portworxVolume represents a portworx volume attached and mounted on kubelets
            host machine
            </param>
            <param name="projected">
            projected items for all in one resources secrets, configmaps, and downward API
            </param>
            <param name="quobyte">
            quobyte represents a Quobyte mount on the host that shares a pod&apos;s lifetime
            </param>
            <param name="rbd">
            rbd represents a Rados Block Device mount on the host that shares a pod&apos;s
            lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
            </param>
            <param name="scaleIO">
            scaleIO represents a ScaleIO persistent volume attached and mounted on
            Kubernetes nodes.
            </param>
            <param name="secret">
            secret represents a secret that should populate this volume. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#secret
            </param>
            <param name="storageos">
            storageOS represents a StorageOS volume attached and mounted on Kubernetes
            nodes.
            </param>
            <param name="vsphereVolume">
            vsphereVolume represents a vSphere volume attached and mounted on kubelets host
            machine
            </param>
        </member>
        <member name="P:k8s.Models.V1Volume.AwsElasticBlockStore">
            <summary>
            awsElasticBlockStore represents an AWS Disk resource that is attached to a
            kubelet&apos;s host machine and then exposed to the pod. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.AzureDisk">
            <summary>
            azureDisk represents an Azure Data Disk mount on the host and bind mount to the
            pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.AzureFile">
            <summary>
            azureFile represents an Azure File Service mount on the host and bind mount to
            the pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Cephfs">
            <summary>
            cephFS represents a Ceph FS mount on the host that shares a pod&apos;s lifetime
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Cinder">
            <summary>
            cinder represents a cinder volume attached and mounted on kubelets host machine.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.ConfigMap">
            <summary>
            configMap represents a configMap that should populate this volume
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Csi">
            <summary>
            csi (Container Storage Interface) represents ephemeral storage that is handled
            by certain external CSI drivers (Beta feature).
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.DownwardAPI">
            <summary>
            downwardAPI represents downward API about the pod that should populate this
            volume
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.EmptyDir">
            <summary>
            emptyDir represents a temporary directory that shares a pod&apos;s lifetime. More
            info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Ephemeral">
            <summary>
            ephemeral represents a volume that is handled by a cluster storage driver. The
            volume&apos;s lifecycle is tied to the pod that defines it - it will be created
            before the pod starts, and deleted when the pod is removed.
            
            Use this if: a) the volume is only needed while the pod runs, b) features of
            normal volumes like restoring from snapshot or capacity
            tracking are needed,
            c) the storage driver is specified through a storage class, and d) the storage
            driver supports dynamic volume provisioning through
            a PersistentVolumeClaim (see EphemeralVolumeSource for more
            information on the connection between this volume type
            and PersistentVolumeClaim).
            
            Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that
            persist for longer than the lifecycle of an individual pod.
            
            Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
            be used that way - see the documentation of the driver for more information.
            
            A pod can use both types of ephemeral volumes and persistent volumes at the same
            time.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Fc">
            <summary>
            fc represents a Fibre Channel resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.FlexVolume">
            <summary>
            flexVolume represents a generic volume resource that is provisioned/attached
            using an exec based plugin.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Flocker">
            <summary>
            flocker represents a Flocker volume attached to a kubelet&apos;s host machine. This
            depends on the Flocker control service being running
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.GcePersistentDisk">
            <summary>
            gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&apos;s
            host machine and then exposed to the pod. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.GitRepo">
            <summary>
            gitRepo represents a git repository at a particular revision. DEPRECATED:
            GitRepo is deprecated. To provision a container with a git repo, mount an
            EmptyDir into an InitContainer that clones the repo using git, then mount the
            EmptyDir into the Pod&apos;s container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Glusterfs">
            <summary>
            glusterfs represents a Glusterfs mount on the host that shares a pod&apos;s lifetime.
            More info: https://examples.k8s.io/volumes/glusterfs/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.HostPath">
            <summary>
            hostPath represents a pre-existing file or directory on the host machine that is
            directly exposed to the container. This is generally used for system agents or
            other privileged things that are allowed to see the host machine. Most
            containers will NOT need this. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Iscsi">
            <summary>
            iscsi represents an ISCSI Disk resource that is attached to a kubelet&apos;s host
            machine and then exposed to the pod. More info:
            https://examples.k8s.io/volumes/iscsi/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Name">
            <summary>
            name of the volume. Must be a DNS_LABEL and unique within the pod. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Nfs">
            <summary>
            nfs represents an NFS mount on the host that shares a pod&apos;s lifetime More info:
            https://kubernetes.io/docs/concepts/storage/volumes#nfs
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.PersistentVolumeClaim">
            <summary>
            persistentVolumeClaimVolumeSource represents a reference to a
            PersistentVolumeClaim in the same namespace. More info:
            https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.PhotonPersistentDisk">
            <summary>
            photonPersistentDisk represents a PhotonController persistent disk attached and
            mounted on kubelets host machine
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.PortworxVolume">
            <summary>
            portworxVolume represents a portworx volume attached and mounted on kubelets
            host machine
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Projected">
            <summary>
            projected items for all in one resources secrets, configmaps, and downward API
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Quobyte">
            <summary>
            quobyte represents a Quobyte mount on the host that shares a pod&apos;s lifetime
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Rbd">
            <summary>
            rbd represents a Rados Block Device mount on the host that shares a pod&apos;s
            lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.ScaleIO">
            <summary>
            scaleIO represents a ScaleIO persistent volume attached and mounted on
            Kubernetes nodes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Secret">
            <summary>
            secret represents a secret that should populate this volume. More info:
            https://kubernetes.io/docs/concepts/storage/volumes#secret
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.Storageos">
            <summary>
            storageOS represents a StorageOS volume attached and mounted on Kubernetes
            nodes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Volume.VsphereVolume">
            <summary>
            vsphereVolume represents a vSphere volume attached and mounted on kubelets host
            machine
            </summary>
        </member>
        <member name="M:k8s.Models.V1Volume.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeDevice">
            <summary>
            volumeDevice describes a mapping of a raw block device within a container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeDevice.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeDevice class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeDevice.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1VolumeDevice class.
            </summary>
            <param name="devicePath">
            devicePath is the path inside of the container that the device will be mapped
            to.
            </param>
            <param name="name">
            name must match the name of a persistentVolumeClaim in the pod
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeDevice.DevicePath">
            <summary>
            devicePath is the path inside of the container that the device will be mapped
            to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeDevice.Name">
            <summary>
            name must match the name of a persistentVolumeClaim in the pod
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeDevice.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeMount">
            <summary>
            VolumeMount describes a mounting of a Volume within a container.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeMount.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeMount class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeMount.#ctor(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1VolumeMount class.
            </summary>
            <param name="mountPath">
            Path within the container at which the volume should be mounted.  Must not
            contain &apos;:&apos;.
            </param>
            <param name="name">
            This must match the Name of a Volume.
            </param>
            <param name="mountPropagation">
            mountPropagation determines how mounts are propagated from the host to container
            and the other way around. When not set, MountPropagationNone is used. This field
            is beta in 1.10.
            </param>
            <param name="readOnlyProperty">
            Mounted read-only if true, read-write otherwise (false or unspecified). Defaults
            to false.
            </param>
            <param name="subPath">
            Path within the volume from which the container&apos;s volume should be mounted.
            Defaults to &quot;&quot; (volume&apos;s root).
            </param>
            <param name="subPathExpr">
            Expanded path within the volume from which the container&apos;s volume should be
            mounted. Behaves similarly to SubPath but environment variable references
            $(VAR_NAME) are expanded using the container&apos;s environment. Defaults to &quot;&quot;
            (volume&apos;s root). SubPathExpr and SubPath are mutually exclusive.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeMount.MountPath">
            <summary>
            Path within the container at which the volume should be mounted.  Must not
            contain &apos;:&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeMount.MountPropagation">
            <summary>
            mountPropagation determines how mounts are propagated from the host to container
            and the other way around. When not set, MountPropagationNone is used. This field
            is beta in 1.10.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeMount.Name">
            <summary>
            This must match the Name of a Volume.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeMount.ReadOnlyProperty">
            <summary>
            Mounted read-only if true, read-write otherwise (false or unspecified). Defaults
            to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeMount.SubPath">
            <summary>
            Path within the volume from which the container&apos;s volume should be mounted.
            Defaults to &quot;&quot; (volume&apos;s root).
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeMount.SubPathExpr">
            <summary>
            Expanded path within the volume from which the container&apos;s volume should be
            mounted. Behaves similarly to SubPath but environment variable references
            $(VAR_NAME) are expanded using the container&apos;s environment. Defaults to &quot;&quot;
            (volume&apos;s root). SubPathExpr and SubPath are mutually exclusive.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeMount.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeNodeAffinity">
            <summary>
            VolumeNodeAffinity defines constraints that limit what nodes this volume can be
            accessed from.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeNodeAffinity.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeNodeAffinity class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeNodeAffinity.#ctor(k8s.Models.V1NodeSelector)">
            <summary>
            Initializes a new instance of the V1VolumeNodeAffinity class.
            </summary>
            <param name="required">
            required specifies hard node constraints that must be met.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeNodeAffinity.Required">
            <summary>
            required specifies hard node constraints that must be met.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeNodeAffinity.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeProjection">
            <summary>
            Projection that may be projected along with other supported volume types
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeProjection.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeProjection class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeProjection.#ctor(k8s.Models.V1ConfigMapProjection,k8s.Models.V1DownwardAPIProjection,k8s.Models.V1SecretProjection,k8s.Models.V1ServiceAccountTokenProjection)">
            <summary>
            Initializes a new instance of the V1VolumeProjection class.
            </summary>
            <param name="configMap">
            configMap information about the configMap data to project
            </param>
            <param name="downwardAPI">
            downwardAPI information about the downwardAPI data to project
            </param>
            <param name="secret">
            secret information about the secret data to project
            </param>
            <param name="serviceAccountToken">
            serviceAccountToken is information about the serviceAccountToken data to project
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeProjection.ConfigMap">
            <summary>
            configMap information about the configMap data to project
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeProjection.DownwardAPI">
            <summary>
            downwardAPI information about the downwardAPI data to project
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeProjection.Secret">
            <summary>
            secret information about the secret data to project
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeProjection.ServiceAccountToken">
            <summary>
            serviceAccountToken is information about the serviceAccountToken data to project
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeProjection.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VsphereVirtualDiskVolumeSource">
            <summary>
            Represents a vSphere volume resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VsphereVirtualDiskVolumeSource.#ctor">
            <summary>
            Initializes a new instance of the V1VsphereVirtualDiskVolumeSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VsphereVirtualDiskVolumeSource.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1VsphereVirtualDiskVolumeSource class.
            </summary>
            <param name="volumePath">
            volumePath is the path that identifies vSphere volume vmdk
            </param>
            <param name="fsType">
            fsType is filesystem type to mount. Must be a filesystem type supported by the
            host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </param>
            <param name="storagePolicyID">
            storagePolicyID is the storage Policy Based Management (SPBM) profile ID
            associated with the StoragePolicyName.
            </param>
            <param name="storagePolicyName">
            storagePolicyName is the storage Policy Based Management (SPBM) profile name.
            </param>
        </member>
        <member name="P:k8s.Models.V1VsphereVirtualDiskVolumeSource.FsType">
            <summary>
            fsType is filesystem type to mount. Must be a filesystem type supported by the
            host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
            &quot;ext4&quot; if unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VsphereVirtualDiskVolumeSource.StoragePolicyID">
            <summary>
            storagePolicyID is the storage Policy Based Management (SPBM) profile ID
            associated with the StoragePolicyName.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VsphereVirtualDiskVolumeSource.StoragePolicyName">
            <summary>
            storagePolicyName is the storage Policy Based Management (SPBM) profile name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VsphereVirtualDiskVolumeSource.VolumePath">
            <summary>
            volumePath is the path that identifies vSphere volume vmdk
            </summary>
        </member>
        <member name="M:k8s.Models.V1VsphereVirtualDiskVolumeSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1WeightedPodAffinityTerm">
            <summary>
            The weights of all of the matched WeightedPodAffinityTerm fields are added
            per-node to find the most preferred node(s)
            </summary>
        </member>
        <member name="M:k8s.Models.V1WeightedPodAffinityTerm.#ctor">
            <summary>
            Initializes a new instance of the V1WeightedPodAffinityTerm class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WeightedPodAffinityTerm.#ctor(k8s.Models.V1PodAffinityTerm,System.Int32)">
            <summary>
            Initializes a new instance of the V1WeightedPodAffinityTerm class.
            </summary>
            <param name="podAffinityTerm">
            Required. A pod affinity term, associated with the corresponding weight.
            </param>
            <param name="weight">
            weight associated with matching the corresponding podAffinityTerm, in the range
            1-100.
            </param>
        </member>
        <member name="P:k8s.Models.V1WeightedPodAffinityTerm.PodAffinityTerm">
            <summary>
            Required. A pod affinity term, associated with the corresponding weight.
            </summary>
        </member>
        <member name="P:k8s.Models.V1WeightedPodAffinityTerm.Weight">
            <summary>
            weight associated with matching the corresponding podAffinityTerm, in the range
            1-100.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WeightedPodAffinityTerm.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1WindowsSecurityContextOptions">
            <summary>
            WindowsSecurityContextOptions contain Windows-specific options and credentials.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WindowsSecurityContextOptions.#ctor">
            <summary>
            Initializes a new instance of the V1WindowsSecurityContextOptions class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WindowsSecurityContextOptions.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the V1WindowsSecurityContextOptions class.
            </summary>
            <param name="gmsaCredentialSpec">
            GMSACredentialSpec is where the GMSA admission webhook
            (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
            GMSA credential spec named by the GMSACredentialSpecName field.
            </param>
            <param name="gmsaCredentialSpecName">
            GMSACredentialSpecName is the name of the GMSA credential spec to use.
            </param>
            <param name="hostProcess">
            HostProcess determines if a container should be run as a &apos;Host Process&apos;
            container. All of a Pod&apos;s containers must have the same effective HostProcess
            value (it is not allowed to have a mix of HostProcess containers and
            non-HostProcess containers). In addition, if HostProcess is true then
            HostNetwork must also be set to true.
            </param>
            <param name="runAsUserName">
            The UserName in Windows to run the entrypoint of the container process. Defaults
            to the user specified in image metadata if unspecified. May also be set in
            PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the
            value specified in SecurityContext takes precedence.
            </param>
        </member>
        <member name="P:k8s.Models.V1WindowsSecurityContextOptions.GmsaCredentialSpec">
            <summary>
            GMSACredentialSpec is where the GMSA admission webhook
            (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
            GMSA credential spec named by the GMSACredentialSpecName field.
            </summary>
        </member>
        <member name="P:k8s.Models.V1WindowsSecurityContextOptions.GmsaCredentialSpecName">
            <summary>
            GMSACredentialSpecName is the name of the GMSA credential spec to use.
            </summary>
        </member>
        <member name="P:k8s.Models.V1WindowsSecurityContextOptions.HostProcess">
            <summary>
            HostProcess determines if a container should be run as a &apos;Host Process&apos;
            container. All of a Pod&apos;s containers must have the same effective HostProcess
            value (it is not allowed to have a mix of HostProcess containers and
            non-HostProcess containers). In addition, if HostProcess is true then
            HostNetwork must also be set to true.
            </summary>
        </member>
        <member name="P:k8s.Models.V1WindowsSecurityContextOptions.RunAsUserName">
            <summary>
            The UserName in Windows to run the entrypoint of the container process. Defaults
            to the user specified in image metadata if unspecified. May also be set in
            PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the
            value specified in SecurityContext takes precedence.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WindowsSecurityContextOptions.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Endpoint">
            <summary>
            Endpoint represents a single logical &quot;backend&quot; implementing a service.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Endpoint.#ctor">
            <summary>
            Initializes a new instance of the V1Endpoint class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Endpoint.#ctor(System.Collections.Generic.IList{System.String},k8s.Models.V1EndpointConditions,System.Collections.Generic.IDictionary{System.String,System.String},k8s.Models.V1EndpointHints,System.String,System.String,k8s.Models.V1ObjectReference,System.String)">
            <summary>
            Initializes a new instance of the V1Endpoint class.
            </summary>
            <param name="addresses">
            addresses of this endpoint. The contents of this field are interpreted according
            to the corresponding EndpointSlice addressType field. Consumers must handle
            different types of addresses in the context of their own capabilities. This must
            contain at least one address but no more than 100. These are all assumed to be
            fungible and clients may choose to only use the first element. Refer to:
            https://issue.k8s.io/106267
            </param>
            <param name="conditions">
            conditions contains information about the current status of the endpoint.
            </param>
            <param name="deprecatedTopology">
            deprecatedTopology contains topology information part of the v1beta1 API. This
            field is deprecated, and will be removed when the v1beta1 API is removed (no
            sooner than kubernetes v1.24).  While this field can hold values, it is not
            writable through the v1 API, and any attempts to write to it will be silently
            ignored. Topology information can be found in the zone and nodeName fields
            instead.
            </param>
            <param name="hints">
            hints contains information associated with how an endpoint should be consumed.
            </param>
            <param name="hostname">
            hostname of this endpoint. This field may be used by consumers of endpoints to
            distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints
            which use the same hostname should be considered fungible (e.g. multiple A
            values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
            </param>
            <param name="nodeName">
            nodeName represents the name of the Node hosting this endpoint. This can be used
            to determine endpoints local to a Node.
            </param>
            <param name="targetRef">
            targetRef is a reference to a Kubernetes object that represents this endpoint.
            </param>
            <param name="zone">
            zone is the name of the Zone this endpoint exists in.
            </param>
        </member>
        <member name="P:k8s.Models.V1Endpoint.Addresses">
            <summary>
            addresses of this endpoint. The contents of this field are interpreted according
            to the corresponding EndpointSlice addressType field. Consumers must handle
            different types of addresses in the context of their own capabilities. This must
            contain at least one address but no more than 100. These are all assumed to be
            fungible and clients may choose to only use the first element. Refer to:
            https://issue.k8s.io/106267
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoint.Conditions">
            <summary>
            conditions contains information about the current status of the endpoint.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoint.DeprecatedTopology">
            <summary>
            deprecatedTopology contains topology information part of the v1beta1 API. This
            field is deprecated, and will be removed when the v1beta1 API is removed (no
            sooner than kubernetes v1.24).  While this field can hold values, it is not
            writable through the v1 API, and any attempts to write to it will be silently
            ignored. Topology information can be found in the zone and nodeName fields
            instead.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoint.Hints">
            <summary>
            hints contains information associated with how an endpoint should be consumed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoint.Hostname">
            <summary>
            hostname of this endpoint. This field may be used by consumers of endpoints to
            distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints
            which use the same hostname should be considered fungible (e.g. multiple A
            values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoint.NodeName">
            <summary>
            nodeName represents the name of the Node hosting this endpoint. This can be used
            to determine endpoints local to a Node.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoint.TargetRef">
            <summary>
            targetRef is a reference to a Kubernetes object that represents this endpoint.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Endpoint.Zone">
            <summary>
            zone is the name of the Zone this endpoint exists in.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Endpoint.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EndpointConditions">
            <summary>
            EndpointConditions represents the current condition of an endpoint.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointConditions.#ctor">
            <summary>
            Initializes a new instance of the V1EndpointConditions class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointConditions.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1EndpointConditions class.
            </summary>
            <param name="ready">
            ready indicates that this endpoint is prepared to receive traffic, according to
            whatever system is managing the endpoint. A nil value indicates an unknown
            state. In most cases consumers should interpret this unknown state as ready. For
            compatibility reasons, ready should never be &quot;true&quot; for terminating endpoints,
            except when the normal readiness behavior is being explicitly overridden, for
            example when the associated Service has set the publishNotReadyAddresses flag.
            </param>
            <param name="serving">
            serving is identical to ready except that it is set regardless of the
            terminating state of endpoints. This condition should be set to true for a ready
            endpoint that is terminating. If nil, consumers should defer to the ready
            condition.
            </param>
            <param name="terminating">
            terminating indicates that this endpoint is terminating. A nil value indicates
            an unknown state. Consumers should interpret this unknown state to mean that the
            endpoint is not terminating.
            </param>
        </member>
        <member name="P:k8s.Models.V1EndpointConditions.Ready">
            <summary>
            ready indicates that this endpoint is prepared to receive traffic, according to
            whatever system is managing the endpoint. A nil value indicates an unknown
            state. In most cases consumers should interpret this unknown state as ready. For
            compatibility reasons, ready should never be &quot;true&quot; for terminating endpoints,
            except when the normal readiness behavior is being explicitly overridden, for
            example when the associated Service has set the publishNotReadyAddresses flag.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointConditions.Serving">
            <summary>
            serving is identical to ready except that it is set regardless of the
            terminating state of endpoints. This condition should be set to true for a ready
            endpoint that is terminating. If nil, consumers should defer to the ready
            condition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointConditions.Terminating">
            <summary>
            terminating indicates that this endpoint is terminating. A nil value indicates
            an unknown state. Consumers should interpret this unknown state to mean that the
            endpoint is not terminating.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointConditions.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EndpointHints">
            <summary>
            EndpointHints provides hints describing how an endpoint should be consumed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointHints.#ctor">
            <summary>
            Initializes a new instance of the V1EndpointHints class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointHints.#ctor(System.Collections.Generic.IList{k8s.Models.V1ForZone})">
            <summary>
            Initializes a new instance of the V1EndpointHints class.
            </summary>
            <param name="forZones">
            forZones indicates the zone(s) this endpoint should be consumed by to enable
            topology aware routing.
            </param>
        </member>
        <member name="P:k8s.Models.V1EndpointHints.ForZones">
            <summary>
            forZones indicates the zone(s) this endpoint should be consumed by to enable
            topology aware routing.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointHints.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Discoveryv1EndpointPort">
            <summary>
            EndpointPort represents a Port used by an EndpointSlice
            </summary>
        </member>
        <member name="M:k8s.Models.Discoveryv1EndpointPort.#ctor">
            <summary>
            Initializes a new instance of the Discoveryv1EndpointPort class.
            </summary>
        </member>
        <member name="M:k8s.Models.Discoveryv1EndpointPort.#ctor(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the Discoveryv1EndpointPort class.
            </summary>
            <param name="appProtocol">
            The application protocol for this port. This is used as a hint for
            implementations to offer richer behavior for protocols that they understand.
            This field follows standard Kubernetes label syntax. Valid values are either:
            
            * Un-prefixed protocol names - reserved for IANA standard service names (as per
            RFC-6335 and https://www.iana.org/assignments/service-names).
            
            * Kubernetes-defined prefixed names:
            * &apos;kubernetes.io/h2c&apos; - HTTP/2 over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc7540
            * &apos;kubernetes.io/ws&apos;  - WebSocket over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc6455
            * &apos;kubernetes.io/wss&apos; - WebSocket over TLS as described in
            https://www.rfc-editor.org/rfc/rfc6455
            
            * Other protocols should use implementation-defined prefixed names such as
            mycompany.com/my-custom-protocol.
            </param>
            <param name="name">
            name represents the name of this port. All ports in an EndpointSlice must have a
            unique name. If the EndpointSlice is dervied from a Kubernetes service, this
            corresponds to the Service.ports[].name. Name must either be an empty string or
            pass DNS_LABEL validation: * must be no more than 63 characters long. * must
            consist of lower case alphanumeric characters or &apos;-&apos;. * must start and end with
            an alphanumeric character. Default is empty string.
            </param>
            <param name="port">
            port represents the port number of the endpoint. If this is not specified, ports
            are not restricted and must be interpreted in the context of the specific
            consumer.
            </param>
            <param name="protocol">
            protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP.
            Default is TCP.
            </param>
        </member>
        <member name="P:k8s.Models.Discoveryv1EndpointPort.AppProtocol">
            <summary>
            The application protocol for this port. This is used as a hint for
            implementations to offer richer behavior for protocols that they understand.
            This field follows standard Kubernetes label syntax. Valid values are either:
            
            * Un-prefixed protocol names - reserved for IANA standard service names (as per
            RFC-6335 and https://www.iana.org/assignments/service-names).
            
            * Kubernetes-defined prefixed names:
            * &apos;kubernetes.io/h2c&apos; - HTTP/2 over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc7540
            * &apos;kubernetes.io/ws&apos;  - WebSocket over cleartext as described in
            https://www.rfc-editor.org/rfc/rfc6455
            * &apos;kubernetes.io/wss&apos; - WebSocket over TLS as described in
            https://www.rfc-editor.org/rfc/rfc6455
            
            * Other protocols should use implementation-defined prefixed names such as
            mycompany.com/my-custom-protocol.
            </summary>
        </member>
        <member name="P:k8s.Models.Discoveryv1EndpointPort.Name">
            <summary>
            name represents the name of this port. All ports in an EndpointSlice must have a
            unique name. If the EndpointSlice is dervied from a Kubernetes service, this
            corresponds to the Service.ports[].name. Name must either be an empty string or
            pass DNS_LABEL validation: * must be no more than 63 characters long. * must
            consist of lower case alphanumeric characters or &apos;-&apos;. * must start and end with
            an alphanumeric character. Default is empty string.
            </summary>
        </member>
        <member name="P:k8s.Models.Discoveryv1EndpointPort.Port">
            <summary>
            port represents the port number of the endpoint. If this is not specified, ports
            are not restricted and must be interpreted in the context of the specific
            consumer.
            </summary>
        </member>
        <member name="P:k8s.Models.Discoveryv1EndpointPort.Protocol">
            <summary>
            protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP.
            Default is TCP.
            </summary>
        </member>
        <member name="M:k8s.Models.Discoveryv1EndpointPort.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EndpointSlice">
            <summary>
            EndpointSlice represents a subset of the endpoints that implement a service. For
            a given service there may be multiple EndpointSlice objects, selected by labels,
            which must be joined to produce the full set of endpoints.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSlice.#ctor">
            <summary>
            Initializes a new instance of the V1EndpointSlice class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSlice.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1Endpoint},System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.Discoveryv1EndpointPort})">
            <summary>
            Initializes a new instance of the V1EndpointSlice class.
            </summary>
            <param name="addressType">
            addressType specifies the type of address carried by this EndpointSlice. All
            addresses in this slice must be the same type. This field is immutable after
            creation. The following address types are currently supported: * IPv4:
            Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN:
            Represents a Fully Qualified Domain Name.
            </param>
            <param name="endpoints">
            endpoints is a list of unique endpoints in this slice. Each slice may include a
            maximum of 1000 endpoints.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
            <param name="ports">
            ports specifies the list of network ports exposed by each endpoint in this
            slice. Each port must have a unique name. When ports is empty, it indicates that
            there are no defined ports. When a port is defined with a nil port value, it
            indicates &quot;all ports&quot;. Each slice may include a maximum of 100 ports.
            </param>
        </member>
        <member name="P:k8s.Models.V1EndpointSlice.AddressType">
            <summary>
            addressType specifies the type of address carried by this EndpointSlice. All
            addresses in this slice must be the same type. This field is immutable after
            creation. The following address types are currently supported: * IPv4:
            Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN:
            Represents a Fully Qualified Domain Name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSlice.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSlice.Endpoints">
            <summary>
            endpoints is a list of unique endpoints in this slice. Each slice may include a
            maximum of 1000 endpoints.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSlice.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSlice.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSlice.Ports">
            <summary>
            ports specifies the list of network ports exposed by each endpoint in this
            slice. Each port must have a unique name. When ports is empty, it indicates that
            there are no defined ports. When a port is defined with a nil port value, it
            indicates &quot;all ports&quot;. Each slice may include a maximum of 100 ports.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSlice.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1EndpointSliceList">
            <summary>
            EndpointSliceList represents a list of endpoint slices
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSliceList.#ctor">
            <summary>
            Initializes a new instance of the V1EndpointSliceList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSliceList.#ctor(System.Collections.Generic.IList{k8s.Models.V1EndpointSlice},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1EndpointSliceList class.
            </summary>
            <param name="items">
            items is the list of endpoint slices
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1EndpointSliceList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSliceList.Items">
            <summary>
            items is the list of endpoint slices
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSliceList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1EndpointSliceList.Metadata">
            <summary>
            Standard list metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1EndpointSliceList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ForZone">
            <summary>
            ForZone provides information about which zones should consume this endpoint.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ForZone.#ctor">
            <summary>
            Initializes a new instance of the V1ForZone class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ForZone.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1ForZone class.
            </summary>
            <param name="name">
            name represents the name of the zone.
            </param>
        </member>
        <member name="P:k8s.Models.V1ForZone.Name">
            <summary>
            name represents the name of the zone.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ForZone.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Eventsv1Event">
            <summary>
            Event is a report of an event somewhere in the cluster. It generally denotes
            some state change in the system. Events have a limited retention time and
            triggers and messages may evolve with time.  Event consumers should not rely on
            the timing of an event with a given Reason reflecting a consistent underlying
            trigger, or the continued existence of events with that Reason.  Events should
            be treated as informative, best-effort, supplemental data.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1Event.#ctor">
            <summary>
            Initializes a new instance of the Eventsv1Event class.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1Event.#ctor(System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},k8s.Models.V1EventSource,System.String,k8s.Models.V1ObjectMeta,System.String,System.String,k8s.Models.V1ObjectReference,k8s.Models.V1ObjectReference,System.String,System.String,k8s.Models.Eventsv1EventSeries,System.String)">
            <summary>
            Initializes a new instance of the Eventsv1Event class.
            </summary>
            <param name="eventTime">
            eventTime is the time when this Event was first observed. It is required.
            </param>
            <param name="action">
            action is what action was taken/failed regarding to the regarding object. It is
            machine-readable. This field cannot be empty for new Events and it can have at
            most 128 characters.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="deprecatedCount">
            deprecatedCount is the deprecated field assuring backward compatibility with
            core.v1 Event type.
            </param>
            <param name="deprecatedFirstTimestamp">
            deprecatedFirstTimestamp is the deprecated field assuring backward compatibility
            with core.v1 Event type.
            </param>
            <param name="deprecatedLastTimestamp">
            deprecatedLastTimestamp is the deprecated field assuring backward compatibility
            with core.v1 Event type.
            </param>
            <param name="deprecatedSource">
            deprecatedSource is the deprecated field assuring backward compatibility with
            core.v1 Event type.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="note">
            note is a human-readable description of the status of this operation. Maximal
            length of the note is 1kB, but libraries should be prepared to handle values up
            to 64kB.
            </param>
            <param name="reason">
            reason is why the action was taken. It is human-readable. This field cannot be
            empty for new Events and it can have at most 128 characters.
            </param>
            <param name="regarding">
            regarding contains the object this Event is about. In most cases it&apos;s an Object
            reporting controller implements, e.g. ReplicaSetController implements
            ReplicaSets and this event is emitted because it acts on some changes in a
            ReplicaSet object.
            </param>
            <param name="related">
            related is the optional secondary object for more complex actions. E.g. when
            regarding object triggers a creation or deletion of related object.
            </param>
            <param name="reportingController">
            reportingController is the name of the controller that emitted this Event, e.g.
            `kubernetes.io/kubelet`. This field cannot be empty for new Events.
            </param>
            <param name="reportingInstance">
            reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`.
            This field cannot be empty for new Events and it can have at most 128
            characters.
            </param>
            <param name="series">
            series is data about the Event series this event represents or nil if it&apos;s a
            singleton Event.
            </param>
            <param name="type">
            type is the type of this event (Normal, Warning), new types could be added in
            the future. It is machine-readable. This field cannot be empty for new Events.
            </param>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Action">
            <summary>
            action is what action was taken/failed regarding to the regarding object. It is
            machine-readable. This field cannot be empty for new Events and it can have at
            most 128 characters.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.DeprecatedCount">
            <summary>
            deprecatedCount is the deprecated field assuring backward compatibility with
            core.v1 Event type.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.DeprecatedFirstTimestamp">
            <summary>
            deprecatedFirstTimestamp is the deprecated field assuring backward compatibility
            with core.v1 Event type.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.DeprecatedLastTimestamp">
            <summary>
            deprecatedLastTimestamp is the deprecated field assuring backward compatibility
            with core.v1 Event type.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.DeprecatedSource">
            <summary>
            deprecatedSource is the deprecated field assuring backward compatibility with
            core.v1 Event type.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.EventTime">
            <summary>
            eventTime is the time when this Event was first observed. It is required.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Note">
            <summary>
            note is a human-readable description of the status of this operation. Maximal
            length of the note is 1kB, but libraries should be prepared to handle values up
            to 64kB.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Reason">
            <summary>
            reason is why the action was taken. It is human-readable. This field cannot be
            empty for new Events and it can have at most 128 characters.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Regarding">
            <summary>
            regarding contains the object this Event is about. In most cases it&apos;s an Object
            reporting controller implements, e.g. ReplicaSetController implements
            ReplicaSets and this event is emitted because it acts on some changes in a
            ReplicaSet object.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Related">
            <summary>
            related is the optional secondary object for more complex actions. E.g. when
            regarding object triggers a creation or deletion of related object.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.ReportingController">
            <summary>
            reportingController is the name of the controller that emitted this Event, e.g.
            `kubernetes.io/kubelet`. This field cannot be empty for new Events.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.ReportingInstance">
            <summary>
            reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`.
            This field cannot be empty for new Events and it can have at most 128
            characters.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Series">
            <summary>
            series is data about the Event series this event represents or nil if it&apos;s a
            singleton Event.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1Event.Type">
            <summary>
            type is the type of this event (Normal, Warning), new types could be added in
            the future. It is machine-readable. This field cannot be empty for new Events.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1Event.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Eventsv1EventList">
            <summary>
            EventList is a list of Event objects.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1EventList.#ctor">
            <summary>
            Initializes a new instance of the Eventsv1EventList class.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1EventList.#ctor(System.Collections.Generic.IList{k8s.Models.Eventsv1Event},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the Eventsv1EventList class.
            </summary>
            <param name="items">
            items is a list of schema objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.Eventsv1EventList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1EventList.Items">
            <summary>
            items is a list of schema objects.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1EventList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1EventList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1EventList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Eventsv1EventSeries">
            <summary>
            EventSeries contain information on series of events, i.e. thing that was/is
            happening continuously for some time. How often to update the EventSeries is up
            to the event reporters. The default event reporter in
            &quot;k8s.io/client-go/tools/events/event_broadcaster.go&quot; shows how this struct is
            updated on heartbeats and can guide customized reporter implementations.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1EventSeries.#ctor">
            <summary>
            Initializes a new instance of the Eventsv1EventSeries class.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1EventSeries.#ctor(System.Int32,System.DateTime)">
            <summary>
            Initializes a new instance of the Eventsv1EventSeries class.
            </summary>
            <param name="count">
            count is the number of occurrences in this series up to the last heartbeat time.
            </param>
            <param name="lastObservedTime">
            lastObservedTime is the time when last Event from the series was seen before
            last heartbeat.
            </param>
        </member>
        <member name="P:k8s.Models.Eventsv1EventSeries.Count">
            <summary>
            count is the number of occurrences in this series up to the last heartbeat time.
            </summary>
        </member>
        <member name="P:k8s.Models.Eventsv1EventSeries.LastObservedTime">
            <summary>
            lastObservedTime is the time when last Event from the series was seen before
            last heartbeat.
            </summary>
        </member>
        <member name="M:k8s.Models.Eventsv1EventSeries.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2ExemptPriorityLevelConfiguration">
            <summary>
            ExemptPriorityLevelConfiguration describes the configurable aspects of the
            handling of exempt requests. In the mandatory exempt configuration object the
            values in the fields here can be modified by authorized users, unlike the rest
            of the `spec`.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ExemptPriorityLevelConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta2ExemptPriorityLevelConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ExemptPriorityLevelConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1beta2ExemptPriorityLevelConfiguration class.
            </summary>
            <param name="lendablePercent">
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels.  This value of this field must be between 0
            and 100, inclusive, and it defaults to 0. The number of seats that other levels
            can borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </param>
            <param name="nominalConcurrencyShares">
            `nominalConcurrencyShares` (NCS) contributes to the computation of the
            NominalConcurrencyLimit (NominalCL) of this level. This is the number of
            execution seats nominally reserved for this priority level. This DOES NOT limit
            the dispatching from this priority level but affects the other priority levels
            through the borrowing mechanism. The server&apos;s concurrency limit (ServerCL) is
            divided among all the priority levels in proportion to their NCS values:
            
            NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level
            k] NCS(k)
            
            Bigger numbers mean a larger nominal concurrency limit, at the expense of every
            other priority level. This field has a default value of zero.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2ExemptPriorityLevelConfiguration.LendablePercent">
            <summary>
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels.  This value of this field must be between 0
            and 100, inclusive, and it defaults to 0. The number of seats that other levels
            can borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2ExemptPriorityLevelConfiguration.NominalConcurrencyShares">
            <summary>
            `nominalConcurrencyShares` (NCS) contributes to the computation of the
            NominalConcurrencyLimit (NominalCL) of this level. This is the number of
            execution seats nominally reserved for this priority level. This DOES NOT limit
            the dispatching from this priority level but affects the other priority levels
            through the borrowing mechanism. The server&apos;s concurrency limit (ServerCL) is
            divided among all the priority levels in proportion to their NCS values:
            
            NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level
            k] NCS(k)
            
            Bigger numbers mean a larger nominal concurrency limit, at the expense of every
            other priority level. This field has a default value of zero.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ExemptPriorityLevelConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2FlowDistinguisherMethod">
            <summary>
            FlowDistinguisherMethod specifies the method of a flow distinguisher.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowDistinguisherMethod.#ctor">
            <summary>
            Initializes a new instance of the V1beta2FlowDistinguisherMethod class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowDistinguisherMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta2FlowDistinguisherMethod class.
            </summary>
            <param name="type">
            `type` is the type of flow distinguisher method The supported types are &quot;ByUser&quot;
            and &quot;ByNamespace&quot;. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2FlowDistinguisherMethod.Type">
            <summary>
            `type` is the type of flow distinguisher method The supported types are &quot;ByUser&quot;
            and &quot;ByNamespace&quot;. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowDistinguisherMethod.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2FlowSchema">
            <summary>
            FlowSchema defines the schema of a group of flows. Note that a flow is made up
            of a set of inbound API requests with similar attributes and is identified by a
            pair of strings: the name of the FlowSchema and a &quot;flow distinguisher&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchema.#ctor">
            <summary>
            Initializes a new instance of the V1beta2FlowSchema class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchema.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1beta2FlowSchemaSpec,k8s.Models.V1beta2FlowSchemaStatus)">
            <summary>
            Initializes a new instance of the V1beta2FlowSchema class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            `spec` is the specification of the desired behavior of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            `status` is the current status of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchema.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchema.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchema.Metadata">
            <summary>
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchema.Spec">
            <summary>
            `spec` is the specification of the desired behavior of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchema.Status">
            <summary>
            `status` is the current status of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchema.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2FlowSchemaCondition">
            <summary>
            FlowSchemaCondition describes conditions for a FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaCondition.#ctor">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaCondition.#ctor(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaCondition class.
            </summary>
            <param name="lastTransitionTime">
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </param>
            <param name="message">
            `message` is a human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </param>
            <param name="status">
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </param>
            <param name="type">
            `type` is the type of the condition. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaCondition.LastTransitionTime">
            <summary>
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaCondition.Message">
            <summary>
            `message` is a human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaCondition.Reason">
            <summary>
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaCondition.Status">
            <summary>
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaCondition.Type">
            <summary>
            `type` is the type of the condition. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2FlowSchemaList">
            <summary>
            FlowSchemaList is a list of FlowSchema objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaList.#ctor">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaList.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta2FlowSchema},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaList class.
            </summary>
            <param name="items">
            `items` is a list of FlowSchemas.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaList.Items">
            <summary>
            `items` is a list of FlowSchemas.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaList.Metadata">
            <summary>
            `metadata` is the standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2FlowSchemaSpec">
            <summary>
            FlowSchemaSpec describes how the FlowSchema&apos;s specification looks like.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaSpec.#ctor">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaSpec.#ctor(k8s.Models.V1beta2PriorityLevelConfigurationReference,k8s.Models.V1beta2FlowDistinguisherMethod,System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1beta2PolicyRulesWithSubjects})">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaSpec class.
            </summary>
            <param name="priorityLevelConfiguration">
            `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in
            the cluster. If the reference cannot be resolved, the FlowSchema will be ignored
            and marked as invalid in its status. Required.
            </param>
            <param name="distinguisherMethod">
            `distinguisherMethod` defines how to compute the flow distinguisher for requests
            that match this schema. `nil` specifies that the distinguisher is disabled and
            thus will always be the empty string.
            </param>
            <param name="matchingPrecedence">
            `matchingPrecedence` is used to choose among the FlowSchemas that match a given
            request. The chosen FlowSchema is among those with the numerically lowest (which
            we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence
            value must be ranged in [1,10000]. Note that if the precedence is not specified,
            it will be set to 1000 as default.
            </param>
            <param name="rules">
            `rules` describes which requests will match this flow schema. This FlowSchema
            matches a request if and only if at least one member of rules matches the
            request. if it is an empty slice, there will be no requests matching the
            FlowSchema.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaSpec.DistinguisherMethod">
            <summary>
            `distinguisherMethod` defines how to compute the flow distinguisher for requests
            that match this schema. `nil` specifies that the distinguisher is disabled and
            thus will always be the empty string.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaSpec.MatchingPrecedence">
            <summary>
            `matchingPrecedence` is used to choose among the FlowSchemas that match a given
            request. The chosen FlowSchema is among those with the numerically lowest (which
            we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence
            value must be ranged in [1,10000]. Note that if the precedence is not specified,
            it will be set to 1000 as default.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaSpec.PriorityLevelConfiguration">
            <summary>
            `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in
            the cluster. If the reference cannot be resolved, the FlowSchema will be ignored
            and marked as invalid in its status. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaSpec.Rules">
            <summary>
            `rules` describes which requests will match this flow schema. This FlowSchema
            matches a request if and only if at least one member of rules matches the
            request. if it is an empty slice, there will be no requests matching the
            FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2FlowSchemaStatus">
            <summary>
            FlowSchemaStatus represents the current state of a FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaStatus.#ctor">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta2FlowSchemaCondition})">
            <summary>
            Initializes a new instance of the V1beta2FlowSchemaStatus class.
            </summary>
            <param name="conditions">
            `conditions` is a list of the current states of FlowSchema.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2FlowSchemaStatus.Conditions">
            <summary>
            `conditions` is a list of the current states of FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2FlowSchemaStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2GroupSubject">
            <summary>
            GroupSubject holds detailed information for group-kind subject.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2GroupSubject.#ctor">
            <summary>
            Initializes a new instance of the V1beta2GroupSubject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2GroupSubject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta2GroupSubject class.
            </summary>
            <param name="name">
            name is the user group that matches, or &quot;*&quot; to match all user groups. See
            https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
            for some well-known group names. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2GroupSubject.Name">
            <summary>
            name is the user group that matches, or &quot;*&quot; to match all user groups. See
            https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
            for some well-known group names. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2GroupSubject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2LimitResponse">
            <summary>
            LimitResponse defines how to handle requests that can not be executed right now.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2LimitResponse.#ctor">
            <summary>
            Initializes a new instance of the V1beta2LimitResponse class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2LimitResponse.#ctor(System.String,k8s.Models.V1beta2QueuingConfiguration)">
            <summary>
            Initializes a new instance of the V1beta2LimitResponse class.
            </summary>
            <param name="type">
            `type` is &quot;Queue&quot; or &quot;Reject&quot;. &quot;Queue&quot; means that requests that can not be
            executed upon arrival are held in a queue until they can be executed or a
            queuing limit is reached. &quot;Reject&quot; means that requests that can not be executed
            upon arrival are rejected. Required.
            </param>
            <param name="queuing">
            `queuing` holds the configuration parameters for queuing. This field may be
            non-empty only if `type` is `&quot;Queue&quot;`.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2LimitResponse.Queuing">
            <summary>
            `queuing` holds the configuration parameters for queuing. This field may be
            non-empty only if `type` is `&quot;Queue&quot;`.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2LimitResponse.Type">
            <summary>
            `type` is &quot;Queue&quot; or &quot;Reject&quot;. &quot;Queue&quot; means that requests that can not be
            executed upon arrival are held in a queue until they can be executed or a
            queuing limit is reached. &quot;Reject&quot; means that requests that can not be executed
            upon arrival are rejected. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2LimitResponse.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2LimitedPriorityLevelConfiguration">
            <summary>
            LimitedPriorityLevelConfiguration specifies how to handle requests that are
            subject to limits. It addresses two issues:
            - How are requests for this priority level limited?
            - What should be done with requests that exceed the limit?
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2LimitedPriorityLevelConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta2LimitedPriorityLevelConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2LimitedPriorityLevelConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1beta2LimitResponse)">
            <summary>
            Initializes a new instance of the V1beta2LimitedPriorityLevelConfiguration class.
            </summary>
            <param name="assuredConcurrencyShares">
            `assuredConcurrencyShares` (ACS) configures the execution limit, which is a
            limit on the number of requests of this priority level that may be exeucting at
            a given time.  ACS must be a positive number. The server&apos;s concurrency limit
            (SCL) is divided among the concurrency-controlled priority levels in proportion
            to their assured concurrency shares. This produces the assured concurrency value
            (ACV) --- the number of requests that may be executing at a time --- for each
            such priority level:
            
            ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
            
            bigger numbers of ACS mean more reserved concurrent requests (at the expense of
            every other PL). This field has a default value of 30.
            </param>
            <param name="borrowingLimitPercent">
            `borrowingLimitPercent`, if present, configures a limit on how many seats this
            priority level can borrow from other priority levels. The limit is known as this
            level&apos;s BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total
            number of seats that this level may borrow at any one time. This field holds the
            ratio of that limit to the level&apos;s nominal concurrency limit. When this field is
            non-nil, it must hold a non-negative integer and the limit is calculated as
            follows.
            
            BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
            
            The value of this field can be more than 100, implying that this priority level
            can borrow a number of seats that is greater than its own nominal concurrency
            limit (NominalCL). When this field is left `nil`, the limit is effectively
            infinite.
            </param>
            <param name="lendablePercent">
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels. The value of this field must be between 0 and
            100, inclusive, and it defaults to 0. The number of seats that other levels can
            borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </param>
            <param name="limitResponse">
            `limitResponse` indicates what to do with requests that can not be executed
            right now
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2LimitedPriorityLevelConfiguration.AssuredConcurrencyShares">
            <summary>
            `assuredConcurrencyShares` (ACS) configures the execution limit, which is a
            limit on the number of requests of this priority level that may be exeucting at
            a given time.  ACS must be a positive number. The server&apos;s concurrency limit
            (SCL) is divided among the concurrency-controlled priority levels in proportion
            to their assured concurrency shares. This produces the assured concurrency value
            (ACV) --- the number of requests that may be executing at a time --- for each
            such priority level:
            
            ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
            
            bigger numbers of ACS mean more reserved concurrent requests (at the expense of
            every other PL). This field has a default value of 30.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2LimitedPriorityLevelConfiguration.BorrowingLimitPercent">
            <summary>
            `borrowingLimitPercent`, if present, configures a limit on how many seats this
            priority level can borrow from other priority levels. The limit is known as this
            level&apos;s BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total
            number of seats that this level may borrow at any one time. This field holds the
            ratio of that limit to the level&apos;s nominal concurrency limit. When this field is
            non-nil, it must hold a non-negative integer and the limit is calculated as
            follows.
            
            BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
            
            The value of this field can be more than 100, implying that this priority level
            can borrow a number of seats that is greater than its own nominal concurrency
            limit (NominalCL). When this field is left `nil`, the limit is effectively
            infinite.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2LimitedPriorityLevelConfiguration.LendablePercent">
            <summary>
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels. The value of this field must be between 0 and
            100, inclusive, and it defaults to 0. The number of seats that other levels can
            borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2LimitedPriorityLevelConfiguration.LimitResponse">
            <summary>
            `limitResponse` indicates what to do with requests that can not be executed
            right now
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2LimitedPriorityLevelConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2NonResourcePolicyRule">
            <summary>
            NonResourcePolicyRule is a predicate that matches non-resource requests
            according to their verb and the target non-resource URL. A NonResourcePolicyRule
            matches a request if and only if both (a) at least one member of verbs matches
            the request and (b) at least one member of nonResourceURLs matches the request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2NonResourcePolicyRule.#ctor">
            <summary>
            Initializes a new instance of the V1beta2NonResourcePolicyRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2NonResourcePolicyRule.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1beta2NonResourcePolicyRule class.
            </summary>
            <param name="nonResourceURLs">
            `nonResourceURLs` is a set of url prefixes that a user should have access to and
            may not be empty. For example:
            - &quot;/healthz&quot; is legal
            - &quot;/hea*&quot; is illegal
            - &quot;/hea&quot; is legal but matches nothing
            - &quot;/hea/*&quot; also matches nothing
            - &quot;/healthz/*&quot; matches all per-component health checks.
            &quot;*&quot; matches all non-resource urls. if it is present, it must be the only entry.
            Required.
            </param>
            <param name="verbs">
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs.
            If it is present, it must be the only entry. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2NonResourcePolicyRule.NonResourceURLs">
            <summary>
            `nonResourceURLs` is a set of url prefixes that a user should have access to and
            may not be empty. For example:
            - &quot;/healthz&quot; is legal
            - &quot;/hea*&quot; is illegal
            - &quot;/hea&quot; is legal but matches nothing
            - &quot;/hea/*&quot; also matches nothing
            - &quot;/healthz/*&quot; matches all per-component health checks.
            &quot;*&quot; matches all non-resource urls. if it is present, it must be the only entry.
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2NonResourcePolicyRule.Verbs">
            <summary>
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs.
            If it is present, it must be the only entry. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2NonResourcePolicyRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2PolicyRulesWithSubjects">
            <summary>
            PolicyRulesWithSubjects prescribes a test that applies to a request to an
            apiserver. The test considers the subject making the request, the verb being
            requested, and the resource to be acted upon. This PolicyRulesWithSubjects
            matches a request if and only if both (a) at least one member of subjects
            matches the request and (b) at least one member of resourceRules or
            nonResourceRules matches the request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PolicyRulesWithSubjects.#ctor">
            <summary>
            Initializes a new instance of the V1beta2PolicyRulesWithSubjects class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PolicyRulesWithSubjects.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta2Subject},System.Collections.Generic.IList{k8s.Models.V1beta2NonResourcePolicyRule},System.Collections.Generic.IList{k8s.Models.V1beta2ResourcePolicyRule})">
            <summary>
            Initializes a new instance of the V1beta2PolicyRulesWithSubjects class.
            </summary>
            <param name="subjects">
            subjects is the list of normal user, serviceaccount, or group that this rule
            cares about. There must be at least one member in this slice. A slice that
            includes both the system:authenticated and system:unauthenticated user groups
            matches every request. Required.
            </param>
            <param name="nonResourceRules">
            `nonResourceRules` is a list of NonResourcePolicyRules that identify matching
            requests according to their verb and the target non-resource URL.
            </param>
            <param name="resourceRules">
            `resourceRules` is a slice of ResourcePolicyRules that identify matching
            requests according to their verb and the target resource. At least one of
            `resourceRules` and `nonResourceRules` has to be non-empty.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2PolicyRulesWithSubjects.NonResourceRules">
            <summary>
            `nonResourceRules` is a list of NonResourcePolicyRules that identify matching
            requests according to their verb and the target non-resource URL.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PolicyRulesWithSubjects.ResourceRules">
            <summary>
            `resourceRules` is a slice of ResourcePolicyRules that identify matching
            requests according to their verb and the target resource. At least one of
            `resourceRules` and `nonResourceRules` has to be non-empty.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PolicyRulesWithSubjects.Subjects">
            <summary>
            subjects is the list of normal user, serviceaccount, or group that this rule
            cares about. There must be at least one member in this slice. A slice that
            includes both the system:authenticated and system:unauthenticated user groups
            matches every request. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PolicyRulesWithSubjects.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2PriorityLevelConfiguration">
            <summary>
            PriorityLevelConfiguration represents the configuration of a priority level.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfiguration.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1beta2PriorityLevelConfigurationSpec,k8s.Models.V1beta2PriorityLevelConfigurationStatus)">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfiguration class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            `spec` is the specification of the desired behavior of a &quot;request-priority&quot;.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            `status` is the current status of a &quot;request-priority&quot;. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfiguration.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfiguration.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfiguration.Metadata">
            <summary>
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfiguration.Spec">
            <summary>
            `spec` is the specification of the desired behavior of a &quot;request-priority&quot;.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfiguration.Status">
            <summary>
            `status` is the current status of a &quot;request-priority&quot;. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2PriorityLevelConfigurationCondition">
            <summary>
            PriorityLevelConfigurationCondition defines the condition of priority level.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationCondition.#ctor">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationCondition.#ctor(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationCondition class.
            </summary>
            <param name="lastTransitionTime">
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </param>
            <param name="message">
            `message` is a human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </param>
            <param name="status">
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </param>
            <param name="type">
            `type` is the type of the condition. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationCondition.LastTransitionTime">
            <summary>
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationCondition.Message">
            <summary>
            `message` is a human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationCondition.Reason">
            <summary>
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationCondition.Status">
            <summary>
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationCondition.Type">
            <summary>
            `type` is the type of the condition. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2PriorityLevelConfigurationList">
            <summary>
            PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationList.#ctor">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationList.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta2PriorityLevelConfiguration},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationList class.
            </summary>
            <param name="items">
            `items` is a list of request-priorities.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationList.Items">
            <summary>
            `items` is a list of request-priorities.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationList.Metadata">
            <summary>
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2PriorityLevelConfigurationReference">
            <summary>
            PriorityLevelConfigurationReference contains information that points to the
            &quot;request-priority&quot; being used.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationReference.#ctor">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationReference class.
            </summary>
            <param name="name">
            `name` is the name of the priority level configuration being referenced
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationReference.Name">
            <summary>
            `name` is the name of the priority level configuration being referenced
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2PriorityLevelConfigurationSpec">
            <summary>
            PriorityLevelConfigurationSpec specifies the configuration of a priority level.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationSpec.#ctor">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationSpec.#ctor(System.String,k8s.Models.V1beta2ExemptPriorityLevelConfiguration,k8s.Models.V1beta2LimitedPriorityLevelConfiguration)">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationSpec class.
            </summary>
            <param name="type">
            `type` indicates whether this priority level is subject to limitation on request
            execution.  A value of `&quot;Exempt&quot;` means that requests of this priority level are
            not subject to a limit (and thus are never queued) and do not detract from the
            capacity made available to other priority levels.  A value of `&quot;Limited&quot;` means
            that (a) requests of this priority level _are_ subject to limits and (b) some of
            the server&apos;s limited capacity is made available exclusively to this priority
            level. Required.
            </param>
            <param name="exempt">
            `exempt` specifies how requests are handled for an exempt priority level. This
            field MUST be empty if `type` is `&quot;Limited&quot;`. This field MAY be non-empty if
            `type` is `&quot;Exempt&quot;`. If empty and `type` is `&quot;Exempt&quot;` then the default values
            for `ExemptPriorityLevelConfiguration` apply.
            </param>
            <param name="limited">
            `limited` specifies how requests are handled for a Limited priority level. This
            field must be non-empty if and only if `type` is `&quot;Limited&quot;`.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationSpec.Exempt">
            <summary>
            `exempt` specifies how requests are handled for an exempt priority level. This
            field MUST be empty if `type` is `&quot;Limited&quot;`. This field MAY be non-empty if
            `type` is `&quot;Exempt&quot;`. If empty and `type` is `&quot;Exempt&quot;` then the default values
            for `ExemptPriorityLevelConfiguration` apply.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationSpec.Limited">
            <summary>
            `limited` specifies how requests are handled for a Limited priority level. This
            field must be non-empty if and only if `type` is `&quot;Limited&quot;`.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationSpec.Type">
            <summary>
            `type` indicates whether this priority level is subject to limitation on request
            execution.  A value of `&quot;Exempt&quot;` means that requests of this priority level are
            not subject to a limit (and thus are never queued) and do not detract from the
            capacity made available to other priority levels.  A value of `&quot;Limited&quot;` means
            that (a) requests of this priority level _are_ subject to limits and (b) some of
            the server&apos;s limited capacity is made available exclusively to this priority
            level. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2PriorityLevelConfigurationStatus">
            <summary>
            PriorityLevelConfigurationStatus represents the current state of a
            &quot;request-priority&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationStatus.#ctor">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta2PriorityLevelConfigurationCondition})">
            <summary>
            Initializes a new instance of the V1beta2PriorityLevelConfigurationStatus class.
            </summary>
            <param name="conditions">
            `conditions` is the current state of &quot;request-priority&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2PriorityLevelConfigurationStatus.Conditions">
            <summary>
            `conditions` is the current state of &quot;request-priority&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2PriorityLevelConfigurationStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2QueuingConfiguration">
            <summary>
            QueuingConfiguration holds the configuration parameters for queuing
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2QueuingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta2QueuingConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2QueuingConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1beta2QueuingConfiguration class.
            </summary>
            <param name="handSize">
            `handSize` is a small positive number that configures the shuffle sharding of
            requests into queues.  When enqueuing a request at this priority level the
            request&apos;s flow identifier (a string pair) is hashed and the hash value is used
            to shuffle the list of queues and deal a hand of the size specified here.  The
            request is put into one of the shortest queues in that hand. `handSize` must be
            no larger than `queues`, and should be significantly smaller (so that a few
            heavy flows do not saturate most of the queues).  See the user-facing
            documentation for more extensive guidance on setting this field.  This field has
            a default value of 8.
            </param>
            <param name="queueLengthLimit">
            `queueLengthLimit` is the maximum number of requests allowed to be waiting in a
            given queue of this priority level at a time; excess requests are rejected. 
            This value must be positive.  If not specified, it will be defaulted to 50.
            </param>
            <param name="queues">
            `queues` is the number of queues for this priority level. The queues exist
            independently at each apiserver. The value must be positive.  Setting it to 1
            effectively precludes shufflesharding and thus makes the distinguisher method of
            associated flow schemas irrelevant.  This field has a default value of 64.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2QueuingConfiguration.HandSize">
            <summary>
            `handSize` is a small positive number that configures the shuffle sharding of
            requests into queues.  When enqueuing a request at this priority level the
            request&apos;s flow identifier (a string pair) is hashed and the hash value is used
            to shuffle the list of queues and deal a hand of the size specified here.  The
            request is put into one of the shortest queues in that hand. `handSize` must be
            no larger than `queues`, and should be significantly smaller (so that a few
            heavy flows do not saturate most of the queues).  See the user-facing
            documentation for more extensive guidance on setting this field.  This field has
            a default value of 8.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2QueuingConfiguration.QueueLengthLimit">
            <summary>
            `queueLengthLimit` is the maximum number of requests allowed to be waiting in a
            given queue of this priority level at a time; excess requests are rejected. 
            This value must be positive.  If not specified, it will be defaulted to 50.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2QueuingConfiguration.Queues">
            <summary>
            `queues` is the number of queues for this priority level. The queues exist
            independently at each apiserver. The value must be positive.  Setting it to 1
            effectively precludes shufflesharding and thus makes the distinguisher method of
            associated flow schemas irrelevant.  This field has a default value of 64.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2QueuingConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2ResourcePolicyRule">
            <summary>
            ResourcePolicyRule is a predicate that matches some resource requests, testing
            the request&apos;s verb and the target resource. A ResourcePolicyRule matches a
            resource request if and only if: (a) at least one member of verbs matches the
            request, (b) at least one member of apiGroups matches the request, (c) at least
            one member of resources matches the request, and (d) either (d1) the request
            does not specify a namespace (i.e., `Namespace==&quot;&quot;`) and clusterScope is true or
            (d2) the request specifies a namespace and least one member of namespaces
            matches the request&apos;s namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ResourcePolicyRule.#ctor">
            <summary>
            Initializes a new instance of the V1beta2ResourcePolicyRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ResourcePolicyRule.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1beta2ResourcePolicyRule class.
            </summary>
            <param name="apiGroups">
            `apiGroups` is a list of matching API groups and may not be empty. &quot;*&quot; matches
            all API groups and, if present, must be the only entry. Required.
            </param>
            <param name="resources">
            `resources` is a list of matching resources (i.e., lowercase and plural) with,
            if desired, subresource.  For example, [ &quot;services&quot;, &quot;nodes/status&quot; ].  This
            list may not be empty. &quot;*&quot; matches all resources and, if present, must be the
            only entry. Required.
            </param>
            <param name="verbs">
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs
            and, if present, must be the only entry. Required.
            </param>
            <param name="clusterScope">
            `clusterScope` indicates whether to match requests that do not specify a
            namespace (which happens either because the resource is not namespaced or the
            request targets all namespaces). If this field is omitted or false then the
            `namespaces` field must contain a non-empty list.
            </param>
            <param name="namespaces">
            `namespaces` is a list of target namespaces that restricts matches.  A request
            that specifies a target namespace matches only if either (a) this list contains
            that target namespace or (b) this list contains &quot;*&quot;.  Note that &quot;*&quot; matches any
            specified namespace but does not match a request that _does not specify_ a
            namespace (see the `clusterScope` field for that). This list may be empty, but
            only if `clusterScope` is true.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2ResourcePolicyRule.ApiGroups">
            <summary>
            `apiGroups` is a list of matching API groups and may not be empty. &quot;*&quot; matches
            all API groups and, if present, must be the only entry. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2ResourcePolicyRule.ClusterScope">
            <summary>
            `clusterScope` indicates whether to match requests that do not specify a
            namespace (which happens either because the resource is not namespaced or the
            request targets all namespaces). If this field is omitted or false then the
            `namespaces` field must contain a non-empty list.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2ResourcePolicyRule.Namespaces">
            <summary>
            `namespaces` is a list of target namespaces that restricts matches.  A request
            that specifies a target namespace matches only if either (a) this list contains
            that target namespace or (b) this list contains &quot;*&quot;.  Note that &quot;*&quot; matches any
            specified namespace but does not match a request that _does not specify_ a
            namespace (see the `clusterScope` field for that). This list may be empty, but
            only if `clusterScope` is true.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2ResourcePolicyRule.Resources">
            <summary>
            `resources` is a list of matching resources (i.e., lowercase and plural) with,
            if desired, subresource.  For example, [ &quot;services&quot;, &quot;nodes/status&quot; ].  This
            list may not be empty. &quot;*&quot; matches all resources and, if present, must be the
            only entry. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2ResourcePolicyRule.Verbs">
            <summary>
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs
            and, if present, must be the only entry. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ResourcePolicyRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2ServiceAccountSubject">
            <summary>
            ServiceAccountSubject holds detailed information for service-account-kind
            subject.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ServiceAccountSubject.#ctor">
            <summary>
            Initializes a new instance of the V1beta2ServiceAccountSubject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ServiceAccountSubject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta2ServiceAccountSubject class.
            </summary>
            <param name="name">
            `name` is the name of matching ServiceAccount objects, or &quot;*&quot; to match
            regardless of name. Required.
            </param>
            <param name="namespaceProperty">
            `namespace` is the namespace of matching ServiceAccount objects. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2ServiceAccountSubject.Name">
            <summary>
            `name` is the name of matching ServiceAccount objects, or &quot;*&quot; to match
            regardless of name. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2ServiceAccountSubject.NamespaceProperty">
            <summary>
            `namespace` is the namespace of matching ServiceAccount objects. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2ServiceAccountSubject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2Subject">
            <summary>
            Subject matches the originator of a request, as identified by the request
            authentication system. There are three ways of matching an originator; by user,
            group, or service account.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2Subject.#ctor">
            <summary>
            Initializes a new instance of the V1beta2Subject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2Subject.#ctor(System.String,k8s.Models.V1beta2GroupSubject,k8s.Models.V1beta2ServiceAccountSubject,k8s.Models.V1beta2UserSubject)">
            <summary>
            Initializes a new instance of the V1beta2Subject class.
            </summary>
            <param name="kind">
            `kind` indicates which one of the other fields is non-empty. Required
            </param>
            <param name="group">
            `group` matches based on user group name.
            </param>
            <param name="serviceAccount">
            `serviceAccount` matches ServiceAccounts.
            </param>
            <param name="user">
            `user` matches based on username.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2Subject.Group">
            <summary>
            `group` matches based on user group name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2Subject.Kind">
            <summary>
            `kind` indicates which one of the other fields is non-empty. Required
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2Subject.ServiceAccount">
            <summary>
            `serviceAccount` matches ServiceAccounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta2Subject.User">
            <summary>
            `user` matches based on username.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2Subject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta2UserSubject">
            <summary>
            UserSubject holds detailed information for user-kind subject.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2UserSubject.#ctor">
            <summary>
            Initializes a new instance of the V1beta2UserSubject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2UserSubject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta2UserSubject class.
            </summary>
            <param name="name">
            `name` is the username that matches, or &quot;*&quot; to match all usernames. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta2UserSubject.Name">
            <summary>
            `name` is the username that matches, or &quot;*&quot; to match all usernames. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta2UserSubject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3ExemptPriorityLevelConfiguration">
            <summary>
            ExemptPriorityLevelConfiguration describes the configurable aspects of the
            handling of exempt requests. In the mandatory exempt configuration object the
            values in the fields here can be modified by authorized users, unlike the rest
            of the `spec`.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ExemptPriorityLevelConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta3ExemptPriorityLevelConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ExemptPriorityLevelConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1beta3ExemptPriorityLevelConfiguration class.
            </summary>
            <param name="lendablePercent">
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels.  This value of this field must be between 0
            and 100, inclusive, and it defaults to 0. The number of seats that other levels
            can borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </param>
            <param name="nominalConcurrencyShares">
            `nominalConcurrencyShares` (NCS) contributes to the computation of the
            NominalConcurrencyLimit (NominalCL) of this level. This is the number of
            execution seats nominally reserved for this priority level. This DOES NOT limit
            the dispatching from this priority level but affects the other priority levels
            through the borrowing mechanism. The server&apos;s concurrency limit (ServerCL) is
            divided among all the priority levels in proportion to their NCS values:
            
            NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level
            k] NCS(k)
            
            Bigger numbers mean a larger nominal concurrency limit, at the expense of every
            other priority level. This field has a default value of zero.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3ExemptPriorityLevelConfiguration.LendablePercent">
            <summary>
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels.  This value of this field must be between 0
            and 100, inclusive, and it defaults to 0. The number of seats that other levels
            can borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3ExemptPriorityLevelConfiguration.NominalConcurrencyShares">
            <summary>
            `nominalConcurrencyShares` (NCS) contributes to the computation of the
            NominalConcurrencyLimit (NominalCL) of this level. This is the number of
            execution seats nominally reserved for this priority level. This DOES NOT limit
            the dispatching from this priority level but affects the other priority levels
            through the borrowing mechanism. The server&apos;s concurrency limit (ServerCL) is
            divided among all the priority levels in proportion to their NCS values:
            
            NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level
            k] NCS(k)
            
            Bigger numbers mean a larger nominal concurrency limit, at the expense of every
            other priority level. This field has a default value of zero.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ExemptPriorityLevelConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3FlowDistinguisherMethod">
            <summary>
            FlowDistinguisherMethod specifies the method of a flow distinguisher.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowDistinguisherMethod.#ctor">
            <summary>
            Initializes a new instance of the V1beta3FlowDistinguisherMethod class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowDistinguisherMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta3FlowDistinguisherMethod class.
            </summary>
            <param name="type">
            `type` is the type of flow distinguisher method The supported types are &quot;ByUser&quot;
            and &quot;ByNamespace&quot;. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3FlowDistinguisherMethod.Type">
            <summary>
            `type` is the type of flow distinguisher method The supported types are &quot;ByUser&quot;
            and &quot;ByNamespace&quot;. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowDistinguisherMethod.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3FlowSchema">
            <summary>
            FlowSchema defines the schema of a group of flows. Note that a flow is made up
            of a set of inbound API requests with similar attributes and is identified by a
            pair of strings: the name of the FlowSchema and a &quot;flow distinguisher&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchema.#ctor">
            <summary>
            Initializes a new instance of the V1beta3FlowSchema class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchema.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1beta3FlowSchemaSpec,k8s.Models.V1beta3FlowSchemaStatus)">
            <summary>
            Initializes a new instance of the V1beta3FlowSchema class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            `spec` is the specification of the desired behavior of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            `status` is the current status of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchema.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchema.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchema.Metadata">
            <summary>
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchema.Spec">
            <summary>
            `spec` is the specification of the desired behavior of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchema.Status">
            <summary>
            `status` is the current status of a FlowSchema. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchema.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3FlowSchemaCondition">
            <summary>
            FlowSchemaCondition describes conditions for a FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaCondition.#ctor">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaCondition.#ctor(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaCondition class.
            </summary>
            <param name="lastTransitionTime">
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </param>
            <param name="message">
            `message` is a human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </param>
            <param name="status">
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </param>
            <param name="type">
            `type` is the type of the condition. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaCondition.LastTransitionTime">
            <summary>
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaCondition.Message">
            <summary>
            `message` is a human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaCondition.Reason">
            <summary>
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaCondition.Status">
            <summary>
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaCondition.Type">
            <summary>
            `type` is the type of the condition. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3FlowSchemaList">
            <summary>
            FlowSchemaList is a list of FlowSchema objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaList.#ctor">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaList.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta3FlowSchema},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaList class.
            </summary>
            <param name="items">
            `items` is a list of FlowSchemas.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaList.Items">
            <summary>
            `items` is a list of FlowSchemas.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaList.Metadata">
            <summary>
            `metadata` is the standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3FlowSchemaSpec">
            <summary>
            FlowSchemaSpec describes how the FlowSchema&apos;s specification looks like.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaSpec.#ctor">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaSpec.#ctor(k8s.Models.V1beta3PriorityLevelConfigurationReference,k8s.Models.V1beta3FlowDistinguisherMethod,System.Nullable{System.Int32},System.Collections.Generic.IList{k8s.Models.V1beta3PolicyRulesWithSubjects})">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaSpec class.
            </summary>
            <param name="priorityLevelConfiguration">
            `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in
            the cluster. If the reference cannot be resolved, the FlowSchema will be ignored
            and marked as invalid in its status. Required.
            </param>
            <param name="distinguisherMethod">
            `distinguisherMethod` defines how to compute the flow distinguisher for requests
            that match this schema. `nil` specifies that the distinguisher is disabled and
            thus will always be the empty string.
            </param>
            <param name="matchingPrecedence">
            `matchingPrecedence` is used to choose among the FlowSchemas that match a given
            request. The chosen FlowSchema is among those with the numerically lowest (which
            we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence
            value must be ranged in [1,10000]. Note that if the precedence is not specified,
            it will be set to 1000 as default.
            </param>
            <param name="rules">
            `rules` describes which requests will match this flow schema. This FlowSchema
            matches a request if and only if at least one member of rules matches the
            request. if it is an empty slice, there will be no requests matching the
            FlowSchema.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaSpec.DistinguisherMethod">
            <summary>
            `distinguisherMethod` defines how to compute the flow distinguisher for requests
            that match this schema. `nil` specifies that the distinguisher is disabled and
            thus will always be the empty string.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaSpec.MatchingPrecedence">
            <summary>
            `matchingPrecedence` is used to choose among the FlowSchemas that match a given
            request. The chosen FlowSchema is among those with the numerically lowest (which
            we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence
            value must be ranged in [1,10000]. Note that if the precedence is not specified,
            it will be set to 1000 as default.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaSpec.PriorityLevelConfiguration">
            <summary>
            `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in
            the cluster. If the reference cannot be resolved, the FlowSchema will be ignored
            and marked as invalid in its status. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaSpec.Rules">
            <summary>
            `rules` describes which requests will match this flow schema. This FlowSchema
            matches a request if and only if at least one member of rules matches the
            request. if it is an empty slice, there will be no requests matching the
            FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3FlowSchemaStatus">
            <summary>
            FlowSchemaStatus represents the current state of a FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaStatus.#ctor">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta3FlowSchemaCondition})">
            <summary>
            Initializes a new instance of the V1beta3FlowSchemaStatus class.
            </summary>
            <param name="conditions">
            `conditions` is a list of the current states of FlowSchema.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3FlowSchemaStatus.Conditions">
            <summary>
            `conditions` is a list of the current states of FlowSchema.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3FlowSchemaStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3GroupSubject">
            <summary>
            GroupSubject holds detailed information for group-kind subject.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3GroupSubject.#ctor">
            <summary>
            Initializes a new instance of the V1beta3GroupSubject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3GroupSubject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta3GroupSubject class.
            </summary>
            <param name="name">
            name is the user group that matches, or &quot;*&quot; to match all user groups. See
            https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
            for some well-known group names. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3GroupSubject.Name">
            <summary>
            name is the user group that matches, or &quot;*&quot; to match all user groups. See
            https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
            for some well-known group names. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3GroupSubject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3LimitResponse">
            <summary>
            LimitResponse defines how to handle requests that can not be executed right now.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3LimitResponse.#ctor">
            <summary>
            Initializes a new instance of the V1beta3LimitResponse class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3LimitResponse.#ctor(System.String,k8s.Models.V1beta3QueuingConfiguration)">
            <summary>
            Initializes a new instance of the V1beta3LimitResponse class.
            </summary>
            <param name="type">
            `type` is &quot;Queue&quot; or &quot;Reject&quot;. &quot;Queue&quot; means that requests that can not be
            executed upon arrival are held in a queue until they can be executed or a
            queuing limit is reached. &quot;Reject&quot; means that requests that can not be executed
            upon arrival are rejected. Required.
            </param>
            <param name="queuing">
            `queuing` holds the configuration parameters for queuing. This field may be
            non-empty only if `type` is `&quot;Queue&quot;`.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3LimitResponse.Queuing">
            <summary>
            `queuing` holds the configuration parameters for queuing. This field may be
            non-empty only if `type` is `&quot;Queue&quot;`.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3LimitResponse.Type">
            <summary>
            `type` is &quot;Queue&quot; or &quot;Reject&quot;. &quot;Queue&quot; means that requests that can not be
            executed upon arrival are held in a queue until they can be executed or a
            queuing limit is reached. &quot;Reject&quot; means that requests that can not be executed
            upon arrival are rejected. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3LimitResponse.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3LimitedPriorityLevelConfiguration">
            <summary>
            LimitedPriorityLevelConfiguration specifies how to handle requests that are
            subject to limits. It addresses two issues:
            - How are requests for this priority level limited?
            - What should be done with requests that exceed the limit?
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3LimitedPriorityLevelConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta3LimitedPriorityLevelConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3LimitedPriorityLevelConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},k8s.Models.V1beta3LimitResponse,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1beta3LimitedPriorityLevelConfiguration class.
            </summary>
            <param name="borrowingLimitPercent">
            `borrowingLimitPercent`, if present, configures a limit on how many seats this
            priority level can borrow from other priority levels. The limit is known as this
            level&apos;s BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total
            number of seats that this level may borrow at any one time. This field holds the
            ratio of that limit to the level&apos;s nominal concurrency limit. When this field is
            non-nil, it must hold a non-negative integer and the limit is calculated as
            follows.
            
            BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
            
            The value of this field can be more than 100, implying that this priority level
            can borrow a number of seats that is greater than its own nominal concurrency
            limit (NominalCL). When this field is left `nil`, the limit is effectively
            infinite.
            </param>
            <param name="lendablePercent">
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels. The value of this field must be between 0 and
            100, inclusive, and it defaults to 0. The number of seats that other levels can
            borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </param>
            <param name="limitResponse">
            `limitResponse` indicates what to do with requests that can not be executed
            right now
            </param>
            <param name="nominalConcurrencyShares">
            `nominalConcurrencyShares` (NCS) contributes to the computation of the
            NominalConcurrencyLimit (NominalCL) of this level. This is the number of
            execution seats available at this priority level. This is used both for requests
            dispatched from this priority level as well as requests dispatched from other
            priority levels borrowing seats from this level. The server&apos;s concurrency limit
            (ServerCL) is divided among the Limited priority levels in proportion to their
            NCS values:
            
            NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level
            k] NCS(k)
            
            Bigger numbers mean a larger nominal concurrency limit, at the expense of every
            other priority level. This field has a default value of 30.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3LimitedPriorityLevelConfiguration.BorrowingLimitPercent">
            <summary>
            `borrowingLimitPercent`, if present, configures a limit on how many seats this
            priority level can borrow from other priority levels. The limit is known as this
            level&apos;s BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total
            number of seats that this level may borrow at any one time. This field holds the
            ratio of that limit to the level&apos;s nominal concurrency limit. When this field is
            non-nil, it must hold a non-negative integer and the limit is calculated as
            follows.
            
            BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
            
            The value of this field can be more than 100, implying that this priority level
            can borrow a number of seats that is greater than its own nominal concurrency
            limit (NominalCL). When this field is left `nil`, the limit is effectively
            infinite.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3LimitedPriorityLevelConfiguration.LendablePercent">
            <summary>
            `lendablePercent` prescribes the fraction of the level&apos;s NominalCL that can be
            borrowed by other priority levels. The value of this field must be between 0 and
            100, inclusive, and it defaults to 0. The number of seats that other levels can
            borrow from this level, known as this level&apos;s LendableConcurrencyLimit
            (LendableCL), is defined as follows.
            
            LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3LimitedPriorityLevelConfiguration.LimitResponse">
            <summary>
            `limitResponse` indicates what to do with requests that can not be executed
            right now
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3LimitedPriorityLevelConfiguration.NominalConcurrencyShares">
            <summary>
            `nominalConcurrencyShares` (NCS) contributes to the computation of the
            NominalConcurrencyLimit (NominalCL) of this level. This is the number of
            execution seats available at this priority level. This is used both for requests
            dispatched from this priority level as well as requests dispatched from other
            priority levels borrowing seats from this level. The server&apos;s concurrency limit
            (ServerCL) is divided among the Limited priority levels in proportion to their
            NCS values:
            
            NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level
            k] NCS(k)
            
            Bigger numbers mean a larger nominal concurrency limit, at the expense of every
            other priority level. This field has a default value of 30.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3LimitedPriorityLevelConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3NonResourcePolicyRule">
            <summary>
            NonResourcePolicyRule is a predicate that matches non-resource requests
            according to their verb and the target non-resource URL. A NonResourcePolicyRule
            matches a request if and only if both (a) at least one member of verbs matches
            the request and (b) at least one member of nonResourceURLs matches the request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3NonResourcePolicyRule.#ctor">
            <summary>
            Initializes a new instance of the V1beta3NonResourcePolicyRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3NonResourcePolicyRule.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1beta3NonResourcePolicyRule class.
            </summary>
            <param name="nonResourceURLs">
            `nonResourceURLs` is a set of url prefixes that a user should have access to and
            may not be empty. For example:
            - &quot;/healthz&quot; is legal
            - &quot;/hea*&quot; is illegal
            - &quot;/hea&quot; is legal but matches nothing
            - &quot;/hea/*&quot; also matches nothing
            - &quot;/healthz/*&quot; matches all per-component health checks.
            &quot;*&quot; matches all non-resource urls. if it is present, it must be the only entry.
            Required.
            </param>
            <param name="verbs">
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs.
            If it is present, it must be the only entry. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3NonResourcePolicyRule.NonResourceURLs">
            <summary>
            `nonResourceURLs` is a set of url prefixes that a user should have access to and
            may not be empty. For example:
            - &quot;/healthz&quot; is legal
            - &quot;/hea*&quot; is illegal
            - &quot;/hea&quot; is legal but matches nothing
            - &quot;/hea/*&quot; also matches nothing
            - &quot;/healthz/*&quot; matches all per-component health checks.
            &quot;*&quot; matches all non-resource urls. if it is present, it must be the only entry.
            Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3NonResourcePolicyRule.Verbs">
            <summary>
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs.
            If it is present, it must be the only entry. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3NonResourcePolicyRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3PolicyRulesWithSubjects">
            <summary>
            PolicyRulesWithSubjects prescribes a test that applies to a request to an
            apiserver. The test considers the subject making the request, the verb being
            requested, and the resource to be acted upon. This PolicyRulesWithSubjects
            matches a request if and only if both (a) at least one member of subjects
            matches the request and (b) at least one member of resourceRules or
            nonResourceRules matches the request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PolicyRulesWithSubjects.#ctor">
            <summary>
            Initializes a new instance of the V1beta3PolicyRulesWithSubjects class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PolicyRulesWithSubjects.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta3Subject},System.Collections.Generic.IList{k8s.Models.V1beta3NonResourcePolicyRule},System.Collections.Generic.IList{k8s.Models.V1beta3ResourcePolicyRule})">
            <summary>
            Initializes a new instance of the V1beta3PolicyRulesWithSubjects class.
            </summary>
            <param name="subjects">
            subjects is the list of normal user, serviceaccount, or group that this rule
            cares about. There must be at least one member in this slice. A slice that
            includes both the system:authenticated and system:unauthenticated user groups
            matches every request. Required.
            </param>
            <param name="nonResourceRules">
            `nonResourceRules` is a list of NonResourcePolicyRules that identify matching
            requests according to their verb and the target non-resource URL.
            </param>
            <param name="resourceRules">
            `resourceRules` is a slice of ResourcePolicyRules that identify matching
            requests according to their verb and the target resource. At least one of
            `resourceRules` and `nonResourceRules` has to be non-empty.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3PolicyRulesWithSubjects.NonResourceRules">
            <summary>
            `nonResourceRules` is a list of NonResourcePolicyRules that identify matching
            requests according to their verb and the target non-resource URL.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PolicyRulesWithSubjects.ResourceRules">
            <summary>
            `resourceRules` is a slice of ResourcePolicyRules that identify matching
            requests according to their verb and the target resource. At least one of
            `resourceRules` and `nonResourceRules` has to be non-empty.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PolicyRulesWithSubjects.Subjects">
            <summary>
            subjects is the list of normal user, serviceaccount, or group that this rule
            cares about. There must be at least one member in this slice. A slice that
            includes both the system:authenticated and system:unauthenticated user groups
            matches every request. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PolicyRulesWithSubjects.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3PriorityLevelConfiguration">
            <summary>
            PriorityLevelConfiguration represents the configuration of a priority level.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfiguration.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1beta3PriorityLevelConfigurationSpec,k8s.Models.V1beta3PriorityLevelConfigurationStatus)">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfiguration class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            `spec` is the specification of the desired behavior of a &quot;request-priority&quot;.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            `status` is the current status of a &quot;request-priority&quot;. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfiguration.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfiguration.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfiguration.Metadata">
            <summary>
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfiguration.Spec">
            <summary>
            `spec` is the specification of the desired behavior of a &quot;request-priority&quot;.
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfiguration.Status">
            <summary>
            `status` is the current status of a &quot;request-priority&quot;. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3PriorityLevelConfigurationCondition">
            <summary>
            PriorityLevelConfigurationCondition defines the condition of priority level.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationCondition.#ctor">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationCondition.#ctor(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationCondition class.
            </summary>
            <param name="lastTransitionTime">
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </param>
            <param name="message">
            `message` is a human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </param>
            <param name="status">
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </param>
            <param name="type">
            `type` is the type of the condition. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationCondition.LastTransitionTime">
            <summary>
            `lastTransitionTime` is the last time the condition transitioned from one status
            to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationCondition.Message">
            <summary>
            `message` is a human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationCondition.Reason">
            <summary>
            `reason` is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationCondition.Status">
            <summary>
            `status` is the status of the condition. Can be True, False, Unknown. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationCondition.Type">
            <summary>
            `type` is the type of the condition. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3PriorityLevelConfigurationList">
            <summary>
            PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationList.#ctor">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationList.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta3PriorityLevelConfiguration},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationList class.
            </summary>
            <param name="items">
            `items` is a list of request-priorities.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationList.Items">
            <summary>
            `items` is a list of request-priorities.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationList.Metadata">
            <summary>
            `metadata` is the standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3PriorityLevelConfigurationReference">
            <summary>
            PriorityLevelConfigurationReference contains information that points to the
            &quot;request-priority&quot; being used.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationReference.#ctor">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationReference class.
            </summary>
            <param name="name">
            `name` is the name of the priority level configuration being referenced
            Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationReference.Name">
            <summary>
            `name` is the name of the priority level configuration being referenced
            Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3PriorityLevelConfigurationSpec">
            <summary>
            PriorityLevelConfigurationSpec specifies the configuration of a priority level.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationSpec.#ctor">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationSpec.#ctor(System.String,k8s.Models.V1beta3ExemptPriorityLevelConfiguration,k8s.Models.V1beta3LimitedPriorityLevelConfiguration)">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationSpec class.
            </summary>
            <param name="type">
            `type` indicates whether this priority level is subject to limitation on request
            execution.  A value of `&quot;Exempt&quot;` means that requests of this priority level are
            not subject to a limit (and thus are never queued) and do not detract from the
            capacity made available to other priority levels.  A value of `&quot;Limited&quot;` means
            that (a) requests of this priority level _are_ subject to limits and (b) some of
            the server&apos;s limited capacity is made available exclusively to this priority
            level. Required.
            </param>
            <param name="exempt">
            `exempt` specifies how requests are handled for an exempt priority level. This
            field MUST be empty if `type` is `&quot;Limited&quot;`. This field MAY be non-empty if
            `type` is `&quot;Exempt&quot;`. If empty and `type` is `&quot;Exempt&quot;` then the default values
            for `ExemptPriorityLevelConfiguration` apply.
            </param>
            <param name="limited">
            `limited` specifies how requests are handled for a Limited priority level. This
            field must be non-empty if and only if `type` is `&quot;Limited&quot;`.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationSpec.Exempt">
            <summary>
            `exempt` specifies how requests are handled for an exempt priority level. This
            field MUST be empty if `type` is `&quot;Limited&quot;`. This field MAY be non-empty if
            `type` is `&quot;Exempt&quot;`. If empty and `type` is `&quot;Exempt&quot;` then the default values
            for `ExemptPriorityLevelConfiguration` apply.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationSpec.Limited">
            <summary>
            `limited` specifies how requests are handled for a Limited priority level. This
            field must be non-empty if and only if `type` is `&quot;Limited&quot;`.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationSpec.Type">
            <summary>
            `type` indicates whether this priority level is subject to limitation on request
            execution.  A value of `&quot;Exempt&quot;` means that requests of this priority level are
            not subject to a limit (and thus are never queued) and do not detract from the
            capacity made available to other priority levels.  A value of `&quot;Limited&quot;` means
            that (a) requests of this priority level _are_ subject to limits and (b) some of
            the server&apos;s limited capacity is made available exclusively to this priority
            level. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3PriorityLevelConfigurationStatus">
            <summary>
            PriorityLevelConfigurationStatus represents the current state of a
            &quot;request-priority&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationStatus.#ctor">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1beta3PriorityLevelConfigurationCondition})">
            <summary>
            Initializes a new instance of the V1beta3PriorityLevelConfigurationStatus class.
            </summary>
            <param name="conditions">
            `conditions` is the current state of &quot;request-priority&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3PriorityLevelConfigurationStatus.Conditions">
            <summary>
            `conditions` is the current state of &quot;request-priority&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3PriorityLevelConfigurationStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3QueuingConfiguration">
            <summary>
            QueuingConfiguration holds the configuration parameters for queuing
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3QueuingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the V1beta3QueuingConfiguration class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3QueuingConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1beta3QueuingConfiguration class.
            </summary>
            <param name="handSize">
            `handSize` is a small positive number that configures the shuffle sharding of
            requests into queues.  When enqueuing a request at this priority level the
            request&apos;s flow identifier (a string pair) is hashed and the hash value is used
            to shuffle the list of queues and deal a hand of the size specified here.  The
            request is put into one of the shortest queues in that hand. `handSize` must be
            no larger than `queues`, and should be significantly smaller (so that a few
            heavy flows do not saturate most of the queues).  See the user-facing
            documentation for more extensive guidance on setting this field.  This field has
            a default value of 8.
            </param>
            <param name="queueLengthLimit">
            `queueLengthLimit` is the maximum number of requests allowed to be waiting in a
            given queue of this priority level at a time; excess requests are rejected. 
            This value must be positive.  If not specified, it will be defaulted to 50.
            </param>
            <param name="queues">
            `queues` is the number of queues for this priority level. The queues exist
            independently at each apiserver. The value must be positive.  Setting it to 1
            effectively precludes shufflesharding and thus makes the distinguisher method of
            associated flow schemas irrelevant.  This field has a default value of 64.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3QueuingConfiguration.HandSize">
            <summary>
            `handSize` is a small positive number that configures the shuffle sharding of
            requests into queues.  When enqueuing a request at this priority level the
            request&apos;s flow identifier (a string pair) is hashed and the hash value is used
            to shuffle the list of queues and deal a hand of the size specified here.  The
            request is put into one of the shortest queues in that hand. `handSize` must be
            no larger than `queues`, and should be significantly smaller (so that a few
            heavy flows do not saturate most of the queues).  See the user-facing
            documentation for more extensive guidance on setting this field.  This field has
            a default value of 8.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3QueuingConfiguration.QueueLengthLimit">
            <summary>
            `queueLengthLimit` is the maximum number of requests allowed to be waiting in a
            given queue of this priority level at a time; excess requests are rejected. 
            This value must be positive.  If not specified, it will be defaulted to 50.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3QueuingConfiguration.Queues">
            <summary>
            `queues` is the number of queues for this priority level. The queues exist
            independently at each apiserver. The value must be positive.  Setting it to 1
            effectively precludes shufflesharding and thus makes the distinguisher method of
            associated flow schemas irrelevant.  This field has a default value of 64.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3QueuingConfiguration.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3ResourcePolicyRule">
            <summary>
            ResourcePolicyRule is a predicate that matches some resource requests, testing
            the request&apos;s verb and the target resource. A ResourcePolicyRule matches a
            resource request if and only if: (a) at least one member of verbs matches the
            request, (b) at least one member of apiGroups matches the request, (c) at least
            one member of resources matches the request, and (d) either (d1) the request
            does not specify a namespace (i.e., `Namespace==&quot;&quot;`) and clusterScope is true or
            (d2) the request specifies a namespace and least one member of namespaces
            matches the request&apos;s namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ResourcePolicyRule.#ctor">
            <summary>
            Initializes a new instance of the V1beta3ResourcePolicyRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ResourcePolicyRule.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1beta3ResourcePolicyRule class.
            </summary>
            <param name="apiGroups">
            `apiGroups` is a list of matching API groups and may not be empty. &quot;*&quot; matches
            all API groups and, if present, must be the only entry. Required.
            </param>
            <param name="resources">
            `resources` is a list of matching resources (i.e., lowercase and plural) with,
            if desired, subresource.  For example, [ &quot;services&quot;, &quot;nodes/status&quot; ].  This
            list may not be empty. &quot;*&quot; matches all resources and, if present, must be the
            only entry. Required.
            </param>
            <param name="verbs">
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs
            and, if present, must be the only entry. Required.
            </param>
            <param name="clusterScope">
            `clusterScope` indicates whether to match requests that do not specify a
            namespace (which happens either because the resource is not namespaced or the
            request targets all namespaces). If this field is omitted or false then the
            `namespaces` field must contain a non-empty list.
            </param>
            <param name="namespaces">
            `namespaces` is a list of target namespaces that restricts matches.  A request
            that specifies a target namespace matches only if either (a) this list contains
            that target namespace or (b) this list contains &quot;*&quot;.  Note that &quot;*&quot; matches any
            specified namespace but does not match a request that _does not specify_ a
            namespace (see the `clusterScope` field for that). This list may be empty, but
            only if `clusterScope` is true.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3ResourcePolicyRule.ApiGroups">
            <summary>
            `apiGroups` is a list of matching API groups and may not be empty. &quot;*&quot; matches
            all API groups and, if present, must be the only entry. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3ResourcePolicyRule.ClusterScope">
            <summary>
            `clusterScope` indicates whether to match requests that do not specify a
            namespace (which happens either because the resource is not namespaced or the
            request targets all namespaces). If this field is omitted or false then the
            `namespaces` field must contain a non-empty list.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3ResourcePolicyRule.Namespaces">
            <summary>
            `namespaces` is a list of target namespaces that restricts matches.  A request
            that specifies a target namespace matches only if either (a) this list contains
            that target namespace or (b) this list contains &quot;*&quot;.  Note that &quot;*&quot; matches any
            specified namespace but does not match a request that _does not specify_ a
            namespace (see the `clusterScope` field for that). This list may be empty, but
            only if `clusterScope` is true.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3ResourcePolicyRule.Resources">
            <summary>
            `resources` is a list of matching resources (i.e., lowercase and plural) with,
            if desired, subresource.  For example, [ &quot;services&quot;, &quot;nodes/status&quot; ].  This
            list may not be empty. &quot;*&quot; matches all resources and, if present, must be the
            only entry. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3ResourcePolicyRule.Verbs">
            <summary>
            `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs
            and, if present, must be the only entry. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ResourcePolicyRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3ServiceAccountSubject">
            <summary>
            ServiceAccountSubject holds detailed information for service-account-kind
            subject.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ServiceAccountSubject.#ctor">
            <summary>
            Initializes a new instance of the V1beta3ServiceAccountSubject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ServiceAccountSubject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1beta3ServiceAccountSubject class.
            </summary>
            <param name="name">
            `name` is the name of matching ServiceAccount objects, or &quot;*&quot; to match
            regardless of name. Required.
            </param>
            <param name="namespaceProperty">
            `namespace` is the namespace of matching ServiceAccount objects. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3ServiceAccountSubject.Name">
            <summary>
            `name` is the name of matching ServiceAccount objects, or &quot;*&quot; to match
            regardless of name. Required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3ServiceAccountSubject.NamespaceProperty">
            <summary>
            `namespace` is the namespace of matching ServiceAccount objects. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3ServiceAccountSubject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3Subject">
            <summary>
            Subject matches the originator of a request, as identified by the request
            authentication system. There are three ways of matching an originator; by user,
            group, or service account.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3Subject.#ctor">
            <summary>
            Initializes a new instance of the V1beta3Subject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3Subject.#ctor(System.String,k8s.Models.V1beta3GroupSubject,k8s.Models.V1beta3ServiceAccountSubject,k8s.Models.V1beta3UserSubject)">
            <summary>
            Initializes a new instance of the V1beta3Subject class.
            </summary>
            <param name="kind">
            `kind` indicates which one of the other fields is non-empty. Required
            </param>
            <param name="group">
            `group` matches based on user group name.
            </param>
            <param name="serviceAccount">
            `serviceAccount` matches ServiceAccounts.
            </param>
            <param name="user">
            `user` matches based on username.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3Subject.Group">
            <summary>
            `group` matches based on user group name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3Subject.Kind">
            <summary>
            `kind` indicates which one of the other fields is non-empty. Required
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3Subject.ServiceAccount">
            <summary>
            `serviceAccount` matches ServiceAccounts.
            </summary>
        </member>
        <member name="P:k8s.Models.V1beta3Subject.User">
            <summary>
            `user` matches based on username.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3Subject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1beta3UserSubject">
            <summary>
            UserSubject holds detailed information for user-kind subject.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3UserSubject.#ctor">
            <summary>
            Initializes a new instance of the V1beta3UserSubject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3UserSubject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the V1beta3UserSubject class.
            </summary>
            <param name="name">
            `name` is the username that matches, or &quot;*&quot; to match all usernames. Required.
            </param>
        </member>
        <member name="P:k8s.Models.V1beta3UserSubject.Name">
            <summary>
            `name` is the username that matches, or &quot;*&quot; to match all usernames. Required.
            </summary>
        </member>
        <member name="M:k8s.Models.V1beta3UserSubject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HTTPIngressPath">
            <summary>
            HTTPIngressPath associates a path with a backend. Incoming urls matching the
            path are forwarded to the backend.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPIngressPath.#ctor">
            <summary>
            Initializes a new instance of the V1HTTPIngressPath class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPIngressPath.#ctor(k8s.Models.V1IngressBackend,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1HTTPIngressPath class.
            </summary>
            <param name="backend">
            backend defines the referenced service endpoint to which the traffic will be
            forwarded to.
            </param>
            <param name="pathType">
            pathType determines the interpretation of the path matching. PathType can be one
            of the following values: * Exact: Matches the URL path exactly. * Prefix:
            Matches based on a URL path prefix split by &apos;/&apos;. Matching is
            done on a path element by element basis. A path element refers is the
            list of labels in the path split by the &apos;/&apos; separator. A request is a
            match for path p if every p is an element-wise prefix of p of the
            request path. Note that if the last element of the path is a substring
            of the last element in request path, it is not a match (e.g. /foo/bar
            matches /foo/bar/baz, but does not match /foo/barbaz).
            * ImplementationSpecific: Interpretation of the Path matching is up to
            the IngressClass. Implementations can treat this as a separate PathType
            or treat it identically to Prefix or Exact path types.
            Implementations are required to support all path types.
            </param>
            <param name="path">
            path is matched against the path of an incoming request. Currently it can
            contain characters disallowed from the conventional &quot;path&quot; part of a URL as
            defined by RFC 3986. Paths must begin with a &apos;/&apos; and must be present when using
            PathType with value &quot;Exact&quot; or &quot;Prefix&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1HTTPIngressPath.Backend">
            <summary>
            backend defines the referenced service endpoint to which the traffic will be
            forwarded to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HTTPIngressPath.Path">
            <summary>
            path is matched against the path of an incoming request. Currently it can
            contain characters disallowed from the conventional &quot;path&quot; part of a URL as
            defined by RFC 3986. Paths must begin with a &apos;/&apos; and must be present when using
            PathType with value &quot;Exact&quot; or &quot;Prefix&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1HTTPIngressPath.PathType">
            <summary>
            pathType determines the interpretation of the path matching. PathType can be one
            of the following values: * Exact: Matches the URL path exactly. * Prefix:
            Matches based on a URL path prefix split by &apos;/&apos;. Matching is
            done on a path element by element basis. A path element refers is the
            list of labels in the path split by the &apos;/&apos; separator. A request is a
            match for path p if every p is an element-wise prefix of p of the
            request path. Note that if the last element of the path is a substring
            of the last element in request path, it is not a match (e.g. /foo/bar
            matches /foo/bar/baz, but does not match /foo/barbaz).
            * ImplementationSpecific: Interpretation of the Path matching is up to
            the IngressClass. Implementations can treat this as a separate PathType
            or treat it identically to Prefix or Exact path types.
            Implementations are required to support all path types.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPIngressPath.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1HTTPIngressRuleValue">
            <summary>
            HTTPIngressRuleValue is a list of http selectors pointing to backends. In the
            example: http://&lt;host&gt;/&lt;path&gt;?&lt;searchpart&gt; -&gt; backend where where parts of the
            url correspond to RFC 3986, this resource will be used to match against
            everything after the last &apos;/&apos; and before the first &apos;?&apos; or &apos;#&apos;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPIngressRuleValue.#ctor">
            <summary>
            Initializes a new instance of the V1HTTPIngressRuleValue class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPIngressRuleValue.#ctor(System.Collections.Generic.IList{k8s.Models.V1HTTPIngressPath})">
            <summary>
            Initializes a new instance of the V1HTTPIngressRuleValue class.
            </summary>
            <param name="paths">
            paths is a collection of paths that map requests to backends.
            </param>
        </member>
        <member name="P:k8s.Models.V1HTTPIngressRuleValue.Paths">
            <summary>
            paths is a collection of paths that map requests to backends.
            </summary>
        </member>
        <member name="M:k8s.Models.V1HTTPIngressRuleValue.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IPBlock">
            <summary>
            IPBlock describes a particular CIDR (Ex. &quot;192.168.1.0/24&quot;,&quot;2001:db8::/64&quot;) that
            is allowed to the pods matched by a NetworkPolicySpec&apos;s podSelector. The except
            entry describes CIDRs that should not be included within this rule.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IPBlock.#ctor">
            <summary>
            Initializes a new instance of the V1IPBlock class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IPBlock.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1IPBlock class.
            </summary>
            <param name="cidr">
            cidr is a string representing the IPBlock Valid examples are &quot;192.168.1.0/24&quot; or
            &quot;2001:db8::/64&quot;
            </param>
            <param name="except">
            except is a slice of CIDRs that should not be included within an IPBlock Valid
            examples are &quot;192.168.1.0/24&quot; or &quot;2001:db8::/64&quot; Except values will be rejected
            if they are outside the cidr range
            </param>
        </member>
        <member name="P:k8s.Models.V1IPBlock.Cidr">
            <summary>
            cidr is a string representing the IPBlock Valid examples are &quot;192.168.1.0/24&quot; or
            &quot;2001:db8::/64&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1IPBlock.Except">
            <summary>
            except is a slice of CIDRs that should not be included within an IPBlock Valid
            examples are &quot;192.168.1.0/24&quot; or &quot;2001:db8::/64&quot; Except values will be rejected
            if they are outside the cidr range
            </summary>
        </member>
        <member name="M:k8s.Models.V1IPBlock.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Ingress">
            <summary>
            Ingress is a collection of rules that allow inbound connections to reach the
            endpoints defined by a backend. An Ingress can be configured to give services
            externally-reachable urls, load balance traffic, terminate SSL, offer name based
            virtual hosting etc.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Ingress.#ctor">
            <summary>
            Initializes a new instance of the V1Ingress class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Ingress.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1IngressSpec,k8s.Models.V1IngressStatus)">
            <summary>
            Initializes a new instance of the V1Ingress class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec is the desired state of the Ingress. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
            <param name="status">
            status is the current state of the Ingress. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1Ingress.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Ingress.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Ingress.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1Ingress.Spec">
            <summary>
            spec is the desired state of the Ingress. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="P:k8s.Models.V1Ingress.Status">
            <summary>
            status is the current state of the Ingress. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1Ingress.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressBackend">
            <summary>
            IngressBackend describes all endpoints for a given service and port.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressBackend.#ctor">
            <summary>
            Initializes a new instance of the V1IngressBackend class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressBackend.#ctor(k8s.Models.V1TypedLocalObjectReference,k8s.Models.V1IngressServiceBackend)">
            <summary>
            Initializes a new instance of the V1IngressBackend class.
            </summary>
            <param name="resource">
            resource is an ObjectRef to another Kubernetes resource in the namespace of the
            Ingress object. If resource is specified, a service.Name and service.Port must
            not be specified. This is a mutually exclusive setting with &quot;Service&quot;.
            </param>
            <param name="service">
            service references a service as a backend. This is a mutually exclusive setting
            with &quot;Resource&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressBackend.Resource">
            <summary>
            resource is an ObjectRef to another Kubernetes resource in the namespace of the
            Ingress object. If resource is specified, a service.Name and service.Port must
            not be specified. This is a mutually exclusive setting with &quot;Service&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressBackend.Service">
            <summary>
            service references a service as a backend. This is a mutually exclusive setting
            with &quot;Resource&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressBackend.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressClass">
            <summary>
            IngressClass represents the class of the Ingress, referenced by the Ingress
            Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used
            to indicate that an IngressClass should be considered default. When a single
            IngressClass resource has this annotation set to true, new Ingress resources
            without a class specified will be assigned this default class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClass.#ctor">
            <summary>
            Initializes a new instance of the V1IngressClass class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClass.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1IngressClassSpec)">
            <summary>
            Initializes a new instance of the V1IngressClass class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec is the desired state of the IngressClass. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressClass.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClass.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClass.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClass.Spec">
            <summary>
            spec is the desired state of the IngressClass. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClass.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressClassList">
            <summary>
            IngressClassList is a collection of IngressClasses.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassList.#ctor">
            <summary>
            Initializes a new instance of the V1IngressClassList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassList.#ctor(System.Collections.Generic.IList{k8s.Models.V1IngressClass},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1IngressClassList class.
            </summary>
            <param name="items">
            items is the list of IngressClasses.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressClassList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassList.Items">
            <summary>
            items is the list of IngressClasses.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassList.Metadata">
            <summary>
            Standard list metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressClassParametersReference">
            <summary>
            IngressClassParametersReference identifies an API object. This can be used to
            specify a cluster or namespace-scoped resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassParametersReference.#ctor">
            <summary>
            Initializes a new instance of the V1IngressClassParametersReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassParametersReference.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1IngressClassParametersReference class.
            </summary>
            <param name="kind">
            kind is the type of resource being referenced.
            </param>
            <param name="name">
            name is the name of resource being referenced.
            </param>
            <param name="apiGroup">
            apiGroup is the group for the resource being referenced. If APIGroup is not
            specified, the specified Kind must be in the core API group. For any other
            third-party types, APIGroup is required.
            </param>
            <param name="namespaceProperty">
            namespace is the namespace of the resource being referenced. This field is
            required when scope is set to &quot;Namespace&quot; and must be unset when scope is set to
            &quot;Cluster&quot;.
            </param>
            <param name="scope">
            scope represents if this refers to a cluster or namespace scoped resource. This
            may be set to &quot;Cluster&quot; (default) or &quot;Namespace&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressClassParametersReference.ApiGroup">
            <summary>
            apiGroup is the group for the resource being referenced. If APIGroup is not
            specified, the specified Kind must be in the core API group. For any other
            third-party types, APIGroup is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassParametersReference.Kind">
            <summary>
            kind is the type of resource being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassParametersReference.Name">
            <summary>
            name is the name of resource being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassParametersReference.NamespaceProperty">
            <summary>
            namespace is the namespace of the resource being referenced. This field is
            required when scope is set to &quot;Namespace&quot; and must be unset when scope is set to
            &quot;Cluster&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassParametersReference.Scope">
            <summary>
            scope represents if this refers to a cluster or namespace scoped resource. This
            may be set to &quot;Cluster&quot; (default) or &quot;Namespace&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassParametersReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressClassSpec">
            <summary>
            IngressClassSpec provides information about the class of an Ingress.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassSpec.#ctor">
            <summary>
            Initializes a new instance of the V1IngressClassSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassSpec.#ctor(System.String,k8s.Models.V1IngressClassParametersReference)">
            <summary>
            Initializes a new instance of the V1IngressClassSpec class.
            </summary>
            <param name="controller">
            controller refers to the name of the controller that should handle this class.
            This allows for different &quot;flavors&quot; that are controlled by the same controller.
            For example, you may have different parameters for the same implementing
            controller. This should be specified as a domain-prefixed path no more than 250
            characters in length, e.g. &quot;acme.io/ingress-controller&quot;. This field is
            immutable.
            </param>
            <param name="parameters">
            parameters is a link to a custom resource containing additional configuration
            for the controller. This is optional if the controller does not require extra
            parameters.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressClassSpec.Controller">
            <summary>
            controller refers to the name of the controller that should handle this class.
            This allows for different &quot;flavors&quot; that are controlled by the same controller.
            For example, you may have different parameters for the same implementing
            controller. This should be specified as a domain-prefixed path no more than 250
            characters in length, e.g. &quot;acme.io/ingress-controller&quot;. This field is
            immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressClassSpec.Parameters">
            <summary>
            parameters is a link to a custom resource containing additional configuration
            for the controller. This is optional if the controller does not require extra
            parameters.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressClassSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressList">
            <summary>
            IngressList is a collection of Ingress.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressList.#ctor">
            <summary>
            Initializes a new instance of the V1IngressList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Ingress},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1IngressList class.
            </summary>
            <param name="items">
            items is the list of Ingress.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressList.Items">
            <summary>
            items is the list of Ingress.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressList.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressLoadBalancerIngress">
            <summary>
            IngressLoadBalancerIngress represents the status of a load-balancer ingress
            point.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressLoadBalancerIngress.#ctor">
            <summary>
            Initializes a new instance of the V1IngressLoadBalancerIngress class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressLoadBalancerIngress.#ctor(System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1IngressPortStatus})">
            <summary>
            Initializes a new instance of the V1IngressLoadBalancerIngress class.
            </summary>
            <param name="hostname">
            hostname is set for load-balancer ingress points that are DNS based.
            </param>
            <param name="ip">
            ip is set for load-balancer ingress points that are IP based.
            </param>
            <param name="ports">
            ports provides information about the ports exposed by this LoadBalancer.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressLoadBalancerIngress.Hostname">
            <summary>
            hostname is set for load-balancer ingress points that are DNS based.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressLoadBalancerIngress.Ip">
            <summary>
            ip is set for load-balancer ingress points that are IP based.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressLoadBalancerIngress.Ports">
            <summary>
            ports provides information about the ports exposed by this LoadBalancer.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressLoadBalancerIngress.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressLoadBalancerStatus">
            <summary>
            IngressLoadBalancerStatus represents the status of a load-balancer.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressLoadBalancerStatus.#ctor">
            <summary>
            Initializes a new instance of the V1IngressLoadBalancerStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressLoadBalancerStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1IngressLoadBalancerIngress})">
            <summary>
            Initializes a new instance of the V1IngressLoadBalancerStatus class.
            </summary>
            <param name="ingress">
            ingress is a list containing ingress points for the load-balancer.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressLoadBalancerStatus.Ingress">
            <summary>
            ingress is a list containing ingress points for the load-balancer.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressLoadBalancerStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressPortStatus">
            <summary>
            IngressPortStatus represents the error condition of a service port
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressPortStatus.#ctor">
            <summary>
            Initializes a new instance of the V1IngressPortStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressPortStatus.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1IngressPortStatus class.
            </summary>
            <param name="port">
            port is the port number of the ingress port.
            </param>
            <param name="protocol">
            protocol is the protocol of the ingress port. The supported values are: &quot;TCP&quot;,
            &quot;UDP&quot;, &quot;SCTP&quot;
            </param>
            <param name="error">
            error is to record the problem with the service port The format of the error
            shall comply with the following rules: - built-in error values shall be
            specified in this file and those shall use
            CamelCase names
            - cloud provider specific error values must have names that comply with the
            format foo.example.com/CamelCase.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressPortStatus.Error">
            <summary>
            error is to record the problem with the service port The format of the error
            shall comply with the following rules: - built-in error values shall be
            specified in this file and those shall use
            CamelCase names
            - cloud provider specific error values must have names that comply with the
            format foo.example.com/CamelCase.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressPortStatus.Port">
            <summary>
            port is the port number of the ingress port.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressPortStatus.Protocol">
            <summary>
            protocol is the protocol of the ingress port. The supported values are: &quot;TCP&quot;,
            &quot;UDP&quot;, &quot;SCTP&quot;
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressPortStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressRule">
            <summary>
            IngressRule represents the rules mapping the paths under a specified host to the
            related backend services. Incoming requests are first evaluated for a host
            match, then routed to the backend associated with the matching IngressRuleValue.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressRule.#ctor">
            <summary>
            Initializes a new instance of the V1IngressRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressRule.#ctor(System.String,k8s.Models.V1HTTPIngressRuleValue)">
            <summary>
            Initializes a new instance of the V1IngressRule class.
            </summary>
            <param name="host">
            host is the fully qualified domain name of a network host, as defined by RFC
            3986. Note the following deviations from the &quot;host&quot; part of the URI as defined
            in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only
            apply to
            the IP in the Spec of the parent Ingress.
            2. The `:` delimiter is not respected because ports are not allowed.
            Currently the port of an Ingress is implicitly :80 for http and
            :443 for https.
            Both these may change in the future. Incoming requests are matched against the
            host before the IngressRuleValue. If the host is unspecified, the Ingress routes
            all traffic based on the specified IngressRuleValue.
            
            host can be &quot;precise&quot; which is a domain name without the terminating dot of a
            network host (e.g. &quot;foo.bar.com&quot;) or &quot;wildcard&quot;, which is a domain name prefixed
            with a single wildcard label (e.g. &quot;*.foo.com&quot;). The wildcard character &apos;*&apos; must
            appear by itself as the first DNS label and matches only a single label. You
            cannot have a wildcard label by itself (e.g. Host == &quot;*&quot;). Requests will be
            matched against the Host field in the following way: 1. If host is precise, the
            request matches this rule if the http host header is equal to Host. 2. If host
            is a wildcard, then the request matches this rule if the http host header is to
            equal to the suffix (removing the first label) of the wildcard rule.
            </param>
            <param name="http">
            
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressRule.Host">
            <summary>
            host is the fully qualified domain name of a network host, as defined by RFC
            3986. Note the following deviations from the &quot;host&quot; part of the URI as defined
            in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only
            apply to
            the IP in the Spec of the parent Ingress.
            2. The `:` delimiter is not respected because ports are not allowed.
            Currently the port of an Ingress is implicitly :80 for http and
            :443 for https.
            Both these may change in the future. Incoming requests are matched against the
            host before the IngressRuleValue. If the host is unspecified, the Ingress routes
            all traffic based on the specified IngressRuleValue.
            
            host can be &quot;precise&quot; which is a domain name without the terminating dot of a
            network host (e.g. &quot;foo.bar.com&quot;) or &quot;wildcard&quot;, which is a domain name prefixed
            with a single wildcard label (e.g. &quot;*.foo.com&quot;). The wildcard character &apos;*&apos; must
            appear by itself as the first DNS label and matches only a single label. You
            cannot have a wildcard label by itself (e.g. Host == &quot;*&quot;). Requests will be
            matched against the Host field in the following way: 1. If host is precise, the
            request matches this rule if the http host header is equal to Host. 2. If host
            is a wildcard, then the request matches this rule if the http host header is to
            equal to the suffix (removing the first label) of the wildcard rule.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressRule.Http">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressServiceBackend">
            <summary>
            IngressServiceBackend references a Kubernetes Service as a Backend.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressServiceBackend.#ctor">
            <summary>
            Initializes a new instance of the V1IngressServiceBackend class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressServiceBackend.#ctor(System.String,k8s.Models.V1ServiceBackendPort)">
            <summary>
            Initializes a new instance of the V1IngressServiceBackend class.
            </summary>
            <param name="name">
            name is the referenced service. The service must exist in the same namespace as
            the Ingress object.
            </param>
            <param name="port">
            port of the referenced service. A port name or port number is required for a
            IngressServiceBackend.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressServiceBackend.Name">
            <summary>
            name is the referenced service. The service must exist in the same namespace as
            the Ingress object.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressServiceBackend.Port">
            <summary>
            port of the referenced service. A port name or port number is required for a
            IngressServiceBackend.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressServiceBackend.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressSpec">
            <summary>
            IngressSpec describes the Ingress the user wishes to exist.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressSpec.#ctor">
            <summary>
            Initializes a new instance of the V1IngressSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressSpec.#ctor(k8s.Models.V1IngressBackend,System.String,System.Collections.Generic.IList{k8s.Models.V1IngressRule},System.Collections.Generic.IList{k8s.Models.V1IngressTLS})">
            <summary>
            Initializes a new instance of the V1IngressSpec class.
            </summary>
            <param name="defaultBackend">
            defaultBackend is the backend that should handle requests that don&apos;t match any
            rule. If Rules are not specified, DefaultBackend must be specified. If
            DefaultBackend is not set, the handling of requests that do not match any of the
            rules will be up to the Ingress controller.
            </param>
            <param name="ingressClassName">
            ingressClassName is the name of an IngressClass cluster resource. Ingress
            controller implementations use this field to know whether they should be serving
            this Ingress resource, by a transitive connection (controller -&gt; IngressClass -&gt;
            Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple
            constant name) was never formally defined, it was widely supported by Ingress
            controllers to create a direct binding between Ingress controller and Ingress
            resources. Newly created Ingress resources should prefer using the field.
            However, even though the annotation is officially deprecated, for backwards
            compatibility reasons, ingress controllers should still honor that annotation if
            present.
            </param>
            <param name="rules">
            rules is a list of host rules used to configure the Ingress. If unspecified, or
            no rule matches, all traffic is sent to the default backend.
            </param>
            <param name="tls">
            tls represents the TLS configuration. Currently the Ingress only supports a
            single TLS port, 443. If multiple members of this list specify different hosts,
            they will be multiplexed on the same port according to the hostname specified
            through the SNI TLS extension, if the ingress controller fulfilling the ingress
            supports SNI.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressSpec.DefaultBackend">
            <summary>
            defaultBackend is the backend that should handle requests that don&apos;t match any
            rule. If Rules are not specified, DefaultBackend must be specified. If
            DefaultBackend is not set, the handling of requests that do not match any of the
            rules will be up to the Ingress controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressSpec.IngressClassName">
            <summary>
            ingressClassName is the name of an IngressClass cluster resource. Ingress
            controller implementations use this field to know whether they should be serving
            this Ingress resource, by a transitive connection (controller -&gt; IngressClass -&gt;
            Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple
            constant name) was never formally defined, it was widely supported by Ingress
            controllers to create a direct binding between Ingress controller and Ingress
            resources. Newly created Ingress resources should prefer using the field.
            However, even though the annotation is officially deprecated, for backwards
            compatibility reasons, ingress controllers should still honor that annotation if
            present.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressSpec.Rules">
            <summary>
            rules is a list of host rules used to configure the Ingress. If unspecified, or
            no rule matches, all traffic is sent to the default backend.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressSpec.Tls">
            <summary>
            tls represents the TLS configuration. Currently the Ingress only supports a
            single TLS port, 443. If multiple members of this list specify different hosts,
            they will be multiplexed on the same port according to the hostname specified
            through the SNI TLS extension, if the ingress controller fulfilling the ingress
            supports SNI.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressStatus">
            <summary>
            IngressStatus describe the current state of the Ingress.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressStatus.#ctor">
            <summary>
            Initializes a new instance of the V1IngressStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressStatus.#ctor(k8s.Models.V1IngressLoadBalancerStatus)">
            <summary>
            Initializes a new instance of the V1IngressStatus class.
            </summary>
            <param name="loadBalancer">
            loadBalancer contains the current status of the load-balancer.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressStatus.LoadBalancer">
            <summary>
            loadBalancer contains the current status of the load-balancer.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1IngressTLS">
            <summary>
            IngressTLS describes the transport layer security associated with an ingress.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressTLS.#ctor">
            <summary>
            Initializes a new instance of the V1IngressTLS class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressTLS.#ctor(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1IngressTLS class.
            </summary>
            <param name="hosts">
            hosts is a list of hosts included in the TLS certificate. The values in this
            list must match the name/s used in the tlsSecret. Defaults to the wildcard host
            setting for the loadbalancer controller fulfilling this Ingress, if left
            unspecified.
            </param>
            <param name="secretName">
            secretName is the name of the secret used to terminate TLS traffic on port 443.
            Field is left optional to allow TLS routing based on SNI hostname alone. If the
            SNI host in a listener conflicts with the &quot;Host&quot; header field used by an
            IngressRule, the SNI host is used for termination and value of the &quot;Host&quot; header
            is used for routing.
            </param>
        </member>
        <member name="P:k8s.Models.V1IngressTLS.Hosts">
            <summary>
            hosts is a list of hosts included in the TLS certificate. The values in this
            list must match the name/s used in the tlsSecret. Defaults to the wildcard host
            setting for the loadbalancer controller fulfilling this Ingress, if left
            unspecified.
            </summary>
        </member>
        <member name="P:k8s.Models.V1IngressTLS.SecretName">
            <summary>
            secretName is the name of the secret used to terminate TLS traffic on port 443.
            Field is left optional to allow TLS routing based on SNI hostname alone. If the
            SNI host in a listener conflicts with the &quot;Host&quot; header field used by an
            IngressRule, the SNI host is used for termination and value of the &quot;Host&quot; header
            is used for routing.
            </summary>
        </member>
        <member name="M:k8s.Models.V1IngressTLS.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NetworkPolicy">
            <summary>
            NetworkPolicy describes what network traffic is allowed for a set of Pods
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicy.#ctor">
            <summary>
            Initializes a new instance of the V1NetworkPolicy class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicy.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1NetworkPolicySpec)">
            <summary>
            Initializes a new instance of the V1NetworkPolicy class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec represents the specification of the desired behavior for this
            NetworkPolicy.
            </param>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicy.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicy.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicy.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicy.Spec">
            <summary>
            spec represents the specification of the desired behavior for this
            NetworkPolicy.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicy.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NetworkPolicyEgressRule">
            <summary>
            NetworkPolicyEgressRule describes a particular set of traffic that is allowed
            out of pods matched by a NetworkPolicySpec&apos;s podSelector. The traffic must match
            both ports and to. This type is beta-level in 1.8
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyEgressRule.#ctor">
            <summary>
            Initializes a new instance of the V1NetworkPolicyEgressRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyEgressRule.#ctor(System.Collections.Generic.IList{k8s.Models.V1NetworkPolicyPort},System.Collections.Generic.IList{k8s.Models.V1NetworkPolicyPeer})">
            <summary>
            Initializes a new instance of the V1NetworkPolicyEgressRule class.
            </summary>
            <param name="ports">
            ports is a list of destination ports for outgoing traffic. Each item in this
            list is combined using a logical OR. If this field is empty or missing, this
            rule matches all ports (traffic not restricted by port). If this field is
            present and contains at least one item, then this rule allows traffic only if
            the traffic matches at least one port in the list.
            </param>
            <param name="to">
            to is a list of destinations for outgoing traffic of pods selected for this
            rule. Items in this list are combined using a logical OR operation. If this
            field is empty or missing, this rule matches all destinations (traffic not
            restricted by destination). If this field is present and contains at least one
            item, this rule allows traffic only if the traffic matches at least one item in
            the to list.
            </param>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyEgressRule.Ports">
            <summary>
            ports is a list of destination ports for outgoing traffic. Each item in this
            list is combined using a logical OR. If this field is empty or missing, this
            rule matches all ports (traffic not restricted by port). If this field is
            present and contains at least one item, then this rule allows traffic only if
            the traffic matches at least one port in the list.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyEgressRule.To">
            <summary>
            to is a list of destinations for outgoing traffic of pods selected for this
            rule. Items in this list are combined using a logical OR operation. If this
            field is empty or missing, this rule matches all destinations (traffic not
            restricted by destination). If this field is present and contains at least one
            item, this rule allows traffic only if the traffic matches at least one item in
            the to list.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyEgressRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NetworkPolicyIngressRule">
            <summary>
            NetworkPolicyIngressRule describes a particular set of traffic that is allowed
            to the pods matched by a NetworkPolicySpec&apos;s podSelector. The traffic must match
            both ports and from.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyIngressRule.#ctor">
            <summary>
            Initializes a new instance of the V1NetworkPolicyIngressRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyIngressRule.#ctor(System.Collections.Generic.IList{k8s.Models.V1NetworkPolicyPeer},System.Collections.Generic.IList{k8s.Models.V1NetworkPolicyPort})">
            <summary>
            Initializes a new instance of the V1NetworkPolicyIngressRule class.
            </summary>
            <param name="fromProperty">
            from is a list of sources which should be able to access the pods selected for
            this rule. Items in this list are combined using a logical OR operation. If this
            field is empty or missing, this rule matches all sources (traffic not restricted
            by source). If this field is present and contains at least one item, this rule
            allows traffic only if the traffic matches at least one item in the from list.
            </param>
            <param name="ports">
            ports is a list of ports which should be made accessible on the pods selected
            for this rule. Each item in this list is combined using a logical OR. If this
            field is empty or missing, this rule matches all ports (traffic not restricted
            by port). If this field is present and contains at least one item, then this
            rule allows traffic only if the traffic matches at least one port in the list.
            </param>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyIngressRule.FromProperty">
            <summary>
            from is a list of sources which should be able to access the pods selected for
            this rule. Items in this list are combined using a logical OR operation. If this
            field is empty or missing, this rule matches all sources (traffic not restricted
            by source). If this field is present and contains at least one item, this rule
            allows traffic only if the traffic matches at least one item in the from list.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyIngressRule.Ports">
            <summary>
            ports is a list of ports which should be made accessible on the pods selected
            for this rule. Each item in this list is combined using a logical OR. If this
            field is empty or missing, this rule matches all ports (traffic not restricted
            by port). If this field is present and contains at least one item, then this
            rule allows traffic only if the traffic matches at least one port in the list.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyIngressRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NetworkPolicyList">
            <summary>
            NetworkPolicyList is a list of NetworkPolicy objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyList.#ctor">
            <summary>
            Initializes a new instance of the V1NetworkPolicyList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyList.#ctor(System.Collections.Generic.IList{k8s.Models.V1NetworkPolicy},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1NetworkPolicyList class.
            </summary>
            <param name="items">
            items is a list of schema objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyList.Items">
            <summary>
            items is a list of schema objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NetworkPolicyPeer">
            <summary>
            NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain
            combinations of fields are allowed
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyPeer.#ctor">
            <summary>
            Initializes a new instance of the V1NetworkPolicyPeer class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyPeer.#ctor(k8s.Models.V1IPBlock,k8s.Models.V1LabelSelector,k8s.Models.V1LabelSelector)">
            <summary>
            Initializes a new instance of the V1NetworkPolicyPeer class.
            </summary>
            <param name="ipBlock">
            ipBlock defines policy on a particular IPBlock. If this field is set then
            neither of the other fields can be.
            </param>
            <param name="namespaceSelector">
            namespaceSelector selects namespaces using cluster-scoped labels. This field
            follows standard label selector semantics; if present but empty, it selects all
            namespaces.
            
            If podSelector is also set, then the NetworkPolicyPeer as a whole selects the
            pods matching podSelector in the namespaces selected by namespaceSelector.
            Otherwise it selects all pods in the namespaces selected by namespaceSelector.
            </param>
            <param name="podSelector">
            podSelector is a label selector which selects pods. This field follows standard
            label selector semantics; if present but empty, it selects all pods.
            
            If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
            the pods matching podSelector in the Namespaces selected by NamespaceSelector.
            Otherwise it selects the pods matching podSelector in the policy&apos;s own
            namespace.
            </param>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyPeer.IpBlock">
            <summary>
            ipBlock defines policy on a particular IPBlock. If this field is set then
            neither of the other fields can be.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyPeer.NamespaceSelector">
            <summary>
            namespaceSelector selects namespaces using cluster-scoped labels. This field
            follows standard label selector semantics; if present but empty, it selects all
            namespaces.
            
            If podSelector is also set, then the NetworkPolicyPeer as a whole selects the
            pods matching podSelector in the namespaces selected by namespaceSelector.
            Otherwise it selects all pods in the namespaces selected by namespaceSelector.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyPeer.PodSelector">
            <summary>
            podSelector is a label selector which selects pods. This field follows standard
            label selector semantics; if present but empty, it selects all pods.
            
            If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
            the pods matching podSelector in the Namespaces selected by NamespaceSelector.
            Otherwise it selects the pods matching podSelector in the policy&apos;s own
            namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyPeer.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NetworkPolicyPort">
            <summary>
            NetworkPolicyPort describes a port to allow traffic on
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyPort.#ctor">
            <summary>
            Initializes a new instance of the V1NetworkPolicyPort class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyPort.#ctor(System.Nullable{System.Int32},k8s.Models.IntstrIntOrString,System.String)">
            <summary>
            Initializes a new instance of the V1NetworkPolicyPort class.
            </summary>
            <param name="endPort">
            endPort indicates that the range of ports from port to endPort if set,
            inclusive, should be allowed by the policy. This field cannot be defined if the
            port field is not defined or if the port field is defined as a named (string)
            port. The endPort must be equal or greater than port.
            </param>
            <param name="port">
            port represents the port on the given protocol. This can either be a numerical
            or named port on a pod. If this field is not provided, this matches all port
            names and numbers. If present, only traffic on the specified protocol AND port
            will be matched.
            </param>
            <param name="protocol">
            protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
            If not specified, this field defaults to TCP.
            </param>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyPort.EndPort">
            <summary>
            endPort indicates that the range of ports from port to endPort if set,
            inclusive, should be allowed by the policy. This field cannot be defined if the
            port field is not defined or if the port field is defined as a named (string)
            port. The endPort must be equal or greater than port.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyPort.Port">
            <summary>
            port represents the port on the given protocol. This can either be a numerical
            or named port on a pod. If this field is not provided, this matches all port
            names and numbers. If present, only traffic on the specified protocol AND port
            will be matched.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicyPort.Protocol">
            <summary>
            protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
            If not specified, this field defaults to TCP.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicyPort.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1NetworkPolicySpec">
            <summary>
            NetworkPolicySpec provides the specification of a NetworkPolicy
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicySpec.#ctor">
            <summary>
            Initializes a new instance of the V1NetworkPolicySpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicySpec.#ctor(k8s.Models.V1LabelSelector,System.Collections.Generic.IList{k8s.Models.V1NetworkPolicyEgressRule},System.Collections.Generic.IList{k8s.Models.V1NetworkPolicyIngressRule},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1NetworkPolicySpec class.
            </summary>
            <param name="podSelector">
            podSelector selects the pods to which this NetworkPolicy object applies. The
            array of ingress rules is applied to any pods selected by this field. Multiple
            network policies can select the same set of pods. In this case, the ingress
            rules for each are combined additively. This field is NOT optional and follows
            standard label selector semantics. An empty podSelector matches all pods in this
            namespace.
            </param>
            <param name="egress">
            egress is a list of egress rules to be applied to the selected pods. Outgoing
            traffic is allowed if there are no NetworkPolicies selecting the pod (and
            cluster policy otherwise allows the traffic), OR if the traffic matches at least
            one egress rule across all of the NetworkPolicy objects whose podSelector
            matches the pod. If this field is empty then this NetworkPolicy limits all
            outgoing traffic (and serves solely to ensure that the pods it selects are
            isolated by default). This field is beta-level in 1.8
            </param>
            <param name="ingress">
            ingress is a list of ingress rules to be applied to the selected pods. Traffic
            is allowed to a pod if there are no NetworkPolicies selecting the pod (and
            cluster policy otherwise allows the traffic), OR if the traffic source is the
            pod&apos;s local node, OR if the traffic matches at least one ingress rule across all
            of the NetworkPolicy objects whose podSelector matches the pod. If this field is
            empty then this NetworkPolicy does not allow any traffic (and serves solely to
            ensure that the pods it selects are isolated by default)
            </param>
            <param name="policyTypes">
            policyTypes is a list of rule types that the NetworkPolicy relates to. Valid
            options are [&quot;Ingress&quot;], [&quot;Egress&quot;], or [&quot;Ingress&quot;, &quot;Egress&quot;]. If this field is
            not specified, it will default based on the existence of ingress or egress
            rules; policies that contain an egress section are assumed to affect egress, and
            all policies (whether or not they contain an ingress section) are assumed to
            affect ingress. If you want to write an egress-only policy, you must explicitly
            specify policyTypes [ &quot;Egress&quot; ]. Likewise, if you want to write a policy that
            specifies that no egress is allowed, you must specify a policyTypes value that
            include &quot;Egress&quot; (since such a policy would not include an egress section and
            would otherwise default to just [ &quot;Ingress&quot; ]). This field is beta-level in 1.8
            </param>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicySpec.Egress">
            <summary>
            egress is a list of egress rules to be applied to the selected pods. Outgoing
            traffic is allowed if there are no NetworkPolicies selecting the pod (and
            cluster policy otherwise allows the traffic), OR if the traffic matches at least
            one egress rule across all of the NetworkPolicy objects whose podSelector
            matches the pod. If this field is empty then this NetworkPolicy limits all
            outgoing traffic (and serves solely to ensure that the pods it selects are
            isolated by default). This field is beta-level in 1.8
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicySpec.Ingress">
            <summary>
            ingress is a list of ingress rules to be applied to the selected pods. Traffic
            is allowed to a pod if there are no NetworkPolicies selecting the pod (and
            cluster policy otherwise allows the traffic), OR if the traffic source is the
            pod&apos;s local node, OR if the traffic matches at least one ingress rule across all
            of the NetworkPolicy objects whose podSelector matches the pod. If this field is
            empty then this NetworkPolicy does not allow any traffic (and serves solely to
            ensure that the pods it selects are isolated by default)
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicySpec.PodSelector">
            <summary>
            podSelector selects the pods to which this NetworkPolicy object applies. The
            array of ingress rules is applied to any pods selected by this field. Multiple
            network policies can select the same set of pods. In this case, the ingress
            rules for each are combined additively. This field is NOT optional and follows
            standard label selector semantics. An empty podSelector matches all pods in this
            namespace.
            </summary>
        </member>
        <member name="P:k8s.Models.V1NetworkPolicySpec.PolicyTypes">
            <summary>
            policyTypes is a list of rule types that the NetworkPolicy relates to. Valid
            options are [&quot;Ingress&quot;], [&quot;Egress&quot;], or [&quot;Ingress&quot;, &quot;Egress&quot;]. If this field is
            not specified, it will default based on the existence of ingress or egress
            rules; policies that contain an egress section are assumed to affect egress, and
            all policies (whether or not they contain an ingress section) are assumed to
            affect ingress. If you want to write an egress-only policy, you must explicitly
            specify policyTypes [ &quot;Egress&quot; ]. Likewise, if you want to write a policy that
            specifies that no egress is allowed, you must specify a policyTypes value that
            include &quot;Egress&quot; (since such a policy would not include an egress section and
            would otherwise default to just [ &quot;Ingress&quot; ]). This field is beta-level in 1.8
            </summary>
        </member>
        <member name="M:k8s.Models.V1NetworkPolicySpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServiceBackendPort">
            <summary>
            ServiceBackendPort is the service port being referenced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceBackendPort.#ctor">
            <summary>
            Initializes a new instance of the V1ServiceBackendPort class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceBackendPort.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1ServiceBackendPort class.
            </summary>
            <param name="name">
            name is the name of the port on the Service. This is a mutually exclusive
            setting with &quot;Number&quot;.
            </param>
            <param name="number">
            number is the numerical port number (e.g. 80) on the Service. This is a mutually
            exclusive setting with &quot;Name&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1ServiceBackendPort.Name">
            <summary>
            name is the name of the port on the Service. This is a mutually exclusive
            setting with &quot;Number&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServiceBackendPort.Number">
            <summary>
            number is the numerical port number (e.g. 80) on the Service. This is a mutually
            exclusive setting with &quot;Name&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServiceBackendPort.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ClusterCIDR">
            <summary>
            ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations
            when the MultiCIDRRangeAllocator is enabled (see the config for
            kube-controller-manager).  A cluster may have any number of ClusterCIDR
            resources, all of which will be considered when allocating a CIDR for a Node.  A
            ClusterCIDR is eligible to be used for a given Node when the node selector
            matches the node in question and has free CIDRs to allocate.  In case of
            multiple matching ClusterCIDR resources, the allocator will attempt to break
            ties using internal heuristics, but any ClusterCIDR whose node selector matches
            the Node may be used.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDR.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ClusterCIDR class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDR.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha1ClusterCIDRSpec)">
            <summary>
            Initializes a new instance of the V1alpha1ClusterCIDR class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec is the desired state of the ClusterCIDR. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDR.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDR.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDR.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDR.Spec">
            <summary>
            spec is the desired state of the ClusterCIDR. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDR.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ClusterCIDRList">
            <summary>
            ClusterCIDRList contains a list of ClusterCIDR.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDRList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ClusterCIDRList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDRList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha1ClusterCIDR},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha1ClusterCIDRList class.
            </summary>
            <param name="items">
            items is the list of ClusterCIDRs.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRList.Items">
            <summary>
            items is the list of ClusterCIDRs.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRList.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDRList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ClusterCIDRSpec">
            <summary>
            ClusterCIDRSpec defines the desired state of ClusterCIDR.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDRSpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ClusterCIDRSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDRSpec.#ctor(System.Int32,System.String,System.String,k8s.Models.V1NodeSelector)">
            <summary>
            Initializes a new instance of the V1alpha1ClusterCIDRSpec class.
            </summary>
            <param name="perNodeHostBits">
            perNodeHostBits defines the number of host bits to be configured per node. A
            subnet mask determines how much of the address is used for network bits and host
            bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24
            bits for the network portion and 8 bits for the host portion. To allocate 256
            IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value
            is 4 (16 IPs). This field is immutable.
            </param>
            <param name="ipv4">
            ipv4 defines an IPv4 IP block in CIDR notation(e.g. &quot;10.0.0.0/8&quot;). At least one
            of ipv4 and ipv6 must be specified. This field is immutable.
            </param>
            <param name="ipv6">
            ipv6 defines an IPv6 IP block in CIDR notation(e.g. &quot;2001:db8::/64&quot;). At least
            one of ipv4 and ipv6 must be specified. This field is immutable.
            </param>
            <param name="nodeSelector">
            nodeSelector defines which nodes the config is applicable to. An empty or nil
            nodeSelector selects all nodes. This field is immutable.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRSpec.Ipv4">
            <summary>
            ipv4 defines an IPv4 IP block in CIDR notation(e.g. &quot;10.0.0.0/8&quot;). At least one
            of ipv4 and ipv6 must be specified. This field is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRSpec.Ipv6">
            <summary>
            ipv6 defines an IPv6 IP block in CIDR notation(e.g. &quot;2001:db8::/64&quot;). At least
            one of ipv4 and ipv6 must be specified. This field is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRSpec.NodeSelector">
            <summary>
            nodeSelector defines which nodes the config is applicable to. An empty or nil
            nodeSelector selects all nodes. This field is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ClusterCIDRSpec.PerNodeHostBits">
            <summary>
            perNodeHostBits defines the number of host bits to be configured per node. A
            subnet mask determines how much of the address is used for network bits and host
            bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24
            bits for the network portion and 8 bits for the host portion. To allocate 256
            IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value
            is 4 (16 IPs). This field is immutable.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ClusterCIDRSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1IPAddress">
            <summary>
            IPAddress represents a single IP of a single IP Family. The object is designed
            to be used by APIs that operate on IP addresses. The object is used by the
            Service core API for allocation of IP addresses. An IP address can be
            represented in different formats, to guarantee the uniqueness of the IP, the
            name of the object is the IP address in canonical format, four decimal digits
            separated by dots suppressing leading zeros for IPv4 and the representation
            defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or
            2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddress.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1IPAddress class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddress.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha1IPAddressSpec)">
            <summary>
            Initializes a new instance of the V1alpha1IPAddress class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            spec is the desired state of the IPAddress. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddress.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddress.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddress.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddress.Spec">
            <summary>
            spec is the desired state of the IPAddress. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddress.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1IPAddressList">
            <summary>
            IPAddressList contains a list of IPAddress.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddressList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1IPAddressList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddressList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha1IPAddress},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha1IPAddressList class.
            </summary>
            <param name="items">
            items is the list of IPAddresses.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddressList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddressList.Items">
            <summary>
            items is the list of IPAddresses.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddressList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddressList.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddressList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1IPAddressSpec">
            <summary>
            IPAddressSpec describe the attributes in an IP Address.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddressSpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1IPAddressSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddressSpec.#ctor(k8s.Models.V1alpha1ParentReference)">
            <summary>
            Initializes a new instance of the V1alpha1IPAddressSpec class.
            </summary>
            <param name="parentRef">
            ParentRef references the resource that an IPAddress is attached to. An IPAddress
            must reference a parent object.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1IPAddressSpec.ParentRef">
            <summary>
            ParentRef references the resource that an IPAddress is attached to. An IPAddress
            must reference a parent object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1IPAddressSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha1ParentReference">
            <summary>
            ParentReference describes a reference to a parent object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParentReference.#ctor">
            <summary>
            Initializes a new instance of the V1alpha1ParentReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParentReference.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha1ParentReference class.
            </summary>
            <param name="group">
            Group is the group of the object being referenced.
            </param>
            <param name="name">
            Name is the name of the object being referenced.
            </param>
            <param name="namespaceProperty">
            Namespace is the namespace of the object being referenced.
            </param>
            <param name="resource">
            Resource is the resource of the object being referenced.
            </param>
            <param name="uid">
            UID is the uid of the object being referenced.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha1ParentReference.Group">
            <summary>
            Group is the group of the object being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParentReference.Name">
            <summary>
            Name is the name of the object being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParentReference.NamespaceProperty">
            <summary>
            Namespace is the namespace of the object being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParentReference.Resource">
            <summary>
            Resource is the resource of the object being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha1ParentReference.Uid">
            <summary>
            UID is the uid of the object being referenced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha1ParentReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Overhead">
            <summary>
            Overhead structure represents the resource overhead associated with running a
            pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Overhead.#ctor">
            <summary>
            Initializes a new instance of the V1Overhead class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Overhead.#ctor(System.Collections.Generic.IDictionary{System.String,k8s.Models.ResourceQuantity})">
            <summary>
            Initializes a new instance of the V1Overhead class.
            </summary>
            <param name="podFixed">
            podFixed represents the fixed resource overhead associated with running a pod.
            </param>
        </member>
        <member name="P:k8s.Models.V1Overhead.PodFixed">
            <summary>
            podFixed represents the fixed resource overhead associated with running a pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Overhead.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RuntimeClass">
            <summary>
            RuntimeClass defines a class of container runtime supported in the cluster. The
            RuntimeClass is used to determine which container runtime is used to run all
            containers in a pod. RuntimeClasses are manually defined by a user or cluster
            provisioner, and referenced in the PodSpec. The Kubelet is responsible for
            resolving the RuntimeClassName reference before running the pod.  For more
            details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuntimeClass.#ctor">
            <summary>
            Initializes a new instance of the V1RuntimeClass class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuntimeClass.#ctor(System.String,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1Overhead,k8s.Models.V1Scheduling)">
            <summary>
            Initializes a new instance of the V1RuntimeClass class.
            </summary>
            <param name="handler">
            handler specifies the underlying runtime and configuration that the CRI
            implementation will use to handle pods of this class. The possible values are
            specific to the node &amp; CRI configuration.  It is assumed that all handlers are
            available on every node, and handlers of the same name are equivalent on every
            node. For example, a handler called &quot;runc&quot; might specify that the runc OCI
            runtime (using native Linux containers) will be used to run the containers in a
            pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123)
            requirements, and is immutable.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="overhead">
            overhead represents the resource overhead associated with running a pod for a
            given RuntimeClass. For more details, see
            https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/
            </param>
            <param name="scheduling">
            scheduling holds the scheduling constraints to ensure that pods running with
            this RuntimeClass are scheduled to nodes that support it. If scheduling is nil,
            this RuntimeClass is assumed to be supported by all nodes.
            </param>
        </member>
        <member name="P:k8s.Models.V1RuntimeClass.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClass.Handler">
            <summary>
            handler specifies the underlying runtime and configuration that the CRI
            implementation will use to handle pods of this class. The possible values are
            specific to the node &amp; CRI configuration.  It is assumed that all handlers are
            available on every node, and handlers of the same name are equivalent on every
            node. For example, a handler called &quot;runc&quot; might specify that the runc OCI
            runtime (using native Linux containers) will be used to run the containers in a
            pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123)
            requirements, and is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClass.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClass.Metadata">
            <summary>
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClass.Overhead">
            <summary>
            overhead represents the resource overhead associated with running a pod for a
            given RuntimeClass. For more details, see
            https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClass.Scheduling">
            <summary>
            scheduling holds the scheduling constraints to ensure that pods running with
            this RuntimeClass are scheduled to nodes that support it. If scheduling is nil,
            this RuntimeClass is assumed to be supported by all nodes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuntimeClass.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RuntimeClassList">
            <summary>
            RuntimeClassList is a list of RuntimeClass objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuntimeClassList.#ctor">
            <summary>
            Initializes a new instance of the V1RuntimeClassList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuntimeClassList.#ctor(System.Collections.Generic.IList{k8s.Models.V1RuntimeClass},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1RuntimeClassList class.
            </summary>
            <param name="items">
            items is a list of schema objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1RuntimeClassList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClassList.Items">
            <summary>
            items is a list of schema objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClassList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1RuntimeClassList.Metadata">
            <summary>
            Standard list metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1RuntimeClassList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Scheduling">
            <summary>
            Scheduling specifies the scheduling constraints for nodes supporting a
            RuntimeClass.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Scheduling.#ctor">
            <summary>
            Initializes a new instance of the V1Scheduling class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Scheduling.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{k8s.Models.V1Toleration})">
            <summary>
            Initializes a new instance of the V1Scheduling class.
            </summary>
            <param name="nodeSelector">
            nodeSelector lists labels that must be present on nodes that support this
            RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node
            matched by this selector. The RuntimeClass nodeSelector is merged with a pod&apos;s
            existing nodeSelector. Any conflicts will cause the pod to be rejected in
            admission.
            </param>
            <param name="tolerations">
            tolerations are appended (excluding duplicates) to pods running with this
            RuntimeClass during admission, effectively unioning the set of nodes tolerated
            by the pod and the RuntimeClass.
            </param>
        </member>
        <member name="P:k8s.Models.V1Scheduling.NodeSelector">
            <summary>
            nodeSelector lists labels that must be present on nodes that support this
            RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node
            matched by this selector. The RuntimeClass nodeSelector is merged with a pod&apos;s
            existing nodeSelector. Any conflicts will cause the pod to be rejected in
            admission.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Scheduling.Tolerations">
            <summary>
            tolerations are appended (excluding duplicates) to pods running with this
            RuntimeClass during admission, effectively unioning the set of nodes tolerated
            by the pod and the RuntimeClass.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Scheduling.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Eviction">
            <summary>
            Eviction evicts a pod from its node subject to certain policies and safety
            constraints. This is a subresource of Pod.  A request to cause such an eviction
            is created by POSTing to .../pods/&lt;pod name&gt;/evictions.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Eviction.#ctor">
            <summary>
            Initializes a new instance of the V1Eviction class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Eviction.#ctor(System.String,k8s.Models.V1DeleteOptions,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1Eviction class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="deleteOptions">
            DeleteOptions may be provided
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            ObjectMeta describes the pod that is being evicted.
            </param>
        </member>
        <member name="P:k8s.Models.V1Eviction.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Eviction.DeleteOptions">
            <summary>
            DeleteOptions may be provided
            </summary>
        </member>
        <member name="P:k8s.Models.V1Eviction.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Eviction.Metadata">
            <summary>
            ObjectMeta describes the pod that is being evicted.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Eviction.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodDisruptionBudget">
            <summary>
            PodDisruptionBudget is an object to define the max disruption that can be caused
            to a collection of pods
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudget.#ctor">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudget class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudget.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1PodDisruptionBudgetSpec,k8s.Models.V1PodDisruptionBudgetStatus)">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudget class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Specification of the desired behavior of the PodDisruptionBudget.
            </param>
            <param name="status">
            Most recently observed status of the PodDisruptionBudget.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudget.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudget.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudget.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudget.Spec">
            <summary>
            Specification of the desired behavior of the PodDisruptionBudget.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudget.Status">
            <summary>
            Most recently observed status of the PodDisruptionBudget.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudget.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodDisruptionBudgetList">
            <summary>
            PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetList.#ctor">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudgetList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetList.#ctor(System.Collections.Generic.IList{k8s.Models.V1PodDisruptionBudget},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudgetList class.
            </summary>
            <param name="items">
            Items is a list of PodDisruptionBudgets
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetList.Items">
            <summary>
            Items is a list of PodDisruptionBudgets
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetList.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodDisruptionBudgetSpec">
            <summary>
            PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetSpec.#ctor">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudgetSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetSpec.#ctor(k8s.Models.IntstrIntOrString,k8s.Models.IntstrIntOrString,k8s.Models.V1LabelSelector,System.String)">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudgetSpec class.
            </summary>
            <param name="maxUnavailable">
            An eviction is allowed if at most &quot;maxUnavailable&quot; pods selected by &quot;selector&quot;
            are unavailable after the eviction, i.e. even in absence of the evicted pod. For
            example, one can prevent all voluntary evictions by specifying 0. This is a
            mutually exclusive setting with &quot;minAvailable&quot;.
            </param>
            <param name="minAvailable">
            An eviction is allowed if at least &quot;minAvailable&quot; pods selected by &quot;selector&quot;
            will still be available after the eviction, i.e. even in the absence of the
            evicted pod.  So for example you can prevent all voluntary evictions by
            specifying &quot;100%&quot;.
            </param>
            <param name="selector">
            Label query over pods whose evictions are managed by the disruption budget. A
            null selector will match no pods, while an empty ({}) selector will select all
            pods within the namespace.
            </param>
            <param name="unhealthyPodEvictionPolicy">
            UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should
            be considered for eviction. Current implementation considers healthy pods, as
            pods that have status.conditions item with type=&quot;Ready&quot;,status=&quot;True&quot;.
            
            Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified,
            the default behavior will be used, which corresponds to the IfHealthyBudget
            policy.
            
            IfHealthyBudget policy means that running pods (status.phase=&quot;Running&quot;), but not
            yet healthy can be evicted only if the guarded application is not disrupted
            (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods
            will be subject to the PDB for eviction.
            
            AlwaysAllow policy means that all running pods (status.phase=&quot;Running&quot;), but not
            yet healthy are considered disrupted and can be evicted regardless of whether
            the criteria in a PDB is met. This means perspective running pods of a disrupted
            application might not get a chance to become healthy. Healthy pods will be
            subject to the PDB for eviction.
            
            Additional policies may be added in the future. Clients making eviction
            decisions should disallow eviction of unhealthy pods if they encounter an
            unrecognized policy in this field.
            
            This field is beta-level. The eviction API uses this field when the feature gate
            PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
            </param>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetSpec.MaxUnavailable">
            <summary>
            An eviction is allowed if at most &quot;maxUnavailable&quot; pods selected by &quot;selector&quot;
            are unavailable after the eviction, i.e. even in absence of the evicted pod. For
            example, one can prevent all voluntary evictions by specifying 0. This is a
            mutually exclusive setting with &quot;minAvailable&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetSpec.MinAvailable">
            <summary>
            An eviction is allowed if at least &quot;minAvailable&quot; pods selected by &quot;selector&quot;
            will still be available after the eviction, i.e. even in the absence of the
            evicted pod.  So for example you can prevent all voluntary evictions by
            specifying &quot;100%&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetSpec.Selector">
            <summary>
            Label query over pods whose evictions are managed by the disruption budget. A
            null selector will match no pods, while an empty ({}) selector will select all
            pods within the namespace.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetSpec.UnhealthyPodEvictionPolicy">
            <summary>
            UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should
            be considered for eviction. Current implementation considers healthy pods, as
            pods that have status.conditions item with type=&quot;Ready&quot;,status=&quot;True&quot;.
            
            Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified,
            the default behavior will be used, which corresponds to the IfHealthyBudget
            policy.
            
            IfHealthyBudget policy means that running pods (status.phase=&quot;Running&quot;), but not
            yet healthy can be evicted only if the guarded application is not disrupted
            (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods
            will be subject to the PDB for eviction.
            
            AlwaysAllow policy means that all running pods (status.phase=&quot;Running&quot;), but not
            yet healthy are considered disrupted and can be evicted regardless of whether
            the criteria in a PDB is met. This means perspective running pods of a disrupted
            application might not get a chance to become healthy. Healthy pods will be
            subject to the PDB for eviction.
            
            Additional policies may be added in the future. Clients making eviction
            decisions should disallow eviction of unhealthy pods if they encounter an
            unrecognized policy in this field.
            
            This field is beta-level. The eviction API uses this field when the feature gate
            PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PodDisruptionBudgetStatus">
            <summary>
            PodDisruptionBudgetStatus represents information about the status of a
            PodDisruptionBudget. Status may trail the actual state of a system.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetStatus.#ctor">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudgetStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetStatus.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{k8s.Models.V1Condition},System.Collections.Generic.IDictionary{System.String,System.Nullable{System.DateTime}},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V1PodDisruptionBudgetStatus class.
            </summary>
            <param name="currentHealthy">
            current number of healthy pods
            </param>
            <param name="desiredHealthy">
            minimum desired number of healthy pods
            </param>
            <param name="disruptionsAllowed">
            Number of pod disruptions that are currently allowed.
            </param>
            <param name="expectedPods">
            total number of pods counted by this disruption budget
            </param>
            <param name="conditions">
            Conditions contain conditions for PDB. The disruption controller sets the
            DisruptionAllowed condition. The following are known values for the reason field
            (additional reasons could be added in the future): - SyncFailed: The controller
            encountered an error and wasn&apos;t able to compute
            the number of allowed disruptions. Therefore no disruptions are
            allowed and the status of the condition will be False.
            - InsufficientPods: The number of pods are either at or below the number
            required by the PodDisruptionBudget. No disruptions are
            allowed and the status of the condition will be False.
            - SufficientPods: There are more pods than required by the PodDisruptionBudget.
            The condition will be True, and the number of allowed
            disruptions are provided by the disruptionsAllowed property.
            </param>
            <param name="disruptedPods">
            DisruptedPods contains information about pods whose eviction was processed by
            the API server eviction subresource handler but has not yet been observed by the
            PodDisruptionBudget controller. A pod will be in this map from the time when the
            API server processed the eviction request to the time when the pod is seen by
            PDB controller as having been marked for deletion (or after a timeout). The key
            in the map is the name of the pod and the value is the time when the API server
            processed the eviction request. If the deletion didn&apos;t occur and a pod is still
            there it will be removed from the list automatically by PodDisruptionBudget
            controller after some time. If everything goes smooth this map should be empty
            for the most of the time. Large number of entries in the map may indicate
            problems with pod deletions.
            </param>
            <param name="observedGeneration">
            Most recent generation observed when updating this PDB status.
            DisruptionsAllowed and other status information is valid only if
            observedGeneration equals to PDB&apos;s object generation.
            </param>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetStatus.Conditions">
            <summary>
            Conditions contain conditions for PDB. The disruption controller sets the
            DisruptionAllowed condition. The following are known values for the reason field
            (additional reasons could be added in the future): - SyncFailed: The controller
            encountered an error and wasn&apos;t able to compute
            the number of allowed disruptions. Therefore no disruptions are
            allowed and the status of the condition will be False.
            - InsufficientPods: The number of pods are either at or below the number
            required by the PodDisruptionBudget. No disruptions are
            allowed and the status of the condition will be False.
            - SufficientPods: There are more pods than required by the PodDisruptionBudget.
            The condition will be True, and the number of allowed
            disruptions are provided by the disruptionsAllowed property.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetStatus.CurrentHealthy">
            <summary>
            current number of healthy pods
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetStatus.DesiredHealthy">
            <summary>
            minimum desired number of healthy pods
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetStatus.DisruptedPods">
            <summary>
            DisruptedPods contains information about pods whose eviction was processed by
            the API server eviction subresource handler but has not yet been observed by the
            PodDisruptionBudget controller. A pod will be in this map from the time when the
            API server processed the eviction request to the time when the pod is seen by
            PDB controller as having been marked for deletion (or after a timeout). The key
            in the map is the name of the pod and the value is the time when the API server
            processed the eviction request. If the deletion didn&apos;t occur and a pod is still
            there it will be removed from the list automatically by PodDisruptionBudget
            controller after some time. If everything goes smooth this map should be empty
            for the most of the time. Large number of entries in the map may indicate
            problems with pod deletions.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetStatus.DisruptionsAllowed">
            <summary>
            Number of pod disruptions that are currently allowed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetStatus.ExpectedPods">
            <summary>
            total number of pods counted by this disruption budget
            </summary>
        </member>
        <member name="P:k8s.Models.V1PodDisruptionBudgetStatus.ObservedGeneration">
            <summary>
            Most recent generation observed when updating this PDB status.
            DisruptionsAllowed and other status information is valid only if
            observedGeneration equals to PDB&apos;s object generation.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PodDisruptionBudgetStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1AggregationRule">
            <summary>
            AggregationRule describes how to locate ClusterRoles to aggregate into the
            ClusterRole
            </summary>
        </member>
        <member name="M:k8s.Models.V1AggregationRule.#ctor">
            <summary>
            Initializes a new instance of the V1AggregationRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1AggregationRule.#ctor(System.Collections.Generic.IList{k8s.Models.V1LabelSelector})">
            <summary>
            Initializes a new instance of the V1AggregationRule class.
            </summary>
            <param name="clusterRoleSelectors">
            ClusterRoleSelectors holds a list of selectors which will be used to find
            ClusterRoles and create the rules. If any of the selectors match, then the
            ClusterRole&apos;s permissions will be added
            </param>
        </member>
        <member name="P:k8s.Models.V1AggregationRule.ClusterRoleSelectors">
            <summary>
            ClusterRoleSelectors holds a list of selectors which will be used to find
            ClusterRoles and create the rules. If any of the selectors match, then the
            ClusterRole&apos;s permissions will be added
            </summary>
        </member>
        <member name="M:k8s.Models.V1AggregationRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ClusterRole">
            <summary>
            ClusterRole is a cluster level, logical grouping of PolicyRules that can be
            referenced as a unit by a RoleBinding or ClusterRoleBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRole.#ctor">
            <summary>
            Initializes a new instance of the V1ClusterRole class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRole.#ctor(k8s.Models.V1AggregationRule,System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1PolicyRule})">
            <summary>
            Initializes a new instance of the V1ClusterRole class.
            </summary>
            <param name="aggregationRule">
            AggregationRule is an optional field that describes how to build the Rules for
            this ClusterRole. If AggregationRule is set, then the Rules are controller
            managed and direct changes to Rules will be stomped by the controller.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
            <param name="rules">
            Rules holds all the PolicyRules for this ClusterRole
            </param>
        </member>
        <member name="P:k8s.Models.V1ClusterRole.AggregationRule">
            <summary>
            AggregationRule is an optional field that describes how to build the Rules for
            this ClusterRole. If AggregationRule is set, then the Rules are controller
            managed and direct changes to Rules will be stomped by the controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRole.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRole.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRole.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRole.Rules">
            <summary>
            Rules holds all the PolicyRules for this ClusterRole
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRole.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ClusterRoleBinding">
            <summary>
            ClusterRoleBinding references a ClusterRole, but not contain it.  It can
            reference a ClusterRole in the global namespace, and adds who information via
            Subject.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleBinding.#ctor">
            <summary>
            Initializes a new instance of the V1ClusterRoleBinding class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleBinding.#ctor(k8s.Models.V1RoleRef,System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1Subject})">
            <summary>
            Initializes a new instance of the V1ClusterRoleBinding class.
            </summary>
            <param name="roleRef">
            RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef
            cannot be resolved, the Authorizer must return an error. This field is
            immutable.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
            <param name="subjects">
            Subjects holds references to the objects the role applies to.
            </param>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBinding.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBinding.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBinding.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBinding.RoleRef">
            <summary>
            RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef
            cannot be resolved, the Authorizer must return an error. This field is
            immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBinding.Subjects">
            <summary>
            Subjects holds references to the objects the role applies to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleBinding.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ClusterRoleBindingList">
            <summary>
            ClusterRoleBindingList is a collection of ClusterRoleBindings
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleBindingList.#ctor">
            <summary>
            Initializes a new instance of the V1ClusterRoleBindingList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleBindingList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ClusterRoleBinding},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ClusterRoleBindingList class.
            </summary>
            <param name="items">
            Items is a list of ClusterRoleBindings
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBindingList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBindingList.Items">
            <summary>
            Items is a list of ClusterRoleBindings
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBindingList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleBindingList.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleBindingList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ClusterRoleList">
            <summary>
            ClusterRoleList is a collection of ClusterRoles
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleList.#ctor">
            <summary>
            Initializes a new instance of the V1ClusterRoleList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleList.#ctor(System.Collections.Generic.IList{k8s.Models.V1ClusterRole},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1ClusterRoleList class.
            </summary>
            <param name="items">
            Items is a list of ClusterRoles
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleList.Items">
            <summary>
            Items is a list of ClusterRoles
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1ClusterRoleList.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ClusterRoleList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PolicyRule">
            <summary>
            PolicyRule holds information that describes a policy rule, but does not contain
            information about who the rule applies to or which namespace the rule applies
            to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PolicyRule.#ctor">
            <summary>
            Initializes a new instance of the V1PolicyRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PolicyRule.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1PolicyRule class.
            </summary>
            <param name="verbs">
            Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this
            rule. &apos;*&apos; represents all verbs.
            </param>
            <param name="apiGroups">
            APIGroups is the name of the APIGroup that contains the resources.  If multiple
            API groups are specified, any action requested against one of the enumerated
            resources in any API group will be allowed. &quot;&quot; represents the core API group and
            &quot;*&quot; represents all API groups.
            </param>
            <param name="nonResourceURLs">
            NonResourceURLs is a set of partial urls that a user should have access to.  *s
            are allowed, but only as the full, final step in the path Since non-resource
            URLs are not namespaced, this field is only applicable for ClusterRoles
            referenced from a ClusterRoleBinding. Rules can either apply to API resources
            (such as &quot;pods&quot; or &quot;secrets&quot;) or non-resource URL paths (such as &quot;/api&quot;),  but
            not both.
            </param>
            <param name="resourceNames">
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.
            </param>
            <param name="resources">
            Resources is a list of resources this rule applies to. &apos;*&apos; represents all
            resources.
            </param>
        </member>
        <member name="P:k8s.Models.V1PolicyRule.ApiGroups">
            <summary>
            APIGroups is the name of the APIGroup that contains the resources.  If multiple
            API groups are specified, any action requested against one of the enumerated
            resources in any API group will be allowed. &quot;&quot; represents the core API group and
            &quot;*&quot; represents all API groups.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PolicyRule.NonResourceURLs">
            <summary>
            NonResourceURLs is a set of partial urls that a user should have access to.  *s
            are allowed, but only as the full, final step in the path Since non-resource
            URLs are not namespaced, this field is only applicable for ClusterRoles
            referenced from a ClusterRoleBinding. Rules can either apply to API resources
            (such as &quot;pods&quot; or &quot;secrets&quot;) or non-resource URL paths (such as &quot;/api&quot;),  but
            not both.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PolicyRule.ResourceNames">
            <summary>
            ResourceNames is an optional white list of names that the rule applies to.  An
            empty set means that everything is allowed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PolicyRule.Resources">
            <summary>
            Resources is a list of resources this rule applies to. &apos;*&apos; represents all
            resources.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PolicyRule.Verbs">
            <summary>
            Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this
            rule. &apos;*&apos; represents all verbs.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PolicyRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Role">
            <summary>
            Role is a namespaced, logical grouping of PolicyRules that can be referenced as
            a unit by a RoleBinding.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Role.#ctor">
            <summary>
            Initializes a new instance of the V1Role class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Role.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1PolicyRule})">
            <summary>
            Initializes a new instance of the V1Role class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
            <param name="rules">
            Rules holds all the PolicyRules for this Role
            </param>
        </member>
        <member name="P:k8s.Models.V1Role.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1Role.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1Role.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Role.Rules">
            <summary>
            Rules holds all the PolicyRules for this Role
            </summary>
        </member>
        <member name="M:k8s.Models.V1Role.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RoleBinding">
            <summary>
            RoleBinding references a role, but does not contain it.  It can reference a Role
            in the same namespace or a ClusterRole in the global namespace. It adds who
            information via Subjects and namespace information by which namespace it exists
            in.  RoleBindings in a given namespace only have effect in that namespace.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleBinding.#ctor">
            <summary>
            Initializes a new instance of the V1RoleBinding class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleBinding.#ctor(k8s.Models.V1RoleRef,System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{k8s.Models.V1Subject})">
            <summary>
            Initializes a new instance of the V1RoleBinding class.
            </summary>
            <param name="roleRef">
            RoleRef can reference a Role in the current namespace or a ClusterRole in the
            global namespace. If the RoleRef cannot be resolved, the Authorizer must return
            an error. This field is immutable.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
            <param name="subjects">
            Subjects holds references to the objects the role applies to.
            </param>
        </member>
        <member name="P:k8s.Models.V1RoleBinding.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleBinding.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleBinding.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleBinding.RoleRef">
            <summary>
            RoleRef can reference a Role in the current namespace or a ClusterRole in the
            global namespace. If the RoleRef cannot be resolved, the Authorizer must return
            an error. This field is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleBinding.Subjects">
            <summary>
            Subjects holds references to the objects the role applies to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleBinding.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RoleBindingList">
            <summary>
            RoleBindingList is a collection of RoleBindings
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleBindingList.#ctor">
            <summary>
            Initializes a new instance of the V1RoleBindingList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleBindingList.#ctor(System.Collections.Generic.IList{k8s.Models.V1RoleBinding},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1RoleBindingList class.
            </summary>
            <param name="items">
            Items is a list of RoleBindings
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1RoleBindingList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleBindingList.Items">
            <summary>
            Items is a list of RoleBindings
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleBindingList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleBindingList.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleBindingList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RoleList">
            <summary>
            RoleList is a collection of Roles
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleList.#ctor">
            <summary>
            Initializes a new instance of the V1RoleList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleList.#ctor(System.Collections.Generic.IList{k8s.Models.V1Role},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1RoleList class.
            </summary>
            <param name="items">
            Items is a list of Roles
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata.
            </param>
        </member>
        <member name="P:k8s.Models.V1RoleList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleList.Items">
            <summary>
            Items is a list of Roles
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleList.Metadata">
            <summary>
            Standard object&apos;s metadata.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1RoleRef">
            <summary>
            RoleRef contains information that points to the role being used
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleRef.#ctor">
            <summary>
            Initializes a new instance of the V1RoleRef class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleRef.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1RoleRef class.
            </summary>
            <param name="apiGroup">
            APIGroup is the group for the resource being referenced
            </param>
            <param name="kind">
            Kind is the type of resource being referenced
            </param>
            <param name="name">
            Name is the name of resource being referenced
            </param>
        </member>
        <member name="P:k8s.Models.V1RoleRef.ApiGroup">
            <summary>
            APIGroup is the group for the resource being referenced
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleRef.Kind">
            <summary>
            Kind is the type of resource being referenced
            </summary>
        </member>
        <member name="P:k8s.Models.V1RoleRef.Name">
            <summary>
            Name is the name of resource being referenced
            </summary>
        </member>
        <member name="M:k8s.Models.V1RoleRef.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Subject">
            <summary>
            Subject contains a reference to the object or user identities a role binding
            applies to.  This can either hold a direct API object reference, or a value for
            non-objects such as user and group names.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Subject.#ctor">
            <summary>
            Initializes a new instance of the V1Subject class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Subject.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1Subject class.
            </summary>
            <param name="kind">
            Kind of object being referenced. Values defined by this API group are &quot;User&quot;,
            &quot;Group&quot;, and &quot;ServiceAccount&quot;. If the Authorizer does not recognized the kind
            value, the Authorizer should report an error.
            </param>
            <param name="name">
            Name of the object being referenced.
            </param>
            <param name="apiGroup">
            APIGroup holds the API group of the referenced subject. Defaults to &quot;&quot; for
            ServiceAccount subjects. Defaults to &quot;rbac.authorization.k8s.io&quot; for User and
            Group subjects.
            </param>
            <param name="namespaceProperty">
            Namespace of the referenced object.  If the object kind is non-namespace, such
            as &quot;User&quot; or &quot;Group&quot;, and this value is not empty the Authorizer should report
            an error.
            </param>
        </member>
        <member name="P:k8s.Models.V1Subject.ApiGroup">
            <summary>
            APIGroup holds the API group of the referenced subject. Defaults to &quot;&quot; for
            ServiceAccount subjects. Defaults to &quot;rbac.authorization.k8s.io&quot; for User and
            Group subjects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Subject.Kind">
            <summary>
            Kind of object being referenced. Values defined by this API group are &quot;User&quot;,
            &quot;Group&quot;, and &quot;ServiceAccount&quot;. If the Authorizer does not recognized the kind
            value, the Authorizer should report an error.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Subject.Name">
            <summary>
            Name of the object being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Subject.NamespaceProperty">
            <summary>
            Namespace of the referenced object.  If the object kind is non-namespace, such
            as &quot;User&quot; or &quot;Group&quot;, and this value is not empty the Authorizer should report
            an error.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Subject.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2AllocationResult">
            <summary>
            AllocationResult contains attributes of an allocated resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2AllocationResult.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2AllocationResult class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2AllocationResult.#ctor(k8s.Models.V1NodeSelector,System.Collections.Generic.IList{k8s.Models.V1alpha2ResourceHandle},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1alpha2AllocationResult class.
            </summary>
            <param name="availableOnNodes">
            This field will get set by the resource driver after it has allocated the
            resource to inform the scheduler where it can schedule Pods using the
            ResourceClaim.
            
            Setting this field is optional. If null, the resource is available everywhere.
            </param>
            <param name="resourceHandles">
            ResourceHandles contain the state associated with an allocation that should be
            maintained throughout the lifetime of a claim. Each ResourceHandle contains data
            that should be passed to a specific kubelet plugin once it lands on a node. This
            data is returned by the driver after a successful allocation and is opaque to
            Kubernetes. Driver documentation may explain to users how to interpret this data
            if needed.
            
            Setting this field is optional. It has a maximum size of 32 entries. If null (or
            empty), it is assumed this allocation will be processed by a single kubelet
            plugin with no ResourceHandle data attached. The name of the kubelet plugin
            invoked will match the DriverName set in the ResourceClaimStatus this
            AllocationResult is embedded in.
            </param>
            <param name="shareable">
            Shareable determines whether the resource supports more than one consumer at a
            time.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2AllocationResult.AvailableOnNodes">
            <summary>
            This field will get set by the resource driver after it has allocated the
            resource to inform the scheduler where it can schedule Pods using the
            ResourceClaim.
            
            Setting this field is optional. If null, the resource is available everywhere.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2AllocationResult.ResourceHandles">
            <summary>
            ResourceHandles contain the state associated with an allocation that should be
            maintained throughout the lifetime of a claim. Each ResourceHandle contains data
            that should be passed to a specific kubelet plugin once it lands on a node. This
            data is returned by the driver after a successful allocation and is opaque to
            Kubernetes. Driver documentation may explain to users how to interpret this data
            if needed.
            
            Setting this field is optional. It has a maximum size of 32 entries. If null (or
            empty), it is assumed this allocation will be processed by a single kubelet
            plugin with no ResourceHandle data attached. The name of the kubelet plugin
            invoked will match the DriverName set in the ResourceClaimStatus this
            AllocationResult is embedded in.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2AllocationResult.Shareable">
            <summary>
            Shareable determines whether the resource supports more than one consumer at a
            time.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2AllocationResult.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2PodSchedulingContext">
            <summary>
            PodSchedulingContext objects hold information that is needed to schedule a Pod
            with ResourceClaims that use &quot;WaitForFirstConsumer&quot; allocation mode.
            
            This is an alpha type and requires enabling the DynamicResourceAllocation
            feature gate.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContext.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContext class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContext.#ctor(k8s.Models.V1alpha2PodSchedulingContextSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha2PodSchedulingContextStatus)">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContext class.
            </summary>
            <param name="spec">
            Spec describes where resources for the Pod are needed.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata
            </param>
            <param name="status">
            Status describes where resources for the Pod can be allocated.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContext.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContext.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContext.Metadata">
            <summary>
            Standard object metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContext.Spec">
            <summary>
            Spec describes where resources for the Pod are needed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContext.Status">
            <summary>
            Status describes where resources for the Pod can be allocated.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContext.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2PodSchedulingContextList">
            <summary>
            PodSchedulingContextList is a collection of Pod scheduling objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContextList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha2PodSchedulingContext},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContextList class.
            </summary>
            <param name="items">
            Items is the list of PodSchedulingContext objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContextList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContextList.Items">
            <summary>
            Items is the list of PodSchedulingContext objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContextList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContextList.Metadata">
            <summary>
            Standard list metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2PodSchedulingContextSpec">
            <summary>
            PodSchedulingContextSpec describes where resources for the Pod are needed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextSpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContextSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextSpec.#ctor(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContextSpec class.
            </summary>
            <param name="potentialNodes">
            PotentialNodes lists nodes where the Pod might be able to run.
            
            The size of this field is limited to 128. This is large enough for many
            clusters. Larger clusters may need more attempts to find a node that suits all
            pending resources. This may get increased in the future, but not reduced.
            </param>
            <param name="selectedNode">
            SelectedNode is the node for which allocation of ResourceClaims that are
            referenced by the Pod and that use &quot;WaitForFirstConsumer&quot; allocation is to be
            attempted.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContextSpec.PotentialNodes">
            <summary>
            PotentialNodes lists nodes where the Pod might be able to run.
            
            The size of this field is limited to 128. This is large enough for many
            clusters. Larger clusters may need more attempts to find a node that suits all
            pending resources. This may get increased in the future, but not reduced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContextSpec.SelectedNode">
            <summary>
            SelectedNode is the node for which allocation of ResourceClaims that are
            referenced by the Pod and that use &quot;WaitForFirstConsumer&quot; allocation is to be
            attempted.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2PodSchedulingContextStatus">
            <summary>
            PodSchedulingContextStatus describes where resources for the Pod can be
            allocated.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextStatus.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContextStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha2ResourceClaimSchedulingStatus})">
            <summary>
            Initializes a new instance of the V1alpha2PodSchedulingContextStatus class.
            </summary>
            <param name="resourceClaims">
            ResourceClaims describes resource availability for each pod.spec.resourceClaim
            entry where the corresponding ResourceClaim uses &quot;WaitForFirstConsumer&quot;
            allocation mode.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2PodSchedulingContextStatus.ResourceClaims">
            <summary>
            ResourceClaims describes resource availability for each pod.spec.resourceClaim
            entry where the corresponding ResourceClaim uses &quot;WaitForFirstConsumer&quot;
            allocation mode.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2PodSchedulingContextStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaim">
            <summary>
            ResourceClaim describes which resources are needed by a resource consumer. Its
            status tracks whether the resource has been allocated and what the resulting
            attributes are.
            
            This is an alpha type and requires enabling the DynamicResourceAllocation
            feature gate.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaim.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaim class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaim.#ctor(k8s.Models.V1alpha2ResourceClaimSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha2ResourceClaimStatus)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaim class.
            </summary>
            <param name="spec">
            Spec describes the desired attributes of a resource that then needs to be
            allocated. It can only be set once when creating the ResourceClaim.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata
            </param>
            <param name="status">
            Status describes whether the resource is available and with which attributes.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaim.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaim.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaim.Metadata">
            <summary>
            Standard object metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaim.Spec">
            <summary>
            Spec describes the desired attributes of a resource that then needs to be
            allocated. It can only be set once when creating the ResourceClaim.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaim.Status">
            <summary>
            Status describes whether the resource is available and with which attributes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaim.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimConsumerReference">
            <summary>
            ResourceClaimConsumerReference contains enough information to let you locate the
            consumer of a ResourceClaim. The user must be a resource in the same namespace
            as the ResourceClaim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimConsumerReference.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimConsumerReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimConsumerReference.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimConsumerReference class.
            </summary>
            <param name="name">
            Name is the name of resource being referenced.
            </param>
            <param name="resource">
            Resource is the type of resource being referenced, for example &quot;pods&quot;.
            </param>
            <param name="uid">
            UID identifies exactly one incarnation of the resource.
            </param>
            <param name="apiGroup">
            APIGroup is the group for the resource being referenced. It is empty for the
            core API. This matches the group in the APIVersion that is used when creating
            the resources.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimConsumerReference.ApiGroup">
            <summary>
            APIGroup is the group for the resource being referenced. It is empty for the
            core API. This matches the group in the APIVersion that is used when creating
            the resources.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimConsumerReference.Name">
            <summary>
            Name is the name of resource being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimConsumerReference.Resource">
            <summary>
            Resource is the type of resource being referenced, for example &quot;pods&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimConsumerReference.Uid">
            <summary>
            UID identifies exactly one incarnation of the resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimConsumerReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimList">
            <summary>
            ResourceClaimList is a collection of claims.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha2ResourceClaim},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimList class.
            </summary>
            <param name="items">
            Items is the list of resource claims.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimList.Items">
            <summary>
            Items is the list of resource claims.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimList.Metadata">
            <summary>
            Standard list metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimParametersReference">
            <summary>
            ResourceClaimParametersReference contains enough information to let you locate
            the parameters for a ResourceClaim. The object must be in the same namespace as
            the ResourceClaim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimParametersReference.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimParametersReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimParametersReference.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimParametersReference class.
            </summary>
            <param name="kind">
            Kind is the type of resource being referenced. This is the same value as in the
            parameter object&apos;s metadata, for example &quot;ConfigMap&quot;.
            </param>
            <param name="name">
            Name is the name of resource being referenced.
            </param>
            <param name="apiGroup">
            APIGroup is the group for the resource being referenced. It is empty for the
            core API. This matches the group in the APIVersion that is used when creating
            the resources.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimParametersReference.ApiGroup">
            <summary>
            APIGroup is the group for the resource being referenced. It is empty for the
            core API. This matches the group in the APIVersion that is used when creating
            the resources.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimParametersReference.Kind">
            <summary>
            Kind is the type of resource being referenced. This is the same value as in the
            parameter object&apos;s metadata, for example &quot;ConfigMap&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimParametersReference.Name">
            <summary>
            Name is the name of resource being referenced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimParametersReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimSchedulingStatus">
            <summary>
            ResourceClaimSchedulingStatus contains information about one particular
            ResourceClaim with &quot;WaitForFirstConsumer&quot; allocation mode.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimSchedulingStatus.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimSchedulingStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimSchedulingStatus.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimSchedulingStatus class.
            </summary>
            <param name="name">
            Name matches the pod.spec.resourceClaims[*].Name field.
            </param>
            <param name="unsuitableNodes">
            UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
            
            The size of this field is limited to 128, the same as for
            PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not
            reduced.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimSchedulingStatus.Name">
            <summary>
            Name matches the pod.spec.resourceClaims[*].Name field.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimSchedulingStatus.UnsuitableNodes">
            <summary>
            UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
            
            The size of this field is limited to 128, the same as for
            PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not
            reduced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimSchedulingStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimSpec">
            <summary>
            ResourceClaimSpec defines how a resource is to be allocated.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimSpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimSpec.#ctor(System.String,System.String,k8s.Models.V1alpha2ResourceClaimParametersReference)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimSpec class.
            </summary>
            <param name="resourceClassName">
            ResourceClassName references the driver and additional parameters via the name
            of a ResourceClass that was created as part of the driver deployment.
            </param>
            <param name="allocationMode">
            Allocation can start immediately or when a Pod wants to use the resource.
            &quot;WaitForFirstConsumer&quot; is the default.
            </param>
            <param name="parametersRef">
            ParametersRef references a separate object with arbitrary parameters that will
            be used by the driver when allocating a resource for the claim.
            
            The object must be in the same namespace as the ResourceClaim.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimSpec.AllocationMode">
            <summary>
            Allocation can start immediately or when a Pod wants to use the resource.
            &quot;WaitForFirstConsumer&quot; is the default.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimSpec.ParametersRef">
            <summary>
            ParametersRef references a separate object with arbitrary parameters that will
            be used by the driver when allocating a resource for the claim.
            
            The object must be in the same namespace as the ResourceClaim.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimSpec.ResourceClassName">
            <summary>
            ResourceClassName references the driver and additional parameters via the name
            of a ResourceClass that was created as part of the driver deployment.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimStatus">
            <summary>
            ResourceClaimStatus tracks whether the resource has been allocated and what the
            resulting attributes are.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimStatus.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimStatus.#ctor(k8s.Models.V1alpha2AllocationResult,System.Nullable{System.Boolean},System.String,System.Collections.Generic.IList{k8s.Models.V1alpha2ResourceClaimConsumerReference})">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimStatus class.
            </summary>
            <param name="allocation">
            Allocation is set by the resource driver once a resource or set of resources has
            been allocated successfully. If this is not specified, the resources have not
            been allocated yet.
            </param>
            <param name="deallocationRequested">
            DeallocationRequested indicates that a ResourceClaim is to be deallocated.
            
            The driver then must deallocate this claim and reset the field together with
            clearing the Allocation field.
            
            While DeallocationRequested is set, no new consumers may be added to
            ReservedFor.
            </param>
            <param name="driverName">
            DriverName is a copy of the driver name from the ResourceClass at the time when
            allocation started.
            </param>
            <param name="reservedFor">
            ReservedFor indicates which entities are currently allowed to use the claim. A
            Pod which references a ResourceClaim which is not reserved for that Pod will not
            be started.
            
            There can be at most 32 such reservations. This may get increased in the future,
            but not reduced.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimStatus.Allocation">
            <summary>
            Allocation is set by the resource driver once a resource or set of resources has
            been allocated successfully. If this is not specified, the resources have not
            been allocated yet.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimStatus.DeallocationRequested">
            <summary>
            DeallocationRequested indicates that a ResourceClaim is to be deallocated.
            
            The driver then must deallocate this claim and reset the field together with
            clearing the Allocation field.
            
            While DeallocationRequested is set, no new consumers may be added to
            ReservedFor.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimStatus.DriverName">
            <summary>
            DriverName is a copy of the driver name from the ResourceClass at the time when
            allocation started.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimStatus.ReservedFor">
            <summary>
            ReservedFor indicates which entities are currently allowed to use the claim. A
            Pod which references a ResourceClaim which is not reserved for that Pod will not
            be started.
            
            There can be at most 32 such reservations. This may get increased in the future,
            but not reduced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimTemplate">
            <summary>
            ResourceClaimTemplate is used to produce ResourceClaim objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplate.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimTemplate class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplate.#ctor(k8s.Models.V1alpha2ResourceClaimTemplateSpec,System.String,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimTemplate class.
            </summary>
            <param name="spec">
            Describes the ResourceClaim that is to be generated.
            
            This field is immutable. A ResourceClaim will get created by the control plane
            for a Pod when needed and then not get updated anymore.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplate.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplate.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplate.Metadata">
            <summary>
            Standard object metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplate.Spec">
            <summary>
            Describes the ResourceClaim that is to be generated.
            
            This field is immutable. A ResourceClaim will get created by the control plane
            for a Pod when needed and then not get updated anymore.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimTemplateList">
            <summary>
            ResourceClaimTemplateList is a collection of claim templates.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplateList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimTemplateList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplateList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha2ResourceClaimTemplate},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimTemplateList class.
            </summary>
            <param name="items">
            Items is the list of resource claim templates.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplateList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplateList.Items">
            <summary>
            Items is the list of resource claim templates.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplateList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplateList.Metadata">
            <summary>
            Standard list metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplateList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClaimTemplateSpec">
            <summary>
            ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplateSpec.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimTemplateSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplateSpec.#ctor(k8s.Models.V1alpha2ResourceClaimSpec,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClaimTemplateSpec class.
            </summary>
            <param name="spec">
            Spec for the ResourceClaim. The entire content is copied unchanged into the
            ResourceClaim that gets created from this template. The same fields as in a
            ResourceClaim are also valid here.
            </param>
            <param name="metadata">
            ObjectMeta may contain labels and annotations that will be copied into the PVC
            when creating it. No other fields are allowed and will be rejected during
            validation.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplateSpec.Metadata">
            <summary>
            ObjectMeta may contain labels and annotations that will be copied into the PVC
            when creating it. No other fields are allowed and will be rejected during
            validation.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClaimTemplateSpec.Spec">
            <summary>
            Spec for the ResourceClaim. The entire content is copied unchanged into the
            ResourceClaim that gets created from this template. The same fields as in a
            ResourceClaim are also valid here.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClaimTemplateSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClass">
            <summary>
            ResourceClass is used by administrators to influence how resources are
            allocated.
            
            This is an alpha type and requires enabling the DynamicResourceAllocation
            feature gate.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClass.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClass class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClass.#ctor(System.String,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1alpha2ResourceClassParametersReference,k8s.Models.V1NodeSelector)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClass class.
            </summary>
            <param name="driverName">
            DriverName defines the name of the dynamic resource driver that is used for
            allocation of a ResourceClaim that uses this class.
            
            Resource drivers have a unique name in forward domain order (acme.example.com).
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata
            </param>
            <param name="parametersRef">
            ParametersRef references an arbitrary separate object that may hold parameters
            that will be used by the driver when allocating a resource that uses this class.
            A dynamic resource driver can distinguish between parameters stored here and and
            those stored in ResourceClaimSpec.
            </param>
            <param name="suitableNodes">
            Only nodes matching the selector will be considered by the scheduler when trying
            to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not
            been allocated yet.
            
            Setting this field is optional. If null, all nodes are candidates.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClass.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClass.DriverName">
            <summary>
            DriverName defines the name of the dynamic resource driver that is used for
            allocation of a ResourceClaim that uses this class.
            
            Resource drivers have a unique name in forward domain order (acme.example.com).
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClass.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClass.Metadata">
            <summary>
            Standard object metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClass.ParametersRef">
            <summary>
            ParametersRef references an arbitrary separate object that may hold parameters
            that will be used by the driver when allocating a resource that uses this class.
            A dynamic resource driver can distinguish between parameters stored here and and
            those stored in ResourceClaimSpec.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClass.SuitableNodes">
            <summary>
            Only nodes matching the selector will be considered by the scheduler when trying
            to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not
            been allocated yet.
            
            Setting this field is optional. If null, all nodes are candidates.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClass.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClassList">
            <summary>
            ResourceClassList is a collection of classes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClassList.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClassList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClassList.#ctor(System.Collections.Generic.IList{k8s.Models.V1alpha2ResourceClass},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClassList class.
            </summary>
            <param name="items">
            Items is the list of resource classes.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassList.Items">
            <summary>
            Items is the list of resource classes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassList.Metadata">
            <summary>
            Standard list metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClassList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceClassParametersReference">
            <summary>
            ResourceClassParametersReference contains enough information to let you locate
            the parameters for a ResourceClass.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClassParametersReference.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClassParametersReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClassParametersReference.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceClassParametersReference class.
            </summary>
            <param name="kind">
            Kind is the type of resource being referenced. This is the same value as in the
            parameter object&apos;s metadata.
            </param>
            <param name="name">
            Name is the name of resource being referenced.
            </param>
            <param name="apiGroup">
            APIGroup is the group for the resource being referenced. It is empty for the
            core API. This matches the group in the APIVersion that is used when creating
            the resources.
            </param>
            <param name="namespaceProperty">
            Namespace that contains the referenced resource. Must be empty for
            cluster-scoped resources and non-empty for namespaced resources.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassParametersReference.ApiGroup">
            <summary>
            APIGroup is the group for the resource being referenced. It is empty for the
            core API. This matches the group in the APIVersion that is used when creating
            the resources.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassParametersReference.Kind">
            <summary>
            Kind is the type of resource being referenced. This is the same value as in the
            parameter object&apos;s metadata.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassParametersReference.Name">
            <summary>
            Name is the name of resource being referenced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceClassParametersReference.NamespaceProperty">
            <summary>
            Namespace that contains the referenced resource. Must be empty for
            cluster-scoped resources and non-empty for namespaced resources.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceClassParametersReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1alpha2ResourceHandle">
            <summary>
            ResourceHandle holds opaque resource data for processing by a specific kubelet
            plugin.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceHandle.#ctor">
            <summary>
            Initializes a new instance of the V1alpha2ResourceHandle class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceHandle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1alpha2ResourceHandle class.
            </summary>
            <param name="data">
            Data contains the opaque data associated with this ResourceHandle. It is set by
            the controller component of the resource driver whose name matches the
            DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It
            is set at allocation time and is intended for processing by the kubelet plugin
            whose name matches the DriverName set in this ResourceHandle.
            
            The maximum size of this field is 16KiB. This may get increased in the future,
            but not reduced.
            </param>
            <param name="driverName">
            DriverName specifies the name of the resource driver whose kubelet plugin should
            be invoked to process this ResourceHandle&apos;s data once it lands on a node. This
            may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is
            embedded in.
            </param>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceHandle.Data">
            <summary>
            Data contains the opaque data associated with this ResourceHandle. It is set by
            the controller component of the resource driver whose name matches the
            DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It
            is set at allocation time and is intended for processing by the kubelet plugin
            whose name matches the DriverName set in this ResourceHandle.
            
            The maximum size of this field is 16KiB. This may get increased in the future,
            but not reduced.
            </summary>
        </member>
        <member name="P:k8s.Models.V1alpha2ResourceHandle.DriverName">
            <summary>
            DriverName specifies the name of the resource driver whose kubelet plugin should
            be invoked to process this ResourceHandle&apos;s data once it lands on a node. This
            may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is
            embedded in.
            </summary>
        </member>
        <member name="M:k8s.Models.V1alpha2ResourceHandle.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PriorityClass">
            <summary>
            PriorityClass defines mapping from a priority class name to the priority integer
            value. The value can be any valid integer.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PriorityClass.#ctor">
            <summary>
            Initializes a new instance of the V1PriorityClass class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PriorityClass.#ctor(System.Int32,System.String,System.String,System.Nullable{System.Boolean},System.String,k8s.Models.V1ObjectMeta,System.String)">
            <summary>
            Initializes a new instance of the V1PriorityClass class.
            </summary>
            <param name="value">
            value represents the integer value of this priority class. This is the actual
            priority that pods receive when they have the name of this class in their pod
            spec.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="description">
            description is an arbitrary string that usually provides guidelines on when this
            priority class should be used.
            </param>
            <param name="globalDefault">
            globalDefault specifies whether this PriorityClass should be considered as the
            default priority for pods that do not have any priority class. Only one
            PriorityClass can be marked as `globalDefault`. However, if more than one
            PriorityClasses exists with their `globalDefault` field set to true, the
            smallest value of such global default PriorityClasses will be used as the
            default priority.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="preemptionPolicy">
            preemptionPolicy is the Policy for preempting pods with lower priority. One of
            Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
            </param>
        </member>
        <member name="P:k8s.Models.V1PriorityClass.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClass.Description">
            <summary>
            description is an arbitrary string that usually provides guidelines on when this
            priority class should be used.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClass.GlobalDefault">
            <summary>
            globalDefault specifies whether this PriorityClass should be considered as the
            default priority for pods that do not have any priority class. Only one
            PriorityClass can be marked as `globalDefault`. However, if more than one
            PriorityClasses exists with their `globalDefault` field set to true, the
            smallest value of such global default PriorityClasses will be used as the
            default priority.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClass.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClass.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClass.PreemptionPolicy">
            <summary>
            preemptionPolicy is the Policy for preempting pods with lower priority. One of
            Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClass.Value">
            <summary>
            value represents the integer value of this priority class. This is the actual
            priority that pods receive when they have the name of this class in their pod
            spec.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PriorityClass.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1PriorityClassList">
            <summary>
            PriorityClassList is a collection of priority classes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PriorityClassList.#ctor">
            <summary>
            Initializes a new instance of the V1PriorityClassList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1PriorityClassList.#ctor(System.Collections.Generic.IList{k8s.Models.V1PriorityClass},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1PriorityClassList class.
            </summary>
            <param name="items">
            items is the list of PriorityClasses
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1PriorityClassList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClassList.Items">
            <summary>
            items is the list of PriorityClasses
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClassList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1PriorityClassList.Metadata">
            <summary>
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1PriorityClassList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSIDriver">
            <summary>
            CSIDriver captures information about a Container Storage Interface (CSI) volume
            driver deployed on the cluster. Kubernetes attach detach controller uses this
            object to determine whether attach is required. Kubelet uses this object to
            determine whether pod information needs to be passed on mount. CSIDriver objects
            are non-namespaced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriver.#ctor">
            <summary>
            Initializes a new instance of the V1CSIDriver class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriver.#ctor(k8s.Models.V1CSIDriverSpec,System.String,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1CSIDriver class.
            </summary>
            <param name="spec">
            spec represents the specification of the CSI Driver.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata. metadata.Name indicates the name of the CSI driver
            that this object refers to; it MUST be the same name returned by the CSI
            GetPluginName() call for that driver. The driver name must be 63 characters or
            less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with
            dashes (-), dots (.), and alphanumerics between. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1CSIDriver.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriver.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriver.Metadata">
            <summary>
            Standard object metadata. metadata.Name indicates the name of the CSI driver
            that this object refers to; it MUST be the same name returned by the CSI
            GetPluginName() call for that driver. The driver name must be 63 characters or
            less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with
            dashes (-), dots (.), and alphanumerics between. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriver.Spec">
            <summary>
            spec represents the specification of the CSI Driver.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriver.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSIDriverList">
            <summary>
            CSIDriverList is a collection of CSIDriver objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriverList.#ctor">
            <summary>
            Initializes a new instance of the V1CSIDriverList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriverList.#ctor(System.Collections.Generic.IList{k8s.Models.V1CSIDriver},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1CSIDriverList class.
            </summary>
            <param name="items">
            items is the list of CSIDriver
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1CSIDriverList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverList.Items">
            <summary>
            items is the list of CSIDriver
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverList.Metadata">
            <summary>
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriverList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSIDriverSpec">
            <summary>
            CSIDriverSpec is the specification of a CSIDriver.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriverSpec.#ctor">
            <summary>
            Initializes a new instance of the V1CSIDriverSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriverSpec.#ctor(System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.Storagev1TokenRequest},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1CSIDriverSpec class.
            </summary>
            <param name="attachRequired">
            attachRequired indicates this CSI volume driver requires an attach operation
            (because it implements the CSI ControllerPublishVolume() method), and that the
            Kubernetes attach detach controller should call the attach volume interface
            which checks the volumeattachment status and waits until the volume is attached
            before proceeding to mounting. The CSI external-attacher coordinates with CSI
            volume driver and updates the volumeattachment status when the attach operation
            is complete. If the CSIDriverRegistry feature gate is enabled and the value is
            specified to false, the attach operation will be skipped. Otherwise the attach
            operation will be called.
            
            This field is immutable.
            </param>
            <param name="fsGroupPolicy">
            fsGroupPolicy defines if the underlying volume supports changing ownership and
            permission of the volume before being mounted. Refer to the specific
            FSGroupPolicy values for additional details.
            
            This field is immutable.
            
            Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine
            if Kubernetes should modify ownership and permissions of the volume. With the
            default policy the defined fsGroup will only be applied if a fstype is defined
            and the volume&apos;s access mode contains ReadWriteOnce.
            </param>
            <param name="podInfoOnMount">
            podInfoOnMount indicates this CSI volume driver requires additional pod
            information (like podName, podUID, etc.) during mount operations, if set to
            true. If set to false, pod information will not be passed on mount. Default is
            false.
            
            The CSI driver specifies podInfoOnMount as part of driver deployment. If true,
            Kubelet will pass pod information as VolumeContext in the CSI
            NodePublishVolume() calls. The CSI driver is responsible for parsing and
            validating the information passed in as VolumeContext.
            
            The following VolumeConext will be passed if podInfoOnMount is set to true. This
            list might grow, but the prefix will be used. &quot;csi.storage.k8s.io/pod.name&quot;:
            pod.Name &quot;csi.storage.k8s.io/pod.namespace&quot;: pod.Namespace
            &quot;csi.storage.k8s.io/pod.uid&quot;: string(pod.UID) &quot;csi.storage.k8s.io/ephemeral&quot;:
            &quot;true&quot; if the volume is an ephemeral inline volume
            defined by a CSIVolumeSource, otherwise &quot;false&quot;
            
            &quot;csi.storage.k8s.io/ephemeral&quot; is a new feature in Kubernetes 1.16. It is only
            required for drivers which support both the &quot;Persistent&quot; and &quot;Ephemeral&quot;
            VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore
            this field. As Kubernetes 1.15 doesn&apos;t support this field, drivers can only
            support one mode when deployed on such a cluster and the deployment determines
            which mode that is, for example via a command line parameter of the driver.
            
            This field is immutable.
            </param>
            <param name="requiresRepublish">
            requiresRepublish indicates the CSI driver wants `NodePublishVolume` being
            periodically called to reflect any possible change in the mounted volume. This
            field defaults to false.
            
            Note: After a successful initial NodePublishVolume call, subsequent calls to
            NodePublishVolume should only update the contents of the volume. New mount
            points will not be seen by a running container.
            </param>
            <param name="seLinuxMount">
            seLinuxMount specifies if the CSI driver supports &quot;-o context&quot; mount option.
            
            When &quot;true&quot;, the CSI driver must ensure that all volumes provided by this CSI
            driver can be mounted separately with different `-o context` options. This is
            typical for storage backends that provide volumes as filesystems on block
            devices or as independent shared volumes. Kubernetes will call NodeStage /
            NodePublish with &quot;-o context=xyz&quot; mount option when mounting a ReadWriteOncePod
            volume used in Pod that has explicitly set SELinux context. In the future, it
            may be expanded to other volume AccessModes. In any case, Kubernetes will ensure
            that the volume is mounted only with a single SELinux context.
            
            When &quot;false&quot;, Kubernetes won&apos;t pass any special SELinux mount options to the
            driver. This is typical for volumes that represent subdirectories of a bigger
            shared filesystem.
            
            Default is &quot;false&quot;.
            </param>
            <param name="storageCapacity">
            storageCapacity indicates that the CSI volume driver wants pod scheduling to
            consider the storage capacity that the driver deployment will report by creating
            CSIStorageCapacity objects with capacity information, if set to true.
            
            The check can be enabled immediately when deploying a driver. In that case,
            provisioning new volumes with late binding will pause until the driver
            deployment has published some suitable CSIStorageCapacity object.
            
            Alternatively, the driver can be deployed with the field unset or false and it
            can be flipped later when storage capacity information has been published.
            
            This field was immutable in Kubernetes &lt;= 1.22 and now is mutable.
            </param>
            <param name="tokenRequests">
            tokenRequests indicates the CSI driver needs pods&apos; service account tokens it is
            mounting volume for to do necessary authentication. Kubelet will pass the tokens
            in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse
            and validate the following VolumeContext:
            &quot;csi.storage.k8s.io/serviceAccount.tokens&quot;: {
            &quot;&lt;audience&gt;&quot;: {
            &quot;token&quot;: &lt;token&gt;,
            &quot;expirationTimestamp&quot;: &lt;expiration timestamp in RFC3339&gt;,
            },
            ...
            }
            
            Note: Audience in each TokenRequest should be different and at most one token is
            empty string. To receive a new token after expiry, RequiresRepublish can be used
            to trigger NodePublishVolume periodically.
            </param>
            <param name="volumeLifecycleModes">
            volumeLifecycleModes defines what kind of volumes this CSI volume driver
            supports. The default if the list is empty is &quot;Persistent&quot;, which is the usage
            defined by the CSI specification and implemented in Kubernetes via the usual
            PV/PVC mechanism.
            
            The other mode is &quot;Ephemeral&quot;. In this mode, volumes are defined inline inside
            the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle
            of that pod. A driver has to be aware of this because it is only going to get a
            NodePublishVolume call for such a volume.
            
            For more information about implementing this mode, see
            https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can
            support one or more of these modes and more modes may be added in the future.
            
            This field is beta. This field is immutable.
            </param>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.AttachRequired">
            <summary>
            attachRequired indicates this CSI volume driver requires an attach operation
            (because it implements the CSI ControllerPublishVolume() method), and that the
            Kubernetes attach detach controller should call the attach volume interface
            which checks the volumeattachment status and waits until the volume is attached
            before proceeding to mounting. The CSI external-attacher coordinates with CSI
            volume driver and updates the volumeattachment status when the attach operation
            is complete. If the CSIDriverRegistry feature gate is enabled and the value is
            specified to false, the attach operation will be skipped. Otherwise the attach
            operation will be called.
            
            This field is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.FsGroupPolicy">
            <summary>
            fsGroupPolicy defines if the underlying volume supports changing ownership and
            permission of the volume before being mounted. Refer to the specific
            FSGroupPolicy values for additional details.
            
            This field is immutable.
            
            Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine
            if Kubernetes should modify ownership and permissions of the volume. With the
            default policy the defined fsGroup will only be applied if a fstype is defined
            and the volume&apos;s access mode contains ReadWriteOnce.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.PodInfoOnMount">
            <summary>
            podInfoOnMount indicates this CSI volume driver requires additional pod
            information (like podName, podUID, etc.) during mount operations, if set to
            true. If set to false, pod information will not be passed on mount. Default is
            false.
            
            The CSI driver specifies podInfoOnMount as part of driver deployment. If true,
            Kubelet will pass pod information as VolumeContext in the CSI
            NodePublishVolume() calls. The CSI driver is responsible for parsing and
            validating the information passed in as VolumeContext.
            
            The following VolumeConext will be passed if podInfoOnMount is set to true. This
            list might grow, but the prefix will be used. &quot;csi.storage.k8s.io/pod.name&quot;:
            pod.Name &quot;csi.storage.k8s.io/pod.namespace&quot;: pod.Namespace
            &quot;csi.storage.k8s.io/pod.uid&quot;: string(pod.UID) &quot;csi.storage.k8s.io/ephemeral&quot;:
            &quot;true&quot; if the volume is an ephemeral inline volume
            defined by a CSIVolumeSource, otherwise &quot;false&quot;
            
            &quot;csi.storage.k8s.io/ephemeral&quot; is a new feature in Kubernetes 1.16. It is only
            required for drivers which support both the &quot;Persistent&quot; and &quot;Ephemeral&quot;
            VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore
            this field. As Kubernetes 1.15 doesn&apos;t support this field, drivers can only
            support one mode when deployed on such a cluster and the deployment determines
            which mode that is, for example via a command line parameter of the driver.
            
            This field is immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.RequiresRepublish">
            <summary>
            requiresRepublish indicates the CSI driver wants `NodePublishVolume` being
            periodically called to reflect any possible change in the mounted volume. This
            field defaults to false.
            
            Note: After a successful initial NodePublishVolume call, subsequent calls to
            NodePublishVolume should only update the contents of the volume. New mount
            points will not be seen by a running container.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.SeLinuxMount">
            <summary>
            seLinuxMount specifies if the CSI driver supports &quot;-o context&quot; mount option.
            
            When &quot;true&quot;, the CSI driver must ensure that all volumes provided by this CSI
            driver can be mounted separately with different `-o context` options. This is
            typical for storage backends that provide volumes as filesystems on block
            devices or as independent shared volumes. Kubernetes will call NodeStage /
            NodePublish with &quot;-o context=xyz&quot; mount option when mounting a ReadWriteOncePod
            volume used in Pod that has explicitly set SELinux context. In the future, it
            may be expanded to other volume AccessModes. In any case, Kubernetes will ensure
            that the volume is mounted only with a single SELinux context.
            
            When &quot;false&quot;, Kubernetes won&apos;t pass any special SELinux mount options to the
            driver. This is typical for volumes that represent subdirectories of a bigger
            shared filesystem.
            
            Default is &quot;false&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.StorageCapacity">
            <summary>
            storageCapacity indicates that the CSI volume driver wants pod scheduling to
            consider the storage capacity that the driver deployment will report by creating
            CSIStorageCapacity objects with capacity information, if set to true.
            
            The check can be enabled immediately when deploying a driver. In that case,
            provisioning new volumes with late binding will pause until the driver
            deployment has published some suitable CSIStorageCapacity object.
            
            Alternatively, the driver can be deployed with the field unset or false and it
            can be flipped later when storage capacity information has been published.
            
            This field was immutable in Kubernetes &lt;= 1.22 and now is mutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.TokenRequests">
            <summary>
            tokenRequests indicates the CSI driver needs pods&apos; service account tokens it is
            mounting volume for to do necessary authentication. Kubelet will pass the tokens
            in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse
            and validate the following VolumeContext:
            &quot;csi.storage.k8s.io/serviceAccount.tokens&quot;: {
            &quot;&lt;audience&gt;&quot;: {
            &quot;token&quot;: &lt;token&gt;,
            &quot;expirationTimestamp&quot;: &lt;expiration timestamp in RFC3339&gt;,
            },
            ...
            }
            
            Note: Audience in each TokenRequest should be different and at most one token is
            empty string. To receive a new token after expiry, RequiresRepublish can be used
            to trigger NodePublishVolume periodically.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIDriverSpec.VolumeLifecycleModes">
            <summary>
            volumeLifecycleModes defines what kind of volumes this CSI volume driver
            supports. The default if the list is empty is &quot;Persistent&quot;, which is the usage
            defined by the CSI specification and implemented in Kubernetes via the usual
            PV/PVC mechanism.
            
            The other mode is &quot;Ephemeral&quot;. In this mode, volumes are defined inline inside
            the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle
            of that pod. A driver has to be aware of this because it is only going to get a
            NodePublishVolume call for such a volume.
            
            For more information about implementing this mode, see
            https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can
            support one or more of these modes and more modes may be added in the future.
            
            This field is beta. This field is immutable.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIDriverSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSINode">
            <summary>
            CSINode holds information about all CSI drivers installed on a node. CSI drivers
            do not need to create the CSINode object directly. As long as they use the
            node-driver-registrar sidecar container, the kubelet will automatically populate
            the CSINode object for the CSI driver as part of kubelet plugin registration.
            CSINode has the same name as a node. If the object is missing, it means either
            there are no CSI Drivers available on the node, or the Kubelet version is low
            enough that it doesn&apos;t create this object. CSINode has an OwnerReference that
            points to the corresponding node object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINode.#ctor">
            <summary>
            Initializes a new instance of the V1CSINode class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINode.#ctor(k8s.Models.V1CSINodeSpec,System.String,System.String,k8s.Models.V1ObjectMeta)">
            <summary>
            Initializes a new instance of the V1CSINode class.
            </summary>
            <param name="spec">
            spec is the specification of CSINode
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. metadata.name must be the Kubernetes node name.
            </param>
        </member>
        <member name="P:k8s.Models.V1CSINode.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINode.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINode.Metadata">
            <summary>
            Standard object&apos;s metadata. metadata.name must be the Kubernetes node name.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINode.Spec">
            <summary>
            spec is the specification of CSINode
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINode.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSINodeDriver">
            <summary>
            CSINodeDriver holds information about the specification of one CSI driver
            installed on a node
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeDriver.#ctor">
            <summary>
            Initializes a new instance of the V1CSINodeDriver class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeDriver.#ctor(System.String,System.String,k8s.Models.V1VolumeNodeResources,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1CSINodeDriver class.
            </summary>
            <param name="name">
            name represents the name of the CSI driver that this object refers to. This MUST
            be the same name returned by the CSI GetPluginName() call for that driver.
            </param>
            <param name="nodeID">
            nodeID of the node from the driver point of view. This field enables Kubernetes
            to communicate with storage systems that do not share the same nomenclature for
            nodes. For example, Kubernetes may refer to a given node as &quot;node1&quot;, but the
            storage system may refer to the same node as &quot;nodeA&quot;. When Kubernetes issues a
            command to the storage system to attach a volume to a specific node, it can use
            this field to refer to the node name using the ID that the storage system will
            understand, e.g. &quot;nodeA&quot; instead of &quot;node1&quot;. This field is required.
            </param>
            <param name="allocatable">
            allocatable represents the volume resources of a node that are available for
            scheduling. This field is beta.
            </param>
            <param name="topologyKeys">
            topologyKeys is the list of keys supported by the driver. When a driver is
            initialized on a cluster, it provides a set of topology keys that it understands
            (e.g. &quot;company.com/zone&quot;, &quot;company.com/region&quot;). When a driver is initialized on
            a node, it provides the same topology keys along with values. Kubelet will
            expose these topology keys as labels on its own node object. When Kubernetes
            does topology aware provisioning, it can use this list to determine which labels
            it should retrieve from the node object and pass back to the driver. It is
            possible for different nodes to use different topology keys. This can be empty
            if driver does not support topology.
            </param>
        </member>
        <member name="P:k8s.Models.V1CSINodeDriver.Allocatable">
            <summary>
            allocatable represents the volume resources of a node that are available for
            scheduling. This field is beta.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINodeDriver.Name">
            <summary>
            name represents the name of the CSI driver that this object refers to. This MUST
            be the same name returned by the CSI GetPluginName() call for that driver.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINodeDriver.NodeID">
            <summary>
            nodeID of the node from the driver point of view. This field enables Kubernetes
            to communicate with storage systems that do not share the same nomenclature for
            nodes. For example, Kubernetes may refer to a given node as &quot;node1&quot;, but the
            storage system may refer to the same node as &quot;nodeA&quot;. When Kubernetes issues a
            command to the storage system to attach a volume to a specific node, it can use
            this field to refer to the node name using the ID that the storage system will
            understand, e.g. &quot;nodeA&quot; instead of &quot;node1&quot;. This field is required.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINodeDriver.TopologyKeys">
            <summary>
            topologyKeys is the list of keys supported by the driver. When a driver is
            initialized on a cluster, it provides a set of topology keys that it understands
            (e.g. &quot;company.com/zone&quot;, &quot;company.com/region&quot;). When a driver is initialized on
            a node, it provides the same topology keys along with values. Kubelet will
            expose these topology keys as labels on its own node object. When Kubernetes
            does topology aware provisioning, it can use this list to determine which labels
            it should retrieve from the node object and pass back to the driver. It is
            possible for different nodes to use different topology keys. This can be empty
            if driver does not support topology.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeDriver.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSINodeList">
            <summary>
            CSINodeList is a collection of CSINode objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeList.#ctor">
            <summary>
            Initializes a new instance of the V1CSINodeList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeList.#ctor(System.Collections.Generic.IList{k8s.Models.V1CSINode},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1CSINodeList class.
            </summary>
            <param name="items">
            items is the list of CSINode
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1CSINodeList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINodeList.Items">
            <summary>
            items is the list of CSINode
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINodeList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSINodeList.Metadata">
            <summary>
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSINodeSpec">
            <summary>
            CSINodeSpec holds information about the specification of all CSI drivers
            installed on a node
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeSpec.#ctor">
            <summary>
            Initializes a new instance of the V1CSINodeSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeSpec.#ctor(System.Collections.Generic.IList{k8s.Models.V1CSINodeDriver})">
            <summary>
            Initializes a new instance of the V1CSINodeSpec class.
            </summary>
            <param name="drivers">
            drivers is a list of information of all CSI Drivers existing on a node. If all
            drivers in the list are uninstalled, this can become empty.
            </param>
        </member>
        <member name="P:k8s.Models.V1CSINodeSpec.Drivers">
            <summary>
            drivers is a list of information of all CSI Drivers existing on a node. If all
            drivers in the list are uninstalled, this can become empty.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSINodeSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSIStorageCapacity">
            <summary>
            CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given
            StorageClass, this describes the available capacity in a particular topology
            segment.  This can be used when considering where to instantiate new
            PersistentVolumes.
            
            For example this can express things like: - StorageClass &quot;standard&quot; has &quot;1234
            GiB&quot; available in &quot;topology.kubernetes.io/zone=us-east1&quot; - StorageClass
            &quot;localssd&quot; has &quot;10 GiB&quot; available in &quot;kubernetes.io/hostname=knode-abc123&quot;
            
            The following three cases all imply that no capacity is available for a certain
            combination: - no object exists with suitable topology and storage class name -
            such an object exists, but the capacity is unset - such an object exists, but
            the capacity is zero
            
            The producer of these objects can decide which approach is more suitable.
            
            They are consumed by the kube-scheduler when a CSI driver opts into
            capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler
            compares the MaximumVolumeSize against the requested size of pending volumes to
            filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a
            comparison against the less precise Capacity. If that is also unset, the
            scheduler assumes that capacity is insufficient and tries some other node.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIStorageCapacity.#ctor">
            <summary>
            Initializes a new instance of the V1CSIStorageCapacity class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIStorageCapacity.#ctor(System.String,System.String,k8s.Models.ResourceQuantity,System.String,k8s.Models.ResourceQuantity,k8s.Models.V1ObjectMeta,k8s.Models.V1LabelSelector)">
            <summary>
            Initializes a new instance of the V1CSIStorageCapacity class.
            </summary>
            <param name="storageClassName">
            storageClassName represents the name of the StorageClass that the reported
            capacity applies to. It must meet the same requirements as the name of a
            StorageClass object (non-empty, DNS subdomain). If that object no longer exists,
            the CSIStorageCapacity object is obsolete and should be removed by its creator.
            This field is immutable.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="capacity">
            capacity is the value reported by the CSI driver in its GetCapacityResponse for
            a GetCapacityRequest with topology and parameters that match the previous
            fields.
            
            The semantic is currently (CSI spec 1.2) defined as: The available capacity, in
            bytes, of the storage that can be used to provision volumes. If not set, that
            information is currently unavailable.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="maximumVolumeSize">
            maximumVolumeSize is the value reported by the CSI driver in its
            GetCapacityResponse for a GetCapacityRequest with topology and parameters that
            match the previous fields.
            
            This is defined since CSI spec 1.4.0 as the largest size that may be used in a
            CreateVolumeRequest.capacity_range.required_bytes field to create a volume with
            the same parameters as those in GetCapacityRequest. The corresponding value in
            the Kubernetes API is ResourceRequirements.Requests in a volume claim.
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. The name has no particular meaning. It must be a DNS
            subdomain (dots allowed, 253 characters). To ensure that there are no conflicts
            with other CSI drivers on the cluster, the recommendation is to use
            csisc-&lt;uuid&gt;, a generated name, or a reverse-domain name which ends with the
            unique CSI driver name.
            
            Objects are namespaced.
            
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="nodeTopology">
            nodeTopology defines which nodes have access to the storage for which capacity
            was reported. If not set, the storage is not accessible from any node in the
            cluster. If empty, the storage is accessible from all nodes. This field is
            immutable.
            </param>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacity.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacity.Capacity">
            <summary>
            capacity is the value reported by the CSI driver in its GetCapacityResponse for
            a GetCapacityRequest with topology and parameters that match the previous
            fields.
            
            The semantic is currently (CSI spec 1.2) defined as: The available capacity, in
            bytes, of the storage that can be used to provision volumes. If not set, that
            information is currently unavailable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacity.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacity.MaximumVolumeSize">
            <summary>
            maximumVolumeSize is the value reported by the CSI driver in its
            GetCapacityResponse for a GetCapacityRequest with topology and parameters that
            match the previous fields.
            
            This is defined since CSI spec 1.4.0 as the largest size that may be used in a
            CreateVolumeRequest.capacity_range.required_bytes field to create a volume with
            the same parameters as those in GetCapacityRequest. The corresponding value in
            the Kubernetes API is ResourceRequirements.Requests in a volume claim.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacity.Metadata">
            <summary>
            Standard object&apos;s metadata. The name has no particular meaning. It must be a DNS
            subdomain (dots allowed, 253 characters). To ensure that there are no conflicts
            with other CSI drivers on the cluster, the recommendation is to use
            csisc-&lt;uuid&gt;, a generated name, or a reverse-domain name which ends with the
            unique CSI driver name.
            
            Objects are namespaced.
            
            More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacity.NodeTopology">
            <summary>
            nodeTopology defines which nodes have access to the storage for which capacity
            was reported. If not set, the storage is not accessible from any node in the
            cluster. If empty, the storage is accessible from all nodes. This field is
            immutable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacity.StorageClassName">
            <summary>
            storageClassName represents the name of the StorageClass that the reported
            capacity applies to. It must meet the same requirements as the name of a
            StorageClass object (non-empty, DNS subdomain). If that object no longer exists,
            the CSIStorageCapacity object is obsolete and should be removed by its creator.
            This field is immutable.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIStorageCapacity.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CSIStorageCapacityList">
            <summary>
            CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIStorageCapacityList.#ctor">
            <summary>
            Initializes a new instance of the V1CSIStorageCapacityList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIStorageCapacityList.#ctor(System.Collections.Generic.IList{k8s.Models.V1CSIStorageCapacity},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1CSIStorageCapacityList class.
            </summary>
            <param name="items">
            items is the list of CSIStorageCapacity objects.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacityList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacityList.Items">
            <summary>
            items is the list of CSIStorageCapacity objects.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacityList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CSIStorageCapacityList.Metadata">
            <summary>
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1CSIStorageCapacityList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StorageClass">
            <summary>
            StorageClass describes the parameters for a class of storage for which
            PersistentVolumes can be dynamically provisioned.
            
            StorageClasses are non-namespaced; the name of the storage class according to
            etcd is in ObjectMeta.Name.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageClass.#ctor">
            <summary>
            Initializes a new instance of the V1StorageClass class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageClass.#ctor(System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.V1TopologySelectorTerm},System.String,System.String,k8s.Models.V1ObjectMeta,System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1StorageClass class.
            </summary>
            <param name="provisioner">
            provisioner indicates the type of the provisioner.
            </param>
            <param name="allowVolumeExpansion">
            allowVolumeExpansion shows whether the storage class allow volume expand.
            </param>
            <param name="allowedTopologies">
            allowedTopologies restrict the node topologies where volumes can be dynamically
            provisioned. Each volume plugin defines its own supported topology
            specifications. An empty TopologySelectorTerm list means there is no topology
            restriction. This field is only honored by servers that enable the
            VolumeScheduling feature.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="mountOptions">
            mountOptions controls the mountOptions for dynamically provisioned
            PersistentVolumes of this storage class. e.g. [&quot;ro&quot;, &quot;soft&quot;]. Not validated -
            mount of the PVs will simply fail if one is invalid.
            </param>
            <param name="parameters">
            parameters holds the parameters for the provisioner that should create volumes
            of this storage class.
            </param>
            <param name="reclaimPolicy">
            reclaimPolicy controls the reclaimPolicy for dynamically provisioned
            PersistentVolumes of this storage class. Defaults to Delete.
            </param>
            <param name="volumeBindingMode">
            volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and
            bound.  When unset, VolumeBindingImmediate is used. This field is only honored
            by servers that enable the VolumeScheduling feature.
            </param>
        </member>
        <member name="P:k8s.Models.V1StorageClass.AllowVolumeExpansion">
            <summary>
            allowVolumeExpansion shows whether the storage class allow volume expand.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.AllowedTopologies">
            <summary>
            allowedTopologies restrict the node topologies where volumes can be dynamically
            provisioned. Each volume plugin defines its own supported topology
            specifications. An empty TopologySelectorTerm list means there is no topology
            restriction. This field is only honored by servers that enable the
            VolumeScheduling feature.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.MountOptions">
            <summary>
            mountOptions controls the mountOptions for dynamically provisioned
            PersistentVolumes of this storage class. e.g. [&quot;ro&quot;, &quot;soft&quot;]. Not validated -
            mount of the PVs will simply fail if one is invalid.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.Parameters">
            <summary>
            parameters holds the parameters for the provisioner that should create volumes
            of this storage class.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.Provisioner">
            <summary>
            provisioner indicates the type of the provisioner.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.ReclaimPolicy">
            <summary>
            reclaimPolicy controls the reclaimPolicy for dynamically provisioned
            PersistentVolumes of this storage class. Defaults to Delete.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClass.VolumeBindingMode">
            <summary>
            volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and
            bound.  When unset, VolumeBindingImmediate is used. This field is only honored
            by servers that enable the VolumeScheduling feature.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageClass.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StorageClassList">
            <summary>
            StorageClassList is a collection of storage classes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageClassList.#ctor">
            <summary>
            Initializes a new instance of the V1StorageClassList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageClassList.#ctor(System.Collections.Generic.IList{k8s.Models.V1StorageClass},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1StorageClassList class.
            </summary>
            <param name="items">
            items is the list of StorageClasses
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1StorageClassList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClassList.Items">
            <summary>
            items is the list of StorageClasses
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClassList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1StorageClassList.Metadata">
            <summary>
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1StorageClassList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Storagev1TokenRequest">
            <summary>
            TokenRequest contains parameters of a service account token.
            </summary>
        </member>
        <member name="M:k8s.Models.Storagev1TokenRequest.#ctor">
            <summary>
            Initializes a new instance of the Storagev1TokenRequest class.
            </summary>
        </member>
        <member name="M:k8s.Models.Storagev1TokenRequest.#ctor(System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the Storagev1TokenRequest class.
            </summary>
            <param name="audience">
            audience is the intended audience of the token in &quot;TokenRequestSpec&quot;. It will
            default to the audiences of kube apiserver.
            </param>
            <param name="expirationSeconds">
            expirationSeconds is the duration of validity of the token in
            &quot;TokenRequestSpec&quot;. It has the same default value of &quot;ExpirationSeconds&quot; in
            &quot;TokenRequestSpec&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.Storagev1TokenRequest.Audience">
            <summary>
            audience is the intended audience of the token in &quot;TokenRequestSpec&quot;. It will
            default to the audiences of kube apiserver.
            </summary>
        </member>
        <member name="P:k8s.Models.Storagev1TokenRequest.ExpirationSeconds">
            <summary>
            expirationSeconds is the duration of validity of the token in
            &quot;TokenRequestSpec&quot;. It has the same default value of &quot;ExpirationSeconds&quot; in
            &quot;TokenRequestSpec&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.Storagev1TokenRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeAttachment">
            <summary>
            VolumeAttachment captures the intent to attach or detach the specified volume
            to/from the specified node.
            
            VolumeAttachment objects are non-namespaced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachment.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeAttachment class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachment.#ctor(k8s.Models.V1VolumeAttachmentSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1VolumeAttachmentStatus)">
            <summary>
            Initializes a new instance of the V1VolumeAttachment class.
            </summary>
            <param name="spec">
            spec represents specification of the desired attach/detach volume behavior.
            Populated by the Kubernetes system.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            status represents status of the VolumeAttachment request. Populated by the
            entity completing the attach or detach operation, i.e. the external-attacher.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachment.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachment.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachment.Metadata">
            <summary>
            Standard object metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachment.Spec">
            <summary>
            spec represents specification of the desired attach/detach volume behavior.
            Populated by the Kubernetes system.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachment.Status">
            <summary>
            status represents status of the VolumeAttachment request. Populated by the
            entity completing the attach or detach operation, i.e. the external-attacher.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachment.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeAttachmentList">
            <summary>
            VolumeAttachmentList is a collection of VolumeAttachment objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentList.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentList.#ctor(System.Collections.Generic.IList{k8s.Models.V1VolumeAttachment},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentList class.
            </summary>
            <param name="items">
            items is the list of VolumeAttachments
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentList.Items">
            <summary>
            items is the list of VolumeAttachments
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentList.Metadata">
            <summary>
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeAttachmentSource">
            <summary>
            VolumeAttachmentSource represents a volume that should be attached. Right now
            only PersistenVolumes can be attached via external attacher, in future we may
            allow also inline volumes in pods. Exactly one member can be set.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentSource.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentSource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentSource.#ctor(k8s.Models.V1PersistentVolumeSpec,System.String)">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentSource class.
            </summary>
            <param name="inlineVolumeSpec">
            inlineVolumeSpec contains all the information necessary to attach a persistent
            volume defined by a pod&apos;s inline VolumeSource. This field is populated only for
            the CSIMigration feature. It contains translated fields from a pod&apos;s inline
            VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only
            honored by servers that enabled the CSIMigration feature.
            </param>
            <param name="persistentVolumeName">
            persistentVolumeName represents the name of the persistent volume to attach.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentSource.InlineVolumeSpec">
            <summary>
            inlineVolumeSpec contains all the information necessary to attach a persistent
            volume defined by a pod&apos;s inline VolumeSource. This field is populated only for
            the CSIMigration feature. It contains translated fields from a pod&apos;s inline
            VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only
            honored by servers that enabled the CSIMigration feature.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentSource.PersistentVolumeName">
            <summary>
            persistentVolumeName represents the name of the persistent volume to attach.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentSource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeAttachmentSpec">
            <summary>
            VolumeAttachmentSpec is the specification of a VolumeAttachment request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentSpec.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentSpec.#ctor(System.String,System.String,k8s.Models.V1VolumeAttachmentSource)">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentSpec class.
            </summary>
            <param name="attacher">
            attacher indicates the name of the volume driver that MUST handle this request.
            This is the name returned by GetPluginName().
            </param>
            <param name="nodeName">
            nodeName represents the node that the volume should be attached to.
            </param>
            <param name="source">
            source represents the volume that should be attached.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentSpec.Attacher">
            <summary>
            attacher indicates the name of the volume driver that MUST handle this request.
            This is the name returned by GetPluginName().
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentSpec.NodeName">
            <summary>
            nodeName represents the node that the volume should be attached to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentSpec.Source">
            <summary>
            source represents the volume that should be attached.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeAttachmentStatus">
            <summary>
            VolumeAttachmentStatus is the status of a VolumeAttachment request.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentStatus.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentStatus.#ctor(System.Boolean,k8s.Models.V1VolumeError,System.Collections.Generic.IDictionary{System.String,System.String},k8s.Models.V1VolumeError)">
            <summary>
            Initializes a new instance of the V1VolumeAttachmentStatus class.
            </summary>
            <param name="attached">
            attached indicates the volume is successfully attached. This field must only be
            set by the entity completing the attach operation, i.e. the external-attacher.
            </param>
            <param name="attachError">
            attachError represents the last error encountered during attach operation, if
            any. This field must only be set by the entity completing the attach operation,
            i.e. the external-attacher.
            </param>
            <param name="attachmentMetadata">
            attachmentMetadata is populated with any information returned by the attach
            operation, upon successful attach, that must be passed into subsequent
            WaitForAttach or Mount calls. This field must only be set by the entity
            completing the attach operation, i.e. the external-attacher.
            </param>
            <param name="detachError">
            detachError represents the last error encountered during detach operation, if
            any. This field must only be set by the entity completing the detach operation,
            i.e. the external-attacher.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentStatus.AttachError">
            <summary>
            attachError represents the last error encountered during attach operation, if
            any. This field must only be set by the entity completing the attach operation,
            i.e. the external-attacher.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentStatus.Attached">
            <summary>
            attached indicates the volume is successfully attached. This field must only be
            set by the entity completing the attach operation, i.e. the external-attacher.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentStatus.AttachmentMetadata">
            <summary>
            attachmentMetadata is populated with any information returned by the attach
            operation, upon successful attach, that must be passed into subsequent
            WaitForAttach or Mount calls. This field must only be set by the entity
            completing the attach operation, i.e. the external-attacher.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeAttachmentStatus.DetachError">
            <summary>
            detachError represents the last error encountered during detach operation, if
            any. This field must only be set by the entity completing the detach operation,
            i.e. the external-attacher.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeAttachmentStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeError">
            <summary>
            VolumeError captures an error encountered during a volume operation.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeError.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeError class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeError.#ctor(System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the V1VolumeError class.
            </summary>
            <param name="message">
            message represents the error encountered during Attach or Detach operation. This
            string may be logged, so it should not contain sensitive information.
            </param>
            <param name="time">
            time represents the time the error was encountered.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeError.Message">
            <summary>
            message represents the error encountered during Attach or Detach operation. This
            string may be logged, so it should not contain sensitive information.
            </summary>
        </member>
        <member name="P:k8s.Models.V1VolumeError.Time">
            <summary>
            time represents the time the error was encountered.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeError.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1VolumeNodeResources">
            <summary>
            VolumeNodeResources is a set of resource limits for scheduling of volumes.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeNodeResources.#ctor">
            <summary>
            Initializes a new instance of the V1VolumeNodeResources class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeNodeResources.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1VolumeNodeResources class.
            </summary>
            <param name="count">
            count indicates the maximum number of unique volumes managed by the CSI driver
            that can be used on a node. A volume that is both attached and mounted on a node
            is considered to be used once, not twice. The same rule applies for a unique
            volume that is shared among multiple pods on the same node. If this field is not
            specified, then the supported number of volumes on this node is unbounded.
            </param>
        </member>
        <member name="P:k8s.Models.V1VolumeNodeResources.Count">
            <summary>
            count indicates the maximum number of unique volumes managed by the CSI driver
            that can be used on a node. A volume that is both attached and mounted on a node
            is considered to be used once, not twice. The same rule applies for a unique
            volume that is shared among multiple pods on the same node. If this field is not
            specified, then the supported number of volumes on this node is unbounded.
            </summary>
        </member>
        <member name="M:k8s.Models.V1VolumeNodeResources.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceColumnDefinition">
            <summary>
            CustomResourceColumnDefinition specifies a column for server side printing.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceColumnDefinition.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceColumnDefinition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceColumnDefinition.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the V1CustomResourceColumnDefinition class.
            </summary>
            <param name="jsonPath">
            jsonPath is a simple JSON path (i.e. with array notation) which is evaluated
            against each custom resource to produce the value for this column.
            </param>
            <param name="name">
            name is a human readable name for the column.
            </param>
            <param name="type">
            type is an OpenAPI type definition for this column. See
            https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
            for details.
            </param>
            <param name="description">
            description is a human readable description of this column.
            </param>
            <param name="format">
            format is an optional OpenAPI type definition for this column. The &apos;name&apos; format
            is applied to the primary identifier column to assist in clients identifying
            column is the resource name. See
            https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
            for details.
            </param>
            <param name="priority">
            priority is an integer defining the relative importance of this column compared
            to others. Lower numbers are considered higher priority. Columns that may be
            omitted in limited space scenarios should be given a priority greater than 0.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceColumnDefinition.Description">
            <summary>
            description is a human readable description of this column.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceColumnDefinition.Format">
            <summary>
            format is an optional OpenAPI type definition for this column. The &apos;name&apos; format
            is applied to the primary identifier column to assist in clients identifying
            column is the resource name. See
            https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
            for details.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceColumnDefinition.JsonPath">
            <summary>
            jsonPath is a simple JSON path (i.e. with array notation) which is evaluated
            against each custom resource to produce the value for this column.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceColumnDefinition.Name">
            <summary>
            name is a human readable name for the column.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceColumnDefinition.Priority">
            <summary>
            priority is an integer defining the relative importance of this column compared
            to others. Lower numbers are considered higher priority. Columns that may be
            omitted in limited space scenarios should be given a priority greater than 0.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceColumnDefinition.Type">
            <summary>
            type is an OpenAPI type definition for this column. See
            https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
            for details.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceColumnDefinition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceConversion">
            <summary>
            CustomResourceConversion describes how to convert different versions of a CR.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceConversion.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceConversion class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceConversion.#ctor(System.String,k8s.Models.V1WebhookConversion)">
            <summary>
            Initializes a new instance of the V1CustomResourceConversion class.
            </summary>
            <param name="strategy">
            strategy specifies how custom resources are converted between versions. Allowed
            values are: - `&quot;None&quot;`: The converter only change the apiVersion and would not
            touch any other field in the custom resource. - `&quot;Webhook&quot;`: API Server will
            call to an external webhook to do the conversion. Additional information
            is needed for this option. This requires spec.preserveUnknownFields to be false,
            and spec.conversion.webhook to be set.
            </param>
            <param name="webhook">
            webhook describes how to call the conversion webhook. Required when `strategy`
            is set to `&quot;Webhook&quot;`.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceConversion.Strategy">
            <summary>
            strategy specifies how custom resources are converted between versions. Allowed
            values are: - `&quot;None&quot;`: The converter only change the apiVersion and would not
            touch any other field in the custom resource. - `&quot;Webhook&quot;`: API Server will
            call to an external webhook to do the conversion. Additional information
            is needed for this option. This requires spec.preserveUnknownFields to be false,
            and spec.conversion.webhook to be set.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceConversion.Webhook">
            <summary>
            webhook describes how to call the conversion webhook. Required when `strategy`
            is set to `&quot;Webhook&quot;`.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceConversion.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceDefinition">
            <summary>
            CustomResourceDefinition represents a resource that should be exposed on the API
            server.  Its name MUST be in the format &lt;.spec.name&gt;.&lt;.spec.group&gt;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinition.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinition.#ctor(k8s.Models.V1CustomResourceDefinitionSpec,System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1CustomResourceDefinitionStatus)">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinition class.
            </summary>
            <param name="spec">
            spec describes how the user wants the resources to appear
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="status">
            status indicates the actual state of the CustomResourceDefinition
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinition.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinition.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinition.Metadata">
            <summary>
            Standard object&apos;s metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinition.Spec">
            <summary>
            spec describes how the user wants the resources to appear
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinition.Status">
            <summary>
            status indicates the actual state of the CustomResourceDefinition
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceDefinitionCondition">
            <summary>
            CustomResourceDefinitionCondition contains details for the current condition of
            this pod.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionCondition.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionCondition class.
            </summary>
            <param name="status">
            status is the status of the condition. Can be True, False, Unknown.
            </param>
            <param name="type">
            type is the type of the condition. Types include Established, NamesAccepted and
            Terminating.
            </param>
            <param name="lastTransitionTime">
            lastTransitionTime last time the condition transitioned from one status to
            another.
            </param>
            <param name="message">
            message is a human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            reason is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionCondition.LastTransitionTime">
            <summary>
            lastTransitionTime last time the condition transitioned from one status to
            another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionCondition.Message">
            <summary>
            message is a human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionCondition.Reason">
            <summary>
            reason is a unique, one-word, CamelCase reason for the condition&apos;s last
            transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionCondition.Status">
            <summary>
            status is the status of the condition. Can be True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionCondition.Type">
            <summary>
            type is the type of the condition. Types include Established, NamesAccepted and
            Terminating.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceDefinitionList">
            <summary>
            CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionList.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionList.#ctor(System.Collections.Generic.IList{k8s.Models.V1CustomResourceDefinition},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionList class.
            </summary>
            <param name="items">
            items list individual CustomResourceDefinition objects
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionList.Items">
            <summary>
            items list individual CustomResourceDefinition objects
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionList.Metadata">
            <summary>
            Standard object&apos;s metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceDefinitionNames">
            <summary>
            CustomResourceDefinitionNames indicates the names to serve this
            CustomResourceDefinition
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionNames.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionNames class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionNames.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionNames class.
            </summary>
            <param name="kind">
            kind is the serialized kind of the resource. It is normally CamelCase and
            singular. Custom resource instances will use this value as the `kind` attribute
            in API calls.
            </param>
            <param name="plural">
            plural is the plural name of the resource to serve. The custom resources are
            served under `/apis/&lt;group&gt;/&lt;version&gt;/.../&lt;plural&gt;`. Must match the name of the
            CustomResourceDefinition (in the form `&lt;names.plural&gt;.&lt;group&gt;`). Must be all
            lowercase.
            </param>
            <param name="categories">
            categories is a list of grouped resources this custom resource belongs to (e.g.
            &apos;all&apos;). This is published in API discovery documents, and used by clients to
            support invocations like `kubectl get all`.
            </param>
            <param name="listKind">
            listKind is the serialized kind of the list for this resource. Defaults to
            &quot;`kind`List&quot;.
            </param>
            <param name="shortNames">
            shortNames are short names for the resource, exposed in API discovery documents,
            and used by clients to support invocations like `kubectl get &lt;shortname&gt;`. It
            must be all lowercase.
            </param>
            <param name="singular">
            singular is the singular name of the resource. It must be all lowercase.
            Defaults to lowercased `kind`.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionNames.Categories">
            <summary>
            categories is a list of grouped resources this custom resource belongs to (e.g.
            &apos;all&apos;). This is published in API discovery documents, and used by clients to
            support invocations like `kubectl get all`.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionNames.Kind">
            <summary>
            kind is the serialized kind of the resource. It is normally CamelCase and
            singular. Custom resource instances will use this value as the `kind` attribute
            in API calls.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionNames.ListKind">
            <summary>
            listKind is the serialized kind of the list for this resource. Defaults to
            &quot;`kind`List&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionNames.Plural">
            <summary>
            plural is the plural name of the resource to serve. The custom resources are
            served under `/apis/&lt;group&gt;/&lt;version&gt;/.../&lt;plural&gt;`. Must match the name of the
            CustomResourceDefinition (in the form `&lt;names.plural&gt;.&lt;group&gt;`). Must be all
            lowercase.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionNames.ShortNames">
            <summary>
            shortNames are short names for the resource, exposed in API discovery documents,
            and used by clients to support invocations like `kubectl get &lt;shortname&gt;`. It
            must be all lowercase.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionNames.Singular">
            <summary>
            singular is the singular name of the resource. It must be all lowercase.
            Defaults to lowercased `kind`.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionNames.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceDefinitionSpec">
            <summary>
            CustomResourceDefinitionSpec describes how a user wants their resource to appear
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionSpec.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionSpec.#ctor(System.String,k8s.Models.V1CustomResourceDefinitionNames,System.String,System.Collections.Generic.IList{k8s.Models.V1CustomResourceDefinitionVersion},k8s.Models.V1CustomResourceConversion,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionSpec class.
            </summary>
            <param name="group">
            group is the API group of the defined custom resource. The custom resources are
            served under `/apis/&lt;group&gt;/...`. Must match the name of the
            CustomResourceDefinition (in the form `&lt;names.plural&gt;.&lt;group&gt;`).
            </param>
            <param name="names">
            names specify the resource and kind names for the custom resource.
            </param>
            <param name="scope">
            scope indicates whether the defined custom resource is cluster- or
            namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
            </param>
            <param name="versions">
            versions is the list of all API versions of the defined custom resource. Version
            names are used to compute the order in which served versions are listed in API
            discovery. If the version string is &quot;kube-like&quot;, it will sort above non
            &quot;kube-like&quot; version strings, which are ordered lexicographically. &quot;Kube-like&quot;
            versions start with a &quot;v&quot;, then are followed by a number (the major version),
            then optionally the string &quot;alpha&quot; or &quot;beta&quot; and another number (the minor
            version). These are sorted first by GA &gt; beta &gt; alpha (where GA is a version
            with no suffix such as beta or alpha), and then by comparing major version, then
            minor version. An example sorted list of versions: v10, v2, v1, v11beta2,
            v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
            </param>
            <param name="conversion">
            conversion defines conversion settings for the CRD.
            </param>
            <param name="preserveUnknownFields">
            preserveUnknownFields indicates that object fields which are not specified in
            the OpenAPI schema should be preserved when persisting to storage. apiVersion,
            kind, metadata and known fields inside metadata are always preserved. This field
            is deprecated in favor of setting `x-preserve-unknown-fields` to true in
            `spec.versions[*].schema.openAPIV3Schema`. See
            https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning
            for details.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionSpec.Conversion">
            <summary>
            conversion defines conversion settings for the CRD.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionSpec.Group">
            <summary>
            group is the API group of the defined custom resource. The custom resources are
            served under `/apis/&lt;group&gt;/...`. Must match the name of the
            CustomResourceDefinition (in the form `&lt;names.plural&gt;.&lt;group&gt;`).
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionSpec.Names">
            <summary>
            names specify the resource and kind names for the custom resource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionSpec.PreserveUnknownFields">
            <summary>
            preserveUnknownFields indicates that object fields which are not specified in
            the OpenAPI schema should be preserved when persisting to storage. apiVersion,
            kind, metadata and known fields inside metadata are always preserved. This field
            is deprecated in favor of setting `x-preserve-unknown-fields` to true in
            `spec.versions[*].schema.openAPIV3Schema`. See
            https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning
            for details.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionSpec.Scope">
            <summary>
            scope indicates whether the defined custom resource is cluster- or
            namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionSpec.Versions">
            <summary>
            versions is the list of all API versions of the defined custom resource. Version
            names are used to compute the order in which served versions are listed in API
            discovery. If the version string is &quot;kube-like&quot;, it will sort above non
            &quot;kube-like&quot; version strings, which are ordered lexicographically. &quot;Kube-like&quot;
            versions start with a &quot;v&quot;, then are followed by a number (the major version),
            then optionally the string &quot;alpha&quot; or &quot;beta&quot; and another number (the minor
            version). These are sorted first by GA &gt; beta &gt; alpha (where GA is a version
            with no suffix such as beta or alpha), and then by comparing major version, then
            minor version. An example sorted list of versions: v10, v2, v1, v11beta2,
            v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceDefinitionStatus">
            <summary>
            CustomResourceDefinitionStatus indicates the state of the
            CustomResourceDefinition
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionStatus.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionStatus.#ctor(k8s.Models.V1CustomResourceDefinitionNames,System.Collections.Generic.IList{k8s.Models.V1CustomResourceDefinitionCondition},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionStatus class.
            </summary>
            <param name="acceptedNames">
            acceptedNames are the names that are actually being used to serve discovery.
            They may be different than the names in spec.
            </param>
            <param name="conditions">
            conditions indicate state for particular aspects of a CustomResourceDefinition
            </param>
            <param name="storedVersions">
            storedVersions lists all versions of CustomResources that were ever persisted.
            Tracking these versions allows a migration path for stored versions in etcd. The
            field is mutable so a migration controller can finish a migration to another
            version (ensuring no old objects are left in storage), and then remove the rest
            of the versions from this list. Versions may not be removed from `spec.versions`
            while they exist in this list.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionStatus.AcceptedNames">
            <summary>
            acceptedNames are the names that are actually being used to serve discovery.
            They may be different than the names in spec.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionStatus.Conditions">
            <summary>
            conditions indicate state for particular aspects of a CustomResourceDefinition
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionStatus.StoredVersions">
            <summary>
            storedVersions lists all versions of CustomResources that were ever persisted.
            Tracking these versions allows a migration path for stored versions in etcd. The
            field is mutable so a migration controller can finish a migration to another
            version (ensuring no old objects are left in storage), and then remove the rest
            of the versions from this list. Versions may not be removed from `spec.versions`
            while they exist in this list.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceDefinitionVersion">
            <summary>
            CustomResourceDefinitionVersion describes a version for CRD.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionVersion.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionVersion class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionVersion.#ctor(System.String,System.Boolean,System.Boolean,System.Collections.Generic.IList{k8s.Models.V1CustomResourceColumnDefinition},System.Nullable{System.Boolean},System.String,k8s.Models.V1CustomResourceValidation,k8s.Models.V1CustomResourceSubresources)">
            <summary>
            Initializes a new instance of the V1CustomResourceDefinitionVersion class.
            </summary>
            <param name="name">
            name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are
            served under this version at `/apis/&lt;group&gt;/&lt;version&gt;/...` if `served` is true.
            </param>
            <param name="served">
            served is a flag enabling/disabling this version from being served via REST APIs
            </param>
            <param name="storage">
            storage indicates this version should be used when persisting custom resources
            to storage. There must be exactly one version with storage=true.
            </param>
            <param name="additionalPrinterColumns">
            additionalPrinterColumns specifies additional columns returned in Table output.
            See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables
            for details. If no columns are specified, a single column displaying the age of
            the custom resource is used.
            </param>
            <param name="deprecated">
            deprecated indicates this version of the custom resource API is deprecated. When
            set to true, API requests to this version receive a warning header in the server
            response. Defaults to false.
            </param>
            <param name="deprecationWarning">
            deprecationWarning overrides the default warning returned to API clients. May
            only be set when `deprecated` is true. The default warning indicates this
            version is deprecated and recommends use of the newest served version of equal
            or greater stability, if one exists.
            </param>
            <param name="schema">
            schema describes the schema used for validation, pruning, and defaulting of this
            version of the custom resource.
            </param>
            <param name="subresources">
            subresources specify what subresources this version of the defined custom
            resource have.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.AdditionalPrinterColumns">
            <summary>
            additionalPrinterColumns specifies additional columns returned in Table output.
            See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables
            for details. If no columns are specified, a single column displaying the age of
            the custom resource is used.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.Deprecated">
            <summary>
            deprecated indicates this version of the custom resource API is deprecated. When
            set to true, API requests to this version receive a warning header in the server
            response. Defaults to false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.DeprecationWarning">
            <summary>
            deprecationWarning overrides the default warning returned to API clients. May
            only be set when `deprecated` is true. The default warning indicates this
            version is deprecated and recommends use of the newest served version of equal
            or greater stability, if one exists.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.Name">
            <summary>
            name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are
            served under this version at `/apis/&lt;group&gt;/&lt;version&gt;/...` if `served` is true.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.Schema">
            <summary>
            schema describes the schema used for validation, pruning, and defaulting of this
            version of the custom resource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.Served">
            <summary>
            served is a flag enabling/disabling this version from being served via REST APIs
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.Storage">
            <summary>
            storage indicates this version should be used when persisting custom resources
            to storage. There must be exactly one version with storage=true.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceDefinitionVersion.Subresources">
            <summary>
            subresources specify what subresources this version of the defined custom
            resource have.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceDefinitionVersion.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceSubresourceScale">
            <summary>
            CustomResourceSubresourceScale defines how to serve the scale subresource for
            CustomResources.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceSubresourceScale.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceSubresourceScale class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceSubresourceScale.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1CustomResourceSubresourceScale class.
            </summary>
            <param name="specReplicasPath">
            specReplicasPath defines the JSON path inside of a custom resource that
            corresponds to Scale `spec.replicas`. Only JSON paths without the array notation
            are allowed. Must be a JSON Path under `.spec`. If there is no value under the
            given path in the custom resource, the `/scale` subresource will return an error
            on GET.
            </param>
            <param name="statusReplicasPath">
            statusReplicasPath defines the JSON path inside of a custom resource that
            corresponds to Scale `status.replicas`. Only JSON paths without the array
            notation are allowed. Must be a JSON Path under `.status`. If there is no value
            under the given path in the custom resource, the `status.replicas` value in the
            `/scale` subresource will default to 0.
            </param>
            <param name="labelSelectorPath">
            labelSelectorPath defines the JSON path inside of a custom resource that
            corresponds to Scale `status.selector`. Only JSON paths without the array
            notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be
            set to work with HorizontalPodAutoscaler. The field pointed by this JSON path
            must be a string field (not a complex selector struct) which contains a
            serialized label selector in string form. More info:
            https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource
            If there is no value under the given path in the custom resource, the
            `status.selector` value in the `/scale` subresource will default to the empty
            string.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceSubresourceScale.LabelSelectorPath">
            <summary>
            labelSelectorPath defines the JSON path inside of a custom resource that
            corresponds to Scale `status.selector`. Only JSON paths without the array
            notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be
            set to work with HorizontalPodAutoscaler. The field pointed by this JSON path
            must be a string field (not a complex selector struct) which contains a
            serialized label selector in string form. More info:
            https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource
            If there is no value under the given path in the custom resource, the
            `status.selector` value in the `/scale` subresource will default to the empty
            string.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceSubresourceScale.SpecReplicasPath">
            <summary>
            specReplicasPath defines the JSON path inside of a custom resource that
            corresponds to Scale `spec.replicas`. Only JSON paths without the array notation
            are allowed. Must be a JSON Path under `.spec`. If there is no value under the
            given path in the custom resource, the `/scale` subresource will return an error
            on GET.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceSubresourceScale.StatusReplicasPath">
            <summary>
            statusReplicasPath defines the JSON path inside of a custom resource that
            corresponds to Scale `status.replicas`. Only JSON paths without the array
            notation are allowed. Must be a JSON Path under `.status`. If there is no value
            under the given path in the custom resource, the `status.replicas` value in the
            `/scale` subresource will default to 0.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceSubresourceScale.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceSubresources">
            <summary>
            CustomResourceSubresources defines the status and scale subresources for
            CustomResources.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceSubresources.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceSubresources class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceSubresources.#ctor(k8s.Models.V1CustomResourceSubresourceScale,System.Object)">
            <summary>
            Initializes a new instance of the V1CustomResourceSubresources class.
            </summary>
            <param name="scale">
            scale indicates the custom resource should serve a `/scale` subresource that
            returns an `autoscaling/v1` Scale object.
            </param>
            <param name="status">
            status indicates the custom resource should serve a `/status` subresource. When
            enabled: 1. requests to the custom resource primary endpoint ignore changes to
            the `status` stanza of the object. 2. requests to the custom resource `/status`
            subresource ignore changes to anything other than the `status` stanza of the
            object.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceSubresources.Scale">
            <summary>
            scale indicates the custom resource should serve a `/scale` subresource that
            returns an `autoscaling/v1` Scale object.
            </summary>
        </member>
        <member name="P:k8s.Models.V1CustomResourceSubresources.Status">
            <summary>
            status indicates the custom resource should serve a `/status` subresource. When
            enabled: 1. requests to the custom resource primary endpoint ignore changes to
            the `status` stanza of the object. 2. requests to the custom resource `/status`
            subresource ignore changes to anything other than the `status` stanza of the
            object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceSubresources.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1CustomResourceValidation">
            <summary>
            CustomResourceValidation is a list of validation methods for CustomResources.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceValidation.#ctor">
            <summary>
            Initializes a new instance of the V1CustomResourceValidation class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceValidation.#ctor(k8s.Models.V1JSONSchemaProps)">
            <summary>
            Initializes a new instance of the V1CustomResourceValidation class.
            </summary>
            <param name="openAPIV3Schema">
            openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
            </param>
        </member>
        <member name="P:k8s.Models.V1CustomResourceValidation.OpenAPIV3Schema">
            <summary>
            openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
            </summary>
        </member>
        <member name="M:k8s.Models.V1CustomResourceValidation.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ExternalDocumentation">
            <summary>
            ExternalDocumentation allows referencing an external resource for extended
            documentation.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ExternalDocumentation.#ctor">
            <summary>
            Initializes a new instance of the V1ExternalDocumentation class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ExternalDocumentation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ExternalDocumentation class.
            </summary>
            <param name="description">
            
            </param>
            <param name="url">
            
            </param>
        </member>
        <member name="P:k8s.Models.V1ExternalDocumentation.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1ExternalDocumentation.Url">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1ExternalDocumentation.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1JSONSchemaProps">
            <summary>
            JSONSchemaProps is a JSON-Schema following Specification Draft 4
            (http://json-schema.org/).
            </summary>
        </member>
        <member name="M:k8s.Models.V1JSONSchemaProps.#ctor">
            <summary>
            Initializes a new instance of the V1JSONSchemaProps class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JSONSchemaProps.#ctor(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IList{k8s.Models.V1JSONSchemaProps},System.Collections.Generic.IList{k8s.Models.V1JSONSchemaProps},System.Object,System.Collections.Generic.IDictionary{System.String,k8s.Models.V1JSONSchemaProps},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Collections.Generic.IList{System.Object},System.Object,System.Nullable{System.Boolean},System.Nullable{System.Boolean},k8s.Models.V1ExternalDocumentation,System.String,System.String,System.Object,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},k8s.Models.V1JSONSchemaProps,System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.V1JSONSchemaProps},System.String,System.Collections.Generic.IDictionary{System.String,k8s.Models.V1JSONSchemaProps},System.Collections.Generic.IDictionary{System.String,k8s.Models.V1JSONSchemaProps},System.Collections.Generic.IList{System.String},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{k8s.Models.V1ValidationRule})">
            <summary>
            Initializes a new instance of the V1JSONSchemaProps class.
            </summary>
            <param name="refProperty">
            
            </param>
            <param name="schema">
            
            </param>
            <param name="additionalItems">
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to
            true for the boolean property.
            </param>
            <param name="additionalProperties">
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to
            true for the boolean property.
            </param>
            <param name="allOf">
            
            </param>
            <param name="anyOf">
            
            </param>
            <param name="defaultProperty">
            default is a default value for undefined object fields. Defaulting is a beta
            feature under the CustomResourceDefaulting feature gate. Defaulting requires
            spec.preserveUnknownFields to be false.
            </param>
            <param name="definitions">
            
            </param>
            <param name="dependencies">
            
            </param>
            <param name="description">
            
            </param>
            <param name="enumProperty">
            
            </param>
            <param name="example">
            JSON represents any valid JSON value. These types are supported: bool, int64,
            float64, string, []interface{}, map[string]interface{} and nil.
            </param>
            <param name="exclusiveMaximum">
            
            </param>
            <param name="exclusiveMinimum">
            
            </param>
            <param name="externalDocs">
            
            </param>
            <param name="format">
            format is an OpenAPI v3 format string. Unknown formats are ignored. The
            following formats are validated:
            
            - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI
            as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed
            by Golang net/mail.ParseAddress - hostname: a valid representation for an
            Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an
            IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang
            net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC
            address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase
            defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3:
            an UUID3 that allows uppercase defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4:
            an UUID4 that allows uppercase defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ -
            uuid5: an UUID5 that allows uppercase defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ -
            isbn: an ISBN10 or ISBN13 number string like &quot;0321751043&quot; or &quot;978-0321751041&quot; -
            isbn10: an ISBN10 number string like &quot;0321751043&quot; - isbn13: an ISBN13 number
            string like &quot;978-0321751041&quot; - creditcard: a credit card number defined by the
            regex
            ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$
            with any non digit characters mixed in - ssn: a U.S. social security number
            following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color
            code like &quot;#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ -
            rgbcolor: an RGB color code like rgb like &quot;rgb(255,255,2559&quot; - byte: base64
            encoded binary data - password: any kind of string - date: a date string like
            &quot;2006-01-02&quot; as defined by full-date in RFC3339 - duration: a duration string
            like &quot;22 ns&quot; as parsed by Golang time.ParseDuration or compatible with Scala
            duration format - datetime: a date time string like &quot;2014-12-15T19:30:20.000Z&quot;
            as defined by date-time in RFC3339.
            </param>
            <param name="id">
            
            </param>
            <param name="items">
            JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps
            or an array of JSONSchemaProps. Mainly here for serialization purposes.
            </param>
            <param name="maxItems">
            
            </param>
            <param name="maxLength">
            
            </param>
            <param name="maxProperties">
            
            </param>
            <param name="maximum">
            
            </param>
            <param name="minItems">
            
            </param>
            <param name="minLength">
            
            </param>
            <param name="minProperties">
            
            </param>
            <param name="minimum">
            
            </param>
            <param name="multipleOf">
            
            </param>
            <param name="not">
            
            </param>
            <param name="nullable">
            
            </param>
            <param name="oneOf">
            
            </param>
            <param name="pattern">
            
            </param>
            <param name="patternProperties">
            
            </param>
            <param name="properties">
            
            </param>
            <param name="required">
            
            </param>
            <param name="title">
            
            </param>
            <param name="type">
            
            </param>
            <param name="uniqueItems">
            
            </param>
            <param name="xKubernetesEmbeddedResource">
            x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes
            runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is
            allowed to further restrict the embedded object. kind, apiVersion and metadata
            are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to
            be true, but does not have to be if the object is fully specified (up to kind,
            apiVersion, metadata).
            </param>
            <param name="xKubernetesIntOrString">
            x-kubernetes-int-or-string specifies that this value is either an integer or a
            string. If this is true, an empty type is allowed and type as child of anyOf is
            permitted if following one of the following patterns:
            
            1) anyOf:
            - type: integer
            - type: string
            2) allOf:
            - anyOf:
            - type: integer
            - type: string
            - ... zero or more
            </param>
            <param name="xKubernetesListMapKeys">
            x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type
            `map` by specifying the keys used as the index of the map.
            
            This tag MUST only be used on lists that have the &quot;x-kubernetes-list-type&quot;
            extension set to &quot;map&quot;. Also, the values specified for this attribute must be a
            scalar typed field of the child structure (no nesting is supported).
            
            The properties specified must either be required or have a default value, to
            ensure those properties are present for all list items.
            </param>
            <param name="xKubernetesListType">
            x-kubernetes-list-type annotates an array to further describe its topology. This
            extension must only be used on lists and may have 3 possible values:
            
            1) `atomic`: the list is treated as a single entity, like a scalar.
            Atomic lists will be entirely replaced when updated. This extension
            may be used on any type of list (struct, scalar, ...).
            2) `set`:
            Sets are lists that must not have multiple items with the same value. Each
            value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
            array with x-kubernetes-list-type `atomic`.
            3) `map`:
            These lists are like maps in that their elements have a non-index key
            used to identify them. Order is preserved upon merge. The map tag
            must only be used on a list with elements of type object.
            Defaults to atomic for arrays.
            </param>
            <param name="xKubernetesMapType">
            x-kubernetes-map-type annotates an object to further describe its topology. This
            extension must only be used when type is object and may have 2 possible values:
            
            1) `granular`:
            These maps are actual maps (key-value pairs) and each fields are independent
            from each other (they can each be manipulated by separate actors). This is
            the default behaviour for all maps.
            2) `atomic`: the list is treated as a single entity, like a scalar.
            Atomic maps will be entirely replaced when updated.
            </param>
            <param name="xKubernetesPreserveUnknownFields">
            x-kubernetes-preserve-unknown-fields stops the API server decoding step from
            pruning fields which are not specified in the validation schema. This affects
            fields recursively, but switches back to normal pruning behaviour if nested
            properties or additionalProperties are specified in the schema. This can either
            be true or undefined. False is forbidden.
            </param>
            <param name="xKubernetesValidations">
            x-kubernetes-validations describes a list of validation rules written in the CEL
            expression language. This field is an alpha-level. Using this field requires the
            feature gate `CustomResourceValidationExpressions` to be enabled.
            </param>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.RefProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Schema">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.AdditionalItems">
            <summary>
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to
            true for the boolean property.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.AdditionalProperties">
            <summary>
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to
            true for the boolean property.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.AllOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.AnyOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.DefaultProperty">
            <summary>
            default is a default value for undefined object fields. Defaulting is a beta
            feature under the CustomResourceDefaulting feature gate. Defaulting requires
            spec.preserveUnknownFields to be false.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Definitions">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Dependencies">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.EnumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Example">
            <summary>
            JSON represents any valid JSON value. These types are supported: bool, int64,
            float64, string, []interface{}, map[string]interface{} and nil.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.ExclusiveMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.ExclusiveMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.ExternalDocs">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Format">
            <summary>
            format is an OpenAPI v3 format string. Unknown formats are ignored. The
            following formats are validated:
            
            - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI
            as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed
            by Golang net/mail.ParseAddress - hostname: a valid representation for an
            Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an
            IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang
            net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC
            address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase
            defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3:
            an UUID3 that allows uppercase defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4:
            an UUID4 that allows uppercase defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ -
            uuid5: an UUID5 that allows uppercase defined by the regex
            (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ -
            isbn: an ISBN10 or ISBN13 number string like &quot;0321751043&quot; or &quot;978-0321751041&quot; -
            isbn10: an ISBN10 number string like &quot;0321751043&quot; - isbn13: an ISBN13 number
            string like &quot;978-0321751041&quot; - creditcard: a credit card number defined by the
            regex
            ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$
            with any non digit characters mixed in - ssn: a U.S. social security number
            following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color
            code like &quot;#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ -
            rgbcolor: an RGB color code like rgb like &quot;rgb(255,255,2559&quot; - byte: base64
            encoded binary data - password: any kind of string - date: a date string like
            &quot;2006-01-02&quot; as defined by full-date in RFC3339 - duration: a duration string
            like &quot;22 ns&quot; as parsed by Golang time.ParseDuration or compatible with Scala
            duration format - datetime: a date time string like &quot;2014-12-15T19:30:20.000Z&quot;
            as defined by date-time in RFC3339.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Items">
            <summary>
            JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps
            or an array of JSONSchemaProps. Mainly here for serialization purposes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.MaxItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.MaxProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.MinItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.MinLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.MinProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.MultipleOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Not">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Nullable">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.OneOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Pattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.PatternProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Required">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.UniqueItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.XKubernetesEmbeddedResource">
            <summary>
            x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes
            runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is
            allowed to further restrict the embedded object. kind, apiVersion and metadata
            are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to
            be true, but does not have to be if the object is fully specified (up to kind,
            apiVersion, metadata).
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.XKubernetesIntOrString">
            <summary>
            x-kubernetes-int-or-string specifies that this value is either an integer or a
            string. If this is true, an empty type is allowed and type as child of anyOf is
            permitted if following one of the following patterns:
            
            1) anyOf:
            - type: integer
            - type: string
            2) allOf:
            - anyOf:
            - type: integer
            - type: string
            - ... zero or more
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.XKubernetesListMapKeys">
            <summary>
            x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type
            `map` by specifying the keys used as the index of the map.
            
            This tag MUST only be used on lists that have the &quot;x-kubernetes-list-type&quot;
            extension set to &quot;map&quot;. Also, the values specified for this attribute must be a
            scalar typed field of the child structure (no nesting is supported).
            
            The properties specified must either be required or have a default value, to
            ensure those properties are present for all list items.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.XKubernetesListType">
            <summary>
            x-kubernetes-list-type annotates an array to further describe its topology. This
            extension must only be used on lists and may have 3 possible values:
            
            1) `atomic`: the list is treated as a single entity, like a scalar.
            Atomic lists will be entirely replaced when updated. This extension
            may be used on any type of list (struct, scalar, ...).
            2) `set`:
            Sets are lists that must not have multiple items with the same value. Each
            value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
            array with x-kubernetes-list-type `atomic`.
            3) `map`:
            These lists are like maps in that their elements have a non-index key
            used to identify them. Order is preserved upon merge. The map tag
            must only be used on a list with elements of type object.
            Defaults to atomic for arrays.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.XKubernetesMapType">
            <summary>
            x-kubernetes-map-type annotates an object to further describe its topology. This
            extension must only be used when type is object and may have 2 possible values:
            
            1) `granular`:
            These maps are actual maps (key-value pairs) and each fields are independent
            from each other (they can each be manipulated by separate actors). This is
            the default behaviour for all maps.
            2) `atomic`: the list is treated as a single entity, like a scalar.
            Atomic maps will be entirely replaced when updated.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.XKubernetesPreserveUnknownFields">
            <summary>
            x-kubernetes-preserve-unknown-fields stops the API server decoding step from
            pruning fields which are not specified in the validation schema. This affects
            fields recursively, but switches back to normal pruning behaviour if nested
            properties or additionalProperties are specified in the schema. This can either
            be true or undefined. False is forbidden.
            </summary>
        </member>
        <member name="P:k8s.Models.V1JSONSchemaProps.XKubernetesValidations">
            <summary>
            x-kubernetes-validations describes a list of validation rules written in the CEL
            expression language. This field is an alpha-level. Using this field requires the
            feature gate `CustomResourceValidationExpressions` to be enabled.
            </summary>
        </member>
        <member name="M:k8s.Models.V1JSONSchemaProps.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Apiextensionsv1ServiceReference">
            <summary>
            ServiceReference holds a reference to Service.legacy.k8s.io
            </summary>
        </member>
        <member name="M:k8s.Models.Apiextensionsv1ServiceReference.#ctor">
            <summary>
            Initializes a new instance of the Apiextensionsv1ServiceReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.Apiextensionsv1ServiceReference.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the Apiextensionsv1ServiceReference class.
            </summary>
            <param name="name">
            name is the name of the service. Required
            </param>
            <param name="namespaceProperty">
            namespace is the namespace of the service. Required
            </param>
            <param name="path">
            path is an optional URL path at which the webhook will be contacted.
            </param>
            <param name="port">
            port is an optional service port at which the webhook will be contacted. `port`
            should be a valid port number (1-65535, inclusive). Defaults to 443 for backward
            compatibility.
            </param>
        </member>
        <member name="P:k8s.Models.Apiextensionsv1ServiceReference.Name">
            <summary>
            name is the name of the service. Required
            </summary>
        </member>
        <member name="P:k8s.Models.Apiextensionsv1ServiceReference.NamespaceProperty">
            <summary>
            namespace is the namespace of the service. Required
            </summary>
        </member>
        <member name="P:k8s.Models.Apiextensionsv1ServiceReference.Path">
            <summary>
            path is an optional URL path at which the webhook will be contacted.
            </summary>
        </member>
        <member name="P:k8s.Models.Apiextensionsv1ServiceReference.Port">
            <summary>
            port is an optional service port at which the webhook will be contacted. `port`
            should be a valid port number (1-65535, inclusive). Defaults to 443 for backward
            compatibility.
            </summary>
        </member>
        <member name="M:k8s.Models.Apiextensionsv1ServiceReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ValidationRule">
            <summary>
            ValidationRule describes a validation rule written in the CEL expression
            language.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidationRule.#ctor">
            <summary>
            Initializes a new instance of the V1ValidationRule class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidationRule.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ValidationRule class.
            </summary>
            <param name="rule">
            Rule represents the expression which will be evaluated by CEL. ref:
            https://github.com/google/cel-spec The Rule is scoped to the location of the
            x-kubernetes-validations extension in the schema. The `self` variable in the CEL
            expression is bound to the scoped value. Example: - Rule scoped to the root of a
            resource with a status subresource: {&quot;rule&quot;: &quot;self.status.actual &lt;=
            self.spec.maxDesired&quot;}
            
            If the Rule is scoped to an object with properties, the accessible properties of
            the object are field selectable via `self.field` and field presence can be
            checked via `has(self.field)`. Null valued fields are treated as absent fields
            in CEL expressions. If the Rule is scoped to an object with additionalProperties
            (i.e. a map) the value of the map are accessible via `self[mapKey]`, map
            containment can be checked via `mapKey in self` and all entries of the map are
            accessible via CEL macros and functions such as `self.all(...)`. If the Rule is
            scoped to an array, the elements of the array are accessible via `self[i]` and
            also by macros and functions. If the Rule is scoped to a scalar, `self` is bound
            to the scalar value. Examples: - Rule scoped to a map of objects: {&quot;rule&quot;:
            &quot;self.components[&apos;Widget&apos;].priority &lt; 10&quot;} - Rule scoped to a list of integers:
            {&quot;rule&quot;: &quot;self.values.all(value, value &gt;= 0 &amp;&amp; value &lt; 100)&quot;} - Rule scoped to a
            string value: {&quot;rule&quot;: &quot;self.startsWith(&apos;kube&apos;)&quot;}
            
            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
            accessible from the root of the object and from any
            x-kubernetes-embedded-resource annotated objects. No other metadata properties
            are accessible.
            
            Unknown data preserved in custom resources via
            x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This
            includes: - Unknown field values that are preserved by object schemas with
            x-kubernetes-preserve-unknown-fields. - Object properties where the property
            schema is of an &quot;unknown type&quot;. An &quot;unknown type&quot; is recursively defined as:
            - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
            - An array where the items schema is of an &quot;unknown type&quot;
            - An object where the additionalProperties schema is of an &quot;unknown type&quot;
            
            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
            Accessible property names are escaped according to the following rules when
            accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
            &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
            names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
            keywords are:
            &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
            &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
            &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
            Examples:
            - Rule accessing a property named &quot;namespace&quot;: {&quot;rule&quot;: &quot;self.__namespace__ &gt;
            0&quot;}
            - Rule accessing a property named &quot;x-prop&quot;: {&quot;rule&quot;: &quot;self.x__dash__prop &gt; 0&quot;}
            - Rule accessing a property named &quot;redact__d&quot;: {&quot;rule&quot;:
            &quot;self.redact__underscores__d &gt; 0&quot;}
            
            Equality on arrays with x-kubernetes-list-type of &apos;set&apos; or &apos;map&apos; ignores element
            order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with
            x-kubernetes-list-type use the semantics of the list type:
            - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
            `X` are preserved and
            non-intersecting elements in `Y` are appended, retaining their partial order.
            - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values
            are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
            Elements in `Y` with
            non-intersecting keys are appended, retaining their partial order.
            </param>
            <param name="fieldPath">
            fieldPath represents the field path returned when the validation fails. It must
            be a relative JSON path (i.e. with array notation) scoped to the location of
            this x-kubernetes-validations extension in the schema and refer to an existing
            field. e.g. when validation checks if a specific attribute `foo` under a map
            `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks
            two lists must have unique attributes, the fieldPath could be set to either of
            the list: e.g. `.testList` It does not support list numeric index. It supports
            child operation to refer to an existing field currently. Refer to [JSONPath
            support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/)
            for more info. Numeric index of array is not supported. For field name which
            contains special characters, use `[&apos;specialName&apos;]` to refer the field name. e.g.
            for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set
            to `.testList[&apos;foo.34$&apos;]`
            </param>
            <param name="message">
            Message represents the message displayed when validation fails. The message is
            required if the Rule contains line breaks. The message must not contain line
            breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL with
            the host matching spec.host&quot;
            </param>
            <param name="messageExpression">
            MessageExpression declares a CEL expression that evaluates to the validation
            failure message that is returned when this rule fails. Since messageExpression
            is used as a failure message, it must evaluate to a string. If both message and
            messageExpression are present on a rule, then messageExpression will be used if
            validation fails. If messageExpression results in a runtime error, the runtime
            error is logged, and the validation failure message is produced as if the
            messageExpression field were unset. If messageExpression evaluates to an empty
            string, a string with only spaces, or a string that contains line breaks, then
            the validation failure message will also be produced as if the messageExpression
            field were unset, and the fact that messageExpression produced an empty
            string/string with only spaces/string with line breaks will be logged.
            messageExpression has access to all the same variables as the rule; the only
            difference is the return type. Example: &quot;x must be less than max
            (&quot;+string(self.max)+&quot;)&quot;
            </param>
            <param name="reason">
            reason provides a machine-readable validation failure reason that is returned to
            the caller when a request fails this validation rule. The HTTP status code
            returned to the caller will match the reason of the reason of the first failed
            validation rule. The currently supported reasons are: &quot;FieldValueInvalid&quot;,
            &quot;FieldValueForbidden&quot;, &quot;FieldValueRequired&quot;, &quot;FieldValueDuplicate&quot;. If not set,
            default to use &quot;FieldValueInvalid&quot;. All future added reasons must be accepted by
            clients when reading this value and unknown reasons should be treated as
            FieldValueInvalid.
            </param>
        </member>
        <member name="P:k8s.Models.V1ValidationRule.FieldPath">
            <summary>
            fieldPath represents the field path returned when the validation fails. It must
            be a relative JSON path (i.e. with array notation) scoped to the location of
            this x-kubernetes-validations extension in the schema and refer to an existing
            field. e.g. when validation checks if a specific attribute `foo` under a map
            `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks
            two lists must have unique attributes, the fieldPath could be set to either of
            the list: e.g. `.testList` It does not support list numeric index. It supports
            child operation to refer to an existing field currently. Refer to [JSONPath
            support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/)
            for more info. Numeric index of array is not supported. For field name which
            contains special characters, use `[&apos;specialName&apos;]` to refer the field name. e.g.
            for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set
            to `.testList[&apos;foo.34$&apos;]`
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidationRule.Message">
            <summary>
            Message represents the message displayed when validation fails. The message is
            required if the Rule contains line breaks. The message must not contain line
            breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL with
            the host matching spec.host&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidationRule.MessageExpression">
            <summary>
            MessageExpression declares a CEL expression that evaluates to the validation
            failure message that is returned when this rule fails. Since messageExpression
            is used as a failure message, it must evaluate to a string. If both message and
            messageExpression are present on a rule, then messageExpression will be used if
            validation fails. If messageExpression results in a runtime error, the runtime
            error is logged, and the validation failure message is produced as if the
            messageExpression field were unset. If messageExpression evaluates to an empty
            string, a string with only spaces, or a string that contains line breaks, then
            the validation failure message will also be produced as if the messageExpression
            field were unset, and the fact that messageExpression produced an empty
            string/string with only spaces/string with line breaks will be logged.
            messageExpression has access to all the same variables as the rule; the only
            difference is the return type. Example: &quot;x must be less than max
            (&quot;+string(self.max)+&quot;)&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidationRule.Reason">
            <summary>
            reason provides a machine-readable validation failure reason that is returned to
            the caller when a request fails this validation rule. The HTTP status code
            returned to the caller will match the reason of the reason of the first failed
            validation rule. The currently supported reasons are: &quot;FieldValueInvalid&quot;,
            &quot;FieldValueForbidden&quot;, &quot;FieldValueRequired&quot;, &quot;FieldValueDuplicate&quot;. If not set,
            default to use &quot;FieldValueInvalid&quot;. All future added reasons must be accepted by
            clients when reading this value and unknown reasons should be treated as
            FieldValueInvalid.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ValidationRule.Rule">
            <summary>
            Rule represents the expression which will be evaluated by CEL. ref:
            https://github.com/google/cel-spec The Rule is scoped to the location of the
            x-kubernetes-validations extension in the schema. The `self` variable in the CEL
            expression is bound to the scoped value. Example: - Rule scoped to the root of a
            resource with a status subresource: {&quot;rule&quot;: &quot;self.status.actual &lt;=
            self.spec.maxDesired&quot;}
            
            If the Rule is scoped to an object with properties, the accessible properties of
            the object are field selectable via `self.field` and field presence can be
            checked via `has(self.field)`. Null valued fields are treated as absent fields
            in CEL expressions. If the Rule is scoped to an object with additionalProperties
            (i.e. a map) the value of the map are accessible via `self[mapKey]`, map
            containment can be checked via `mapKey in self` and all entries of the map are
            accessible via CEL macros and functions such as `self.all(...)`. If the Rule is
            scoped to an array, the elements of the array are accessible via `self[i]` and
            also by macros and functions. If the Rule is scoped to a scalar, `self` is bound
            to the scalar value. Examples: - Rule scoped to a map of objects: {&quot;rule&quot;:
            &quot;self.components[&apos;Widget&apos;].priority &lt; 10&quot;} - Rule scoped to a list of integers:
            {&quot;rule&quot;: &quot;self.values.all(value, value &gt;= 0 &amp;&amp; value &lt; 100)&quot;} - Rule scoped to a
            string value: {&quot;rule&quot;: &quot;self.startsWith(&apos;kube&apos;)&quot;}
            
            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
            accessible from the root of the object and from any
            x-kubernetes-embedded-resource annotated objects. No other metadata properties
            are accessible.
            
            Unknown data preserved in custom resources via
            x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This
            includes: - Unknown field values that are preserved by object schemas with
            x-kubernetes-preserve-unknown-fields. - Object properties where the property
            schema is of an &quot;unknown type&quot;. An &quot;unknown type&quot; is recursively defined as:
            - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
            - An array where the items schema is of an &quot;unknown type&quot;
            - An object where the additionalProperties schema is of an &quot;unknown type&quot;
            
            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
            Accessible property names are escaped according to the following rules when
            accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
            &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
            names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
            keywords are:
            &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
            &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
            &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
            Examples:
            - Rule accessing a property named &quot;namespace&quot;: {&quot;rule&quot;: &quot;self.__namespace__ &gt;
            0&quot;}
            - Rule accessing a property named &quot;x-prop&quot;: {&quot;rule&quot;: &quot;self.x__dash__prop &gt; 0&quot;}
            - Rule accessing a property named &quot;redact__d&quot;: {&quot;rule&quot;:
            &quot;self.redact__underscores__d &gt; 0&quot;}
            
            Equality on arrays with x-kubernetes-list-type of &apos;set&apos; or &apos;map&apos; ignores element
            order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with
            x-kubernetes-list-type use the semantics of the list type:
            - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
            `X` are preserved and
            non-intersecting elements in `Y` are appended, retaining their partial order.
            - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values
            are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
            Elements in `Y` with
            non-intersecting keys are appended, retaining their partial order.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ValidationRule.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Apiextensionsv1WebhookClientConfig">
            <summary>
            WebhookClientConfig contains the information to make a TLS connection with the
            webhook.
            </summary>
        </member>
        <member name="M:k8s.Models.Apiextensionsv1WebhookClientConfig.#ctor">
            <summary>
            Initializes a new instance of the Apiextensionsv1WebhookClientConfig class.
            </summary>
        </member>
        <member name="M:k8s.Models.Apiextensionsv1WebhookClientConfig.#ctor(System.Byte[],k8s.Models.Apiextensionsv1ServiceReference,System.String)">
            <summary>
            Initializes a new instance of the Apiextensionsv1WebhookClientConfig class.
            </summary>
            <param name="caBundle">
            caBundle is a PEM encoded CA bundle which will be used to validate the webhook&apos;s
            server certificate. If unspecified, system trust roots on the apiserver are
            used.
            </param>
            <param name="service">
            service is a reference to the service for this webhook. Either service or url
            must be specified.
            
            If the webhook is running within the cluster, then you should use `service`.
            </param>
            <param name="url">
            url gives the location of the webhook, in standard URL form
            (`scheme://host:port/path`). Exactly one of `url` or `service` must be
            specified.
            
            The `host` should not refer to a service running in the cluster; use the
            `service` field instead. The host might be resolved via external DNS in some
            apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would
            be a layering violation). `host` may also be an IP address.
            
            Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless
            you take great care to run this webhook on all hosts which run an apiserver
            which might need to make calls to this webhook. Such installs are likely to be
            non-portable, i.e., not easy to turn up in a new cluster.
            
            The scheme must be &quot;https&quot;; the URL must begin with &quot;https://&quot;.
            
            A path is optional, and if present may be any string permissible in a URL. You
            may use the path to pass an arbitrary string to the webhook, for example, a
            cluster identifier.
            
            Attempting to use a user or basic auth e.g. &quot;user:password@&quot; is not allowed.
            Fragments (&quot;#...&quot;) and query parameters (&quot;?...&quot;) are not allowed, either.
            </param>
        </member>
        <member name="P:k8s.Models.Apiextensionsv1WebhookClientConfig.CaBundle">
            <summary>
            caBundle is a PEM encoded CA bundle which will be used to validate the webhook&apos;s
            server certificate. If unspecified, system trust roots on the apiserver are
            used.
            </summary>
        </member>
        <member name="P:k8s.Models.Apiextensionsv1WebhookClientConfig.Service">
            <summary>
            service is a reference to the service for this webhook. Either service or url
            must be specified.
            
            If the webhook is running within the cluster, then you should use `service`.
            </summary>
        </member>
        <member name="P:k8s.Models.Apiextensionsv1WebhookClientConfig.Url">
            <summary>
            url gives the location of the webhook, in standard URL form
            (`scheme://host:port/path`). Exactly one of `url` or `service` must be
            specified.
            
            The `host` should not refer to a service running in the cluster; use the
            `service` field instead. The host might be resolved via external DNS in some
            apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would
            be a layering violation). `host` may also be an IP address.
            
            Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless
            you take great care to run this webhook on all hosts which run an apiserver
            which might need to make calls to this webhook. Such installs are likely to be
            non-portable, i.e., not easy to turn up in a new cluster.
            
            The scheme must be &quot;https&quot;; the URL must begin with &quot;https://&quot;.
            
            A path is optional, and if present may be any string permissible in a URL. You
            may use the path to pass an arbitrary string to the webhook, for example, a
            cluster identifier.
            
            Attempting to use a user or basic auth e.g. &quot;user:password@&quot; is not allowed.
            Fragments (&quot;#...&quot;) and query parameters (&quot;?...&quot;) are not allowed, either.
            </summary>
        </member>
        <member name="M:k8s.Models.Apiextensionsv1WebhookClientConfig.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1WebhookConversion">
            <summary>
            WebhookConversion describes how to call a conversion webhook
            </summary>
        </member>
        <member name="M:k8s.Models.V1WebhookConversion.#ctor">
            <summary>
            Initializes a new instance of the V1WebhookConversion class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WebhookConversion.#ctor(System.Collections.Generic.IList{System.String},k8s.Models.Apiextensionsv1WebhookClientConfig)">
            <summary>
            Initializes a new instance of the V1WebhookConversion class.
            </summary>
            <param name="conversionReviewVersions">
            conversionReviewVersions is an ordered list of preferred `ConversionReview`
            versions the Webhook expects. The API server will use the first version in the
            list which it supports. If none of the versions specified in this list are
            supported by API server, conversion will fail for the custom resource. If a
            persisted Webhook configuration specifies allowed versions and does not include
            any versions known to the API Server, calls to the webhook will fail.
            </param>
            <param name="clientConfig">
            clientConfig is the instructions for how to call the webhook if strategy is
            `Webhook`.
            </param>
        </member>
        <member name="P:k8s.Models.V1WebhookConversion.ClientConfig">
            <summary>
            clientConfig is the instructions for how to call the webhook if strategy is
            `Webhook`.
            </summary>
        </member>
        <member name="P:k8s.Models.V1WebhookConversion.ConversionReviewVersions">
            <summary>
            conversionReviewVersions is an ordered list of preferred `ConversionReview`
            versions the Webhook expects. The API server will use the first version in the
            list which it supports. If none of the versions specified in this list are
            supported by API server, conversion will fail for the custom resource. If a
            persisted Webhook configuration specifies allowed versions and does not include
            any versions known to the API Server, calls to the webhook will fail.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WebhookConversion.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIGroup">
            <summary>
            APIGroup contains the name, the supported versions, and the preferred version of
            a group.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIGroup.#ctor">
            <summary>
            Initializes a new instance of the V1APIGroup class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIGroup.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1GroupVersionForDiscovery},System.String,System.String,k8s.Models.V1GroupVersionForDiscovery,System.Collections.Generic.IList{k8s.Models.V1ServerAddressByClientCIDR})">
            <summary>
            Initializes a new instance of the V1APIGroup class.
            </summary>
            <param name="name">
            name is the name of the group.
            </param>
            <param name="versions">
            versions are the versions supported in this group.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="preferredVersion">
            preferredVersion is the version preferred by the API server, which probably is
            the storage version.
            </param>
            <param name="serverAddressByClientCIDRs">
            a map of client CIDR to server address that is serving this group. This is to
            help clients reach servers in the most network-efficient way possible. Clients
            can use the appropriate server address as per the CIDR that they match. In case
            of multiple matches, clients should use the longest matching CIDR. The server
            returns only those CIDRs that it thinks that the client can match. For example:
            the master will return an internal IP CIDR only, if the client reaches the
            server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
            header or request.RemoteAddr (in that order) to get the client IP.
            </param>
        </member>
        <member name="P:k8s.Models.V1APIGroup.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIGroup.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIGroup.Name">
            <summary>
            name is the name of the group.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIGroup.PreferredVersion">
            <summary>
            preferredVersion is the version preferred by the API server, which probably is
            the storage version.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIGroup.ServerAddressByClientCIDRs">
            <summary>
            a map of client CIDR to server address that is serving this group. This is to
            help clients reach servers in the most network-efficient way possible. Clients
            can use the appropriate server address as per the CIDR that they match. In case
            of multiple matches, clients should use the longest matching CIDR. The server
            returns only those CIDRs that it thinks that the client can match. For example:
            the master will return an internal IP CIDR only, if the client reaches the
            server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
            header or request.RemoteAddr (in that order) to get the client IP.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIGroup.Versions">
            <summary>
            versions are the versions supported in this group.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIGroup.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIGroupList">
            <summary>
            APIGroupList is a list of APIGroup, to allow clients to discover the API at
            /apis.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIGroupList.#ctor">
            <summary>
            Initializes a new instance of the V1APIGroupList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIGroupList.#ctor(System.Collections.Generic.IList{k8s.Models.V1APIGroup},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1APIGroupList class.
            </summary>
            <param name="groups">
            groups is a list of APIGroup.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1APIGroupList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIGroupList.Groups">
            <summary>
            groups is a list of APIGroup.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIGroupList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIGroupList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIResource">
            <summary>
            APIResource specifies the name of a resource and whether it is namespaced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIResource.#ctor">
            <summary>
            Initializes a new instance of the V1APIResource class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIResource.#ctor(System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1APIResource class.
            </summary>
            <param name="kind">
            kind is the kind for the resource (e.g. &apos;Foo&apos; is the kind for a resource &apos;foo&apos;)
            </param>
            <param name="name">
            name is the plural name of the resource.
            </param>
            <param name="namespaced">
            namespaced indicates if a resource is namespaced or not.
            </param>
            <param name="singularName">
            singularName is the singular name of the resource.  This allows clients to
            handle plural and singular opaquely. The singularName is more correct for
            reporting status on a single item and both singular and plural are allowed from
            the kubectl CLI interface.
            </param>
            <param name="verbs">
            verbs is a list of supported kube verbs (this includes get, list, watch, create,
            update, patch, delete, deletecollection, and proxy)
            </param>
            <param name="categories">
            categories is a list of the grouped resources this resource belongs to (e.g.
            &apos;all&apos;)
            </param>
            <param name="group">
            group is the preferred group of the resource.  Empty implies the group of the
            containing resource list. For subresources, this may have a different value, for
            example: Scale&quot;.
            </param>
            <param name="shortNames">
            shortNames is a list of suggested short names of the resource.
            </param>
            <param name="storageVersionHash">
            The hash value of the storage version, the version this resource is converted to
            when written to the data store. Value must be treated as opaque by clients. Only
            equality comparison on the value is valid. This is an alpha feature and may
            change or be removed in the future. The field is populated by the apiserver only
            if the StorageVersionHash feature gate is enabled. This field will remain
            optional even if it graduates.
            </param>
            <param name="version">
            version is the preferred version of the resource.  Empty implies the version of
            the containing resource list For subresources, this may have a different value,
            for example: v1 (while inside a v1beta1 version of the core resource&apos;s group)&quot;.
            </param>
        </member>
        <member name="P:k8s.Models.V1APIResource.Categories">
            <summary>
            categories is a list of the grouped resources this resource belongs to (e.g.
            &apos;all&apos;)
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.Group">
            <summary>
            group is the preferred group of the resource.  Empty implies the group of the
            containing resource list. For subresources, this may have a different value, for
            example: Scale&quot;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.Kind">
            <summary>
            kind is the kind for the resource (e.g. &apos;Foo&apos; is the kind for a resource &apos;foo&apos;)
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.Name">
            <summary>
            name is the plural name of the resource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.Namespaced">
            <summary>
            namespaced indicates if a resource is namespaced or not.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.ShortNames">
            <summary>
            shortNames is a list of suggested short names of the resource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.SingularName">
            <summary>
            singularName is the singular name of the resource.  This allows clients to
            handle plural and singular opaquely. The singularName is more correct for
            reporting status on a single item and both singular and plural are allowed from
            the kubectl CLI interface.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.StorageVersionHash">
            <summary>
            The hash value of the storage version, the version this resource is converted to
            when written to the data store. Value must be treated as opaque by clients. Only
            equality comparison on the value is valid. This is an alpha feature and may
            change or be removed in the future. The field is populated by the apiserver only
            if the StorageVersionHash feature gate is enabled. This field will remain
            optional even if it graduates.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.Verbs">
            <summary>
            verbs is a list of supported kube verbs (this includes get, list, watch, create,
            update, patch, delete, deletecollection, and proxy)
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResource.Version">
            <summary>
            version is the preferred version of the resource.  Empty implies the version of
            the containing resource list For subresources, this may have a different value,
            for example: v1 (while inside a v1beta1 version of the core resource&apos;s group)&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIResource.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIResourceList">
            <summary>
            APIResourceList is a list of APIResource, it is used to expose the name of the
            resources supported in a specific group and version, and if the resource is
            namespaced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIResourceList.#ctor">
            <summary>
            Initializes a new instance of the V1APIResourceList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIResourceList.#ctor(System.String,System.Collections.Generic.IList{k8s.Models.V1APIResource},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1APIResourceList class.
            </summary>
            <param name="groupVersion">
            groupVersion is the group and version this APIResourceList is for.
            </param>
            <param name="resources">
            resources contains the name of the resources and if they are namespaced.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1APIResourceList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResourceList.GroupVersion">
            <summary>
            groupVersion is the group and version this APIResourceList is for.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResourceList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIResourceList.Resources">
            <summary>
            resources contains the name of the resources and if they are namespaced.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIResourceList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIVersions">
            <summary>
            APIVersions lists the versions that are available, to allow clients to discover
            the API at /api, which is the root path of the legacy v1 API.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIVersions.#ctor">
            <summary>
            Initializes a new instance of the V1APIVersions class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIVersions.#ctor(System.Collections.Generic.IList{k8s.Models.V1ServerAddressByClientCIDR},System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1APIVersions class.
            </summary>
            <param name="serverAddressByClientCIDRs">
            a map of client CIDR to server address that is serving this group. This is to
            help clients reach servers in the most network-efficient way possible. Clients
            can use the appropriate server address as per the CIDR that they match. In case
            of multiple matches, clients should use the longest matching CIDR. The server
            returns only those CIDRs that it thinks that the client can match. For example:
            the master will return an internal IP CIDR only, if the client reaches the
            server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
            header or request.RemoteAddr (in that order) to get the client IP.
            </param>
            <param name="versions">
            versions are the api versions that are available.
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
        </member>
        <member name="P:k8s.Models.V1APIVersions.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIVersions.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIVersions.ServerAddressByClientCIDRs">
            <summary>
            a map of client CIDR to server address that is serving this group. This is to
            help clients reach servers in the most network-efficient way possible. Clients
            can use the appropriate server address as per the CIDR that they match. In case
            of multiple matches, clients should use the longest matching CIDR. The server
            returns only those CIDRs that it thinks that the client can match. For example:
            the master will return an internal IP CIDR only, if the client reaches the
            server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
            header or request.RemoteAddr (in that order) to get the client IP.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIVersions.Versions">
            <summary>
            versions are the api versions that are available.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIVersions.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Condition">
            <summary>
            Condition contains details for one aspect of the current state of this API
            Resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Condition.#ctor">
            <summary>
            Initializes a new instance of the V1Condition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Condition.#ctor(System.DateTime,System.String,System.String,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the V1Condition class.
            </summary>
            <param name="lastTransitionTime">
            lastTransitionTime is the last time the condition transitioned from one status
            to another. This should be when the underlying condition changed.  If that is
            not known, then using the time when the API field changed is acceptable.
            </param>
            <param name="message">
            message is a human readable message indicating details about the transition.
            This may be an empty string.
            </param>
            <param name="reason">
            reason contains a programmatic identifier indicating the reason for the
            condition&apos;s last transition. Producers of specific condition types may define
            expected values and meanings for this field, and whether the values are
            considered a guaranteed API. The value should be a CamelCase string. This field
            may not be empty.
            </param>
            <param name="status">
            status of the condition, one of True, False, Unknown.
            </param>
            <param name="type">
            type of condition in CamelCase or in foo.example.com/CamelCase.
            </param>
            <param name="observedGeneration">
            observedGeneration represents the .metadata.generation that the condition was
            set based upon. For instance, if .metadata.generation is currently 12, but the
            .status.conditions[x].observedGeneration is 9, the condition is out of date with
            respect to the current state of the instance.
            </param>
        </member>
        <member name="P:k8s.Models.V1Condition.LastTransitionTime">
            <summary>
            lastTransitionTime is the last time the condition transitioned from one status
            to another. This should be when the underlying condition changed.  If that is
            not known, then using the time when the API field changed is acceptable.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Condition.Message">
            <summary>
            message is a human readable message indicating details about the transition.
            This may be an empty string.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Condition.ObservedGeneration">
            <summary>
            observedGeneration represents the .metadata.generation that the condition was
            set based upon. For instance, if .metadata.generation is currently 12, but the
            .status.conditions[x].observedGeneration is 9, the condition is out of date with
            respect to the current state of the instance.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Condition.Reason">
            <summary>
            reason contains a programmatic identifier indicating the reason for the
            condition&apos;s last transition. Producers of specific condition types may define
            expected values and meanings for this field, and whether the values are
            considered a guaranteed API. The value should be a CamelCase string. This field
            may not be empty.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Condition.Status">
            <summary>
            status of the condition, one of True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1Condition.Type">
            <summary>
            type of condition in CamelCase or in foo.example.com/CamelCase.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Condition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1DeleteOptions">
            <summary>
            DeleteOptions may be provided when deleting an API object.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeleteOptions.#ctor">
            <summary>
            Initializes a new instance of the V1DeleteOptions class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeleteOptions.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},k8s.Models.V1Preconditions,System.String)">
            <summary>
            Initializes a new instance of the V1DeleteOptions class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="dryRun">
            When present, indicates that modifications should not be persisted. An invalid
            or unrecognized dryRun directive will result in an error response and no further
            processing of the request. Valid values are: - All: all dry run stages will be
            processed
            </param>
            <param name="gracePeriodSeconds">
            The duration in seconds before the object should be deleted. Value must be
            non-negative integer. The value zero indicates delete immediately. If this value
            is nil, the default grace period for the specified type will be used. Defaults
            to a per object value if not specified. zero means delete immediately.
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="orphanDependents">
            Deprecated: please use the PropagationPolicy, this field will be deprecated in
            1.7. Should the dependent objects be orphaned. If true/false, the &quot;orphan&quot;
            finalizer will be added to/removed from the object&apos;s finalizers list. Either
            this field or PropagationPolicy may be set, but not both.
            </param>
            <param name="preconditions">
            Must be fulfilled before a deletion is carried out. If not possible, a 409
            Conflict status will be returned.
            </param>
            <param name="propagationPolicy">
            Whether and how garbage collection will be performed. Either this field or
            OrphanDependents may be set, but not both. The default policy is decided by the
            existing finalizer set in the metadata.finalizers and the resource-specific
            default policy. Acceptable values are: &apos;Orphan&apos; - orphan the dependents;
            &apos;Background&apos; - allow the garbage collector to delete the dependents in the
            background; &apos;Foreground&apos; - a cascading policy that deletes all dependents in the
            foreground.
            </param>
        </member>
        <member name="P:k8s.Models.V1DeleteOptions.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeleteOptions.DryRun">
            <summary>
            When present, indicates that modifications should not be persisted. An invalid
            or unrecognized dryRun directive will result in an error response and no further
            processing of the request. Valid values are: - All: all dry run stages will be
            processed
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeleteOptions.GracePeriodSeconds">
            <summary>
            The duration in seconds before the object should be deleted. Value must be
            non-negative integer. The value zero indicates delete immediately. If this value
            is nil, the default grace period for the specified type will be used. Defaults
            to a per object value if not specified. zero means delete immediately.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeleteOptions.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeleteOptions.OrphanDependents">
            <summary>
            Deprecated: please use the PropagationPolicy, this field will be deprecated in
            1.7. Should the dependent objects be orphaned. If true/false, the &quot;orphan&quot;
            finalizer will be added to/removed from the object&apos;s finalizers list. Either
            this field or PropagationPolicy may be set, but not both.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeleteOptions.Preconditions">
            <summary>
            Must be fulfilled before a deletion is carried out. If not possible, a 409
            Conflict status will be returned.
            </summary>
        </member>
        <member name="P:k8s.Models.V1DeleteOptions.PropagationPolicy">
            <summary>
            Whether and how garbage collection will be performed. Either this field or
            OrphanDependents may be set, but not both. The default policy is decided by the
            existing finalizer set in the metadata.finalizers and the resource-specific
            default policy. Acceptable values are: &apos;Orphan&apos; - orphan the dependents;
            &apos;Background&apos; - allow the garbage collector to delete the dependents in the
            background; &apos;Foreground&apos; - a cascading policy that deletes all dependents in the
            foreground.
            </summary>
        </member>
        <member name="M:k8s.Models.V1DeleteOptions.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1GroupVersionForDiscovery">
            <summary>
            GroupVersion contains the &quot;group/version&quot; and &quot;version&quot; string of a version. It
            is made a struct to keep extensibility.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GroupVersionForDiscovery.#ctor">
            <summary>
            Initializes a new instance of the V1GroupVersionForDiscovery class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GroupVersionForDiscovery.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1GroupVersionForDiscovery class.
            </summary>
            <param name="groupVersion">
            groupVersion specifies the API group and version in the form &quot;group/version&quot;
            </param>
            <param name="version">
            version specifies the version in the form of &quot;version&quot;. This is to save the
            clients the trouble of splitting the GroupVersion.
            </param>
        </member>
        <member name="P:k8s.Models.V1GroupVersionForDiscovery.GroupVersion">
            <summary>
            groupVersion specifies the API group and version in the form &quot;group/version&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1GroupVersionForDiscovery.Version">
            <summary>
            version specifies the version in the form of &quot;version&quot;. This is to save the
            clients the trouble of splitting the GroupVersion.
            </summary>
        </member>
        <member name="M:k8s.Models.V1GroupVersionForDiscovery.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LabelSelector">
            <summary>
            A label selector is a label query over a set of resources. The result of
            matchLabels and matchExpressions are ANDed. An empty label selector matches all
            objects. A null label selector matches no objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LabelSelector.#ctor">
            <summary>
            Initializes a new instance of the V1LabelSelector class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LabelSelector.#ctor(System.Collections.Generic.IList{k8s.Models.V1LabelSelectorRequirement},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the V1LabelSelector class.
            </summary>
            <param name="matchExpressions">
            matchExpressions is a list of label selector requirements. The requirements are
            ANDed.
            </param>
            <param name="matchLabels">
            matchLabels is a map of {key,value} pairs. A single {key,value} in the
            matchLabels map is equivalent to an element of matchExpressions, whose key field
            is &quot;key&quot;, the operator is &quot;In&quot;, and the values array contains only &quot;value&quot;. The
            requirements are ANDed.
            </param>
        </member>
        <member name="P:k8s.Models.V1LabelSelector.MatchExpressions">
            <summary>
            matchExpressions is a list of label selector requirements. The requirements are
            ANDed.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LabelSelector.MatchLabels">
            <summary>
            matchLabels is a map of {key,value} pairs. A single {key,value} in the
            matchLabels map is equivalent to an element of matchExpressions, whose key field
            is &quot;key&quot;, the operator is &quot;In&quot;, and the values array contains only &quot;value&quot;. The
            requirements are ANDed.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LabelSelector.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1LabelSelectorRequirement">
            <summary>
            A label selector requirement is a selector that contains values, a key, and an
            operator that relates the key and values.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LabelSelectorRequirement.#ctor">
            <summary>
            Initializes a new instance of the V1LabelSelectorRequirement class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LabelSelectorRequirement.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the V1LabelSelectorRequirement class.
            </summary>
            <param name="key">
            key is the label key that the selector applies to.
            </param>
            <param name="operatorProperty">
            operator represents a key&apos;s relationship to a set of values. Valid operators are
            In, NotIn, Exists and DoesNotExist.
            </param>
            <param name="values">
            values is an array of string values. If the operator is In or NotIn, the values
            array must be non-empty. If the operator is Exists or DoesNotExist, the values
            array must be empty. This array is replaced during a strategic merge patch.
            </param>
        </member>
        <member name="P:k8s.Models.V1LabelSelectorRequirement.Key">
            <summary>
            key is the label key that the selector applies to.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LabelSelectorRequirement.OperatorProperty">
            <summary>
            operator represents a key&apos;s relationship to a set of values. Valid operators are
            In, NotIn, Exists and DoesNotExist.
            </summary>
        </member>
        <member name="P:k8s.Models.V1LabelSelectorRequirement.Values">
            <summary>
            values is an array of string values. If the operator is In or NotIn, the values
            array must be non-empty. If the operator is Exists or DoesNotExist, the values
            array must be empty. This array is replaced during a strategic merge patch.
            </summary>
        </member>
        <member name="M:k8s.Models.V1LabelSelectorRequirement.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ListMeta">
            <summary>
            ListMeta describes metadata that synthetic resources must have, including lists
            and various status objects. A resource may have only one of {ObjectMeta,
            ListMeta}.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ListMeta.#ctor">
            <summary>
            Initializes a new instance of the V1ListMeta class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ListMeta.#ctor(System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ListMeta class.
            </summary>
            <param name="continueProperty">
            continue may be set if the user set a limit on the number of items returned, and
            indicates that the server has more data available. The value is opaque and may
            be used to issue another request to the endpoint that served this list to
            retrieve the next set of available objects. Continuing a consistent list may not
            be possible if the server configuration has changed or more than a few minutes
            have passed. The resourceVersion field returned when using this continue value
            will be identical to the value in the first response, unless you have received
            this token from an error message.
            </param>
            <param name="remainingItemCount">
            remainingItemCount is the number of subsequent items in the list which are not
            included in this list response. If the list request contained label or field
            selectors, then the number of remaining items is unknown and the field will be
            left unset and omitted during serialization. If the list is complete (either
            because it is not chunking or because this is the last chunk), then there are no
            more remaining items and this field will be left unset and omitted during
            serialization. Servers older than v1.15 do not set this field. The intended use
            of the remainingItemCount is *estimating* the size of a collection. Clients
            should not rely on the remainingItemCount to be set or to be exact.
            </param>
            <param name="resourceVersion">
            String that identifies the server&apos;s internal version of this object that can be
            used by clients to determine when objects have changed. Value must be treated as
            opaque by clients and passed unmodified back to the server. Populated by the
            system. Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            </param>
            <param name="selfLink">
            Deprecated: selfLink is a legacy read-only field that is no longer populated by
            the system.
            </param>
        </member>
        <member name="P:k8s.Models.V1ListMeta.ContinueProperty">
            <summary>
            continue may be set if the user set a limit on the number of items returned, and
            indicates that the server has more data available. The value is opaque and may
            be used to issue another request to the endpoint that served this list to
            retrieve the next set of available objects. Continuing a consistent list may not
            be possible if the server configuration has changed or more than a few minutes
            have passed. The resourceVersion field returned when using this continue value
            will be identical to the value in the first response, unless you have received
            this token from an error message.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ListMeta.RemainingItemCount">
            <summary>
            remainingItemCount is the number of subsequent items in the list which are not
            included in this list response. If the list request contained label or field
            selectors, then the number of remaining items is unknown and the field will be
            left unset and omitted during serialization. If the list is complete (either
            because it is not chunking or because this is the last chunk), then there are no
            more remaining items and this field will be left unset and omitted during
            serialization. Servers older than v1.15 do not set this field. The intended use
            of the remainingItemCount is *estimating* the size of a collection. Clients
            should not rely on the remainingItemCount to be set or to be exact.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ListMeta.ResourceVersion">
            <summary>
            String that identifies the server&apos;s internal version of this object that can be
            used by clients to determine when objects have changed. Value must be treated as
            opaque by clients and passed unmodified back to the server. Populated by the
            system. Read-only. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            </summary>
        </member>
        <member name="P:k8s.Models.V1ListMeta.SelfLink">
            <summary>
            Deprecated: selfLink is a legacy read-only field that is no longer populated by
            the system.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ListMeta.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ManagedFieldsEntry">
            <summary>
            ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the
            resource that the fieldset applies to.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ManagedFieldsEntry.#ctor">
            <summary>
            Initializes a new instance of the V1ManagedFieldsEntry class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ManagedFieldsEntry.#ctor(System.String,System.String,System.Object,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the V1ManagedFieldsEntry class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the version of this resource that this field set applies to.
            The format is &quot;group/version&quot; just like the top-level APIVersion field. It is
            necessary to track the version of a field set because it cannot be automatically
            converted.
            </param>
            <param name="fieldsType">
            FieldsType is the discriminator for the different fields format and version.
            There is currently only one possible value: &quot;FieldsV1&quot;
            </param>
            <param name="fieldsV1">
            FieldsV1 holds the first JSON version format as described in the &quot;FieldsV1&quot;
            type.
            </param>
            <param name="manager">
            Manager is an identifier of the workflow managing these fields.
            </param>
            <param name="operation">
            Operation is the type of operation which lead to this ManagedFieldsEntry being
            created. The only valid values for this field are &apos;Apply&apos; and &apos;Update&apos;.
            </param>
            <param name="subresource">
            Subresource is the name of the subresource used to update that object, or empty
            string if the object was updated through the main resource. The value of this
            field is used to distinguish between managers, even if they share the same name.
            For example, a status update will be distinct from a regular update using the
            same manager name. Note that the APIVersion field is not related to the
            Subresource field and it always corresponds to the version of the main resource.
            </param>
            <param name="time">
            Time is the timestamp of when the ManagedFields entry was added. The timestamp
            will also be updated if a field is added, the manager changes any of the owned
            fields value or removes a field. The timestamp does not update when a field is
            removed from the entry because another manager took it over.
            </param>
        </member>
        <member name="P:k8s.Models.V1ManagedFieldsEntry.ApiVersion">
            <summary>
            APIVersion defines the version of this resource that this field set applies to.
            The format is &quot;group/version&quot; just like the top-level APIVersion field. It is
            necessary to track the version of a field set because it cannot be automatically
            converted.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ManagedFieldsEntry.FieldsType">
            <summary>
            FieldsType is the discriminator for the different fields format and version.
            There is currently only one possible value: &quot;FieldsV1&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1ManagedFieldsEntry.FieldsV1">
            <summary>
            FieldsV1 holds the first JSON version format as described in the &quot;FieldsV1&quot;
            type.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ManagedFieldsEntry.Manager">
            <summary>
            Manager is an identifier of the workflow managing these fields.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ManagedFieldsEntry.Operation">
            <summary>
            Operation is the type of operation which lead to this ManagedFieldsEntry being
            created. The only valid values for this field are &apos;Apply&apos; and &apos;Update&apos;.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ManagedFieldsEntry.Subresource">
            <summary>
            Subresource is the name of the subresource used to update that object, or empty
            string if the object was updated through the main resource. The value of this
            field is used to distinguish between managers, even if they share the same name.
            For example, a status update will be distinct from a regular update using the
            same manager name. Note that the APIVersion field is not related to the
            Subresource field and it always corresponds to the version of the main resource.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ManagedFieldsEntry.Time">
            <summary>
            Time is the timestamp of when the ManagedFields entry was added. The timestamp
            will also be updated if a field is added, the manager changes any of the owned
            fields value or removes a field. The timestamp does not update when a field is
            removed from the entry because another manager took it over.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ManagedFieldsEntry.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ObjectMeta">
            <summary>
            ObjectMeta is metadata that all persisted resources must have, which includes
            all objects users must create.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectMeta.#ctor">
            <summary>
            Initializes a new instance of the V1ObjectMeta class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectMeta.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Collections.Generic.IList{System.String},System.String,System.Nullable{System.Int64},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{k8s.Models.V1ManagedFieldsEntry},System.String,System.String,System.Collections.Generic.IList{k8s.Models.V1OwnerReference},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ObjectMeta class.
            </summary>
            <param name="annotations">
            Annotations is an unstructured key value map stored with a resource that may be
            set by external tools to store and retrieve arbitrary metadata. They are not
            queryable and should be preserved when modifying objects. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
            </param>
            <param name="creationTimestamp">
            CreationTimestamp is a timestamp representing the server time when this object
            was created. It is not guaranteed to be set in happens-before order across
            separate operations. Clients may not set this value. It is represented in
            RFC3339 form and is in UTC.
            
            Populated by the system. Read-only. Null for lists. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="deletionGracePeriodSeconds">
            Number of seconds allowed for this object to gracefully terminate before it will
            be removed from the system. Only set when deletionTimestamp is also set. May
            only be shortened. Read-only.
            </param>
            <param name="deletionTimestamp">
            DeletionTimestamp is RFC 3339 date and time at which this resource will be
            deleted. This field is set by the server when a graceful deletion is requested
            by the user, and is not directly settable by a client. The resource is expected
            to be deleted (no longer visible from resource lists, and not reachable by name)
            after the time in this field, once the finalizers list is empty. As long as the
            finalizers list contains items, deletion is blocked. Once the deletionTimestamp
            is set, this value may not be unset or be set further into the future, although
            it may be shortened or the resource may be deleted prior to this time. For
            example, a user may request that a pod is deleted in 30 seconds. The Kubelet
            will react by sending a graceful termination signal to the containers in the
            pod. After that 30 seconds, the Kubelet will send a hard termination signal
            (SIGKILL) to the container and after cleanup, remove the pod from the API. In
            the presence of network partitions, this object may still exist after this
            timestamp, until an administrator or automated process can determine the
            resource is fully terminated. If not set, graceful deletion of the object has
            not been requested.
            
            Populated by the system when a graceful deletion is requested. Read-only. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="finalizers">
            Must be empty before the object is deleted from the registry. Each entry is an
            identifier for the responsible component that will remove the entry from the
            list. If the deletionTimestamp of the object is non-nil, entries in this list
            can only be removed. Finalizers may be processed and removed in any order. 
            Order is NOT enforced because it introduces significant risk of stuck
            finalizers. finalizers is a shared field, any actor with permission can reorder
            it. If the finalizer list is processed in order, then this can lead to a
            situation in which the component responsible for the first finalizer in the list
            is waiting for a signal (field value, external system, or other) produced by a
            component responsible for a finalizer later in the list, resulting in a
            deadlock. Without enforced ordering finalizers are free to order amongst
            themselves and are not vulnerable to ordering changes in the list.
            </param>
            <param name="generateName">
            GenerateName is an optional prefix, used by the server, to generate a unique
            name ONLY IF the Name field has not been provided. If this field is used, the
            name returned to the client will be different than the name passed. This value
            will also be combined with a unique suffix. The provided value has the same
            validation rules as the Name field, and may be truncated by the length of the
            suffix required to make the value unique on the server.
            
            If this field is specified and the generated name exists, the server will return
            a 409.
            
            Applied only if Name is not specified. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
            </param>
            <param name="generation">
            A sequence number representing a specific generation of the desired state.
            Populated by the system. Read-only.
            </param>
            <param name="labels">
            Map of string keys and values that can be used to organize and categorize (scope
            and select) objects. May match selectors of replication controllers and
            services. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
            </param>
            <param name="managedFields">
            ManagedFields maps workflow-id and version to the set of fields that are managed
            by that workflow. This is mostly for internal housekeeping, and users typically
            shouldn&apos;t need to set or understand this field. A workflow can be the user&apos;s
            name, a controller&apos;s name, or the name of a specific apply path like &quot;ci-cd&quot;.
            The set of fields is always in the version that the workflow used when modifying
            the object.
            </param>
            <param name="name">
            Name must be unique within a namespace. Is required when creating resources,
            although some resources may allow a client to request the generation of an
            appropriate name automatically. Name is primarily intended for creation
            idempotence and configuration definition. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
            </param>
            <param name="namespaceProperty">
            Namespace defines the space within which each name must be unique. An empty
            namespace is equivalent to the &quot;default&quot; namespace, but &quot;default&quot; is the
            canonical representation. Not all objects are required to be scoped to a
            namespace - the value of this field for those objects will be empty.
            
            Must be a DNS_LABEL. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
            </param>
            <param name="ownerReferences">
            List of objects depended by this object. If ALL objects in the list have been
            deleted, this object will be garbage collected. If this object is managed by a
            controller, then an entry in this list will point to this controller, with the
            controller field set to true. There cannot be more than one managing controller.
            </param>
            <param name="resourceVersion">
            An opaque value that represents the internal version of this object that can be
            used by clients to determine when objects have changed. May be used for
            optimistic concurrency, change detection, and the watch operation on a resource
            or set of resources. Clients must treat these values as opaque and passed
            unmodified back to the server. They may only be valid for a particular resource
            or set of resources.
            
            Populated by the system. Read-only. Value must be treated as opaque by clients
            and . More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            </param>
            <param name="selfLink">
            Deprecated: selfLink is a legacy read-only field that is no longer populated by
            the system.
            </param>
            <param name="uid">
            UID is the unique in time and space value for this object. It is typically
            generated by the server on successful creation of a resource and is not allowed
            to change on PUT operations.
            
            Populated by the system. Read-only. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            </param>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.Annotations">
            <summary>
            Annotations is an unstructured key value map stored with a resource that may be
            set by external tools to store and retrieve arbitrary metadata. They are not
            queryable and should be preserved when modifying objects. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.CreationTimestamp">
            <summary>
            CreationTimestamp is a timestamp representing the server time when this object
            was created. It is not guaranteed to be set in happens-before order across
            separate operations. Clients may not set this value. It is represented in
            RFC3339 form and is in UTC.
            
            Populated by the system. Read-only. Null for lists. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.DeletionGracePeriodSeconds">
            <summary>
            Number of seconds allowed for this object to gracefully terminate before it will
            be removed from the system. Only set when deletionTimestamp is also set. May
            only be shortened. Read-only.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.DeletionTimestamp">
            <summary>
            DeletionTimestamp is RFC 3339 date and time at which this resource will be
            deleted. This field is set by the server when a graceful deletion is requested
            by the user, and is not directly settable by a client. The resource is expected
            to be deleted (no longer visible from resource lists, and not reachable by name)
            after the time in this field, once the finalizers list is empty. As long as the
            finalizers list contains items, deletion is blocked. Once the deletionTimestamp
            is set, this value may not be unset or be set further into the future, although
            it may be shortened or the resource may be deleted prior to this time. For
            example, a user may request that a pod is deleted in 30 seconds. The Kubelet
            will react by sending a graceful termination signal to the containers in the
            pod. After that 30 seconds, the Kubelet will send a hard termination signal
            (SIGKILL) to the container and after cleanup, remove the pod from the API. In
            the presence of network partitions, this object may still exist after this
            timestamp, until an administrator or automated process can determine the
            resource is fully terminated. If not set, graceful deletion of the object has
            not been requested.
            
            Populated by the system when a graceful deletion is requested. Read-only. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.Finalizers">
            <summary>
            Must be empty before the object is deleted from the registry. Each entry is an
            identifier for the responsible component that will remove the entry from the
            list. If the deletionTimestamp of the object is non-nil, entries in this list
            can only be removed. Finalizers may be processed and removed in any order. 
            Order is NOT enforced because it introduces significant risk of stuck
            finalizers. finalizers is a shared field, any actor with permission can reorder
            it. If the finalizer list is processed in order, then this can lead to a
            situation in which the component responsible for the first finalizer in the list
            is waiting for a signal (field value, external system, or other) produced by a
            component responsible for a finalizer later in the list, resulting in a
            deadlock. Without enforced ordering finalizers are free to order amongst
            themselves and are not vulnerable to ordering changes in the list.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.GenerateName">
            <summary>
            GenerateName is an optional prefix, used by the server, to generate a unique
            name ONLY IF the Name field has not been provided. If this field is used, the
            name returned to the client will be different than the name passed. This value
            will also be combined with a unique suffix. The provided value has the same
            validation rules as the Name field, and may be truncated by the length of the
            suffix required to make the value unique on the server.
            
            If this field is specified and the generated name exists, the server will return
            a 409.
            
            Applied only if Name is not specified. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.Generation">
            <summary>
            A sequence number representing a specific generation of the desired state.
            Populated by the system. Read-only.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.Labels">
            <summary>
            Map of string keys and values that can be used to organize and categorize (scope
            and select) objects. May match selectors of replication controllers and
            services. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.ManagedFields">
            <summary>
            ManagedFields maps workflow-id and version to the set of fields that are managed
            by that workflow. This is mostly for internal housekeeping, and users typically
            shouldn&apos;t need to set or understand this field. A workflow can be the user&apos;s
            name, a controller&apos;s name, or the name of a specific apply path like &quot;ci-cd&quot;.
            The set of fields is always in the version that the workflow used when modifying
            the object.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.Name">
            <summary>
            Name must be unique within a namespace. Is required when creating resources,
            although some resources may allow a client to request the generation of an
            appropriate name automatically. Name is primarily intended for creation
            idempotence and configuration definition. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.NamespaceProperty">
            <summary>
            Namespace defines the space within which each name must be unique. An empty
            namespace is equivalent to the &quot;default&quot; namespace, but &quot;default&quot; is the
            canonical representation. Not all objects are required to be scoped to a
            namespace - the value of this field for those objects will be empty.
            
            Must be a DNS_LABEL. Cannot be updated. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.OwnerReferences">
            <summary>
            List of objects depended by this object. If ALL objects in the list have been
            deleted, this object will be garbage collected. If this object is managed by a
            controller, then an entry in this list will point to this controller, with the
            controller field set to true. There cannot be more than one managing controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.ResourceVersion">
            <summary>
            An opaque value that represents the internal version of this object that can be
            used by clients to determine when objects have changed. May be used for
            optimistic concurrency, change detection, and the watch operation on a resource
            or set of resources. Clients must treat these values as opaque and passed
            unmodified back to the server. They may only be valid for a particular resource
            or set of resources.
            
            Populated by the system. Read-only. Value must be treated as opaque by clients
            and . More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.SelfLink">
            <summary>
            Deprecated: selfLink is a legacy read-only field that is no longer populated by
            the system.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ObjectMeta.Uid">
            <summary>
            UID is the unique in time and space value for this object. It is typically
            generated by the server on successful creation of a resource and is not allowed
            to change on PUT operations.
            
            Populated by the system. Read-only. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            </summary>
        </member>
        <member name="M:k8s.Models.V1ObjectMeta.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1OwnerReference">
            <summary>
            OwnerReference contains enough information to let you identify an owning object.
            An owning object must be in the same namespace as the dependent, or be
            cluster-scoped, so there is no namespace field.
            </summary>
        </member>
        <member name="M:k8s.Models.V1OwnerReference.#ctor">
            <summary>
            Initializes a new instance of the V1OwnerReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1OwnerReference.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the V1OwnerReference class.
            </summary>
            <param name="apiVersion">
            API version of the referent.
            </param>
            <param name="kind">
            Kind of the referent. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="name">
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
            </param>
            <param name="uid">
            UID of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            </param>
            <param name="blockOwnerDeletion">
            If true, AND if the owner has the &quot;foregroundDeletion&quot; finalizer, then the owner
            cannot be deleted from the key-value store until this reference is removed. See
            https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
            for how the garbage collector interacts with this field and enforces the
            foreground deletion. Defaults to false. To set this field, a user needs &quot;delete&quot;
            permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
            </param>
            <param name="controller">
            If true, this reference points to the managing controller.
            </param>
        </member>
        <member name="P:k8s.Models.V1OwnerReference.ApiVersion">
            <summary>
            API version of the referent.
            </summary>
        </member>
        <member name="P:k8s.Models.V1OwnerReference.BlockOwnerDeletion">
            <summary>
            If true, AND if the owner has the &quot;foregroundDeletion&quot; finalizer, then the owner
            cannot be deleted from the key-value store until this reference is removed. See
            https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
            for how the garbage collector interacts with this field and enforces the
            foreground deletion. Defaults to false. To set this field, a user needs &quot;delete&quot;
            permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
            </summary>
        </member>
        <member name="P:k8s.Models.V1OwnerReference.Controller">
            <summary>
            If true, this reference points to the managing controller.
            </summary>
        </member>
        <member name="P:k8s.Models.V1OwnerReference.Kind">
            <summary>
            Kind of the referent. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1OwnerReference.Name">
            <summary>
            Name of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
            </summary>
        </member>
        <member name="P:k8s.Models.V1OwnerReference.Uid">
            <summary>
            UID of the referent. More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            </summary>
        </member>
        <member name="M:k8s.Models.V1OwnerReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1Preconditions">
            <summary>
            Preconditions must be fulfilled before an operation (update, delete, etc.) is
            carried out.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Preconditions.#ctor">
            <summary>
            Initializes a new instance of the V1Preconditions class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Preconditions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1Preconditions class.
            </summary>
            <param name="resourceVersion">
            Specifies the target ResourceVersion
            </param>
            <param name="uid">
            Specifies the target UID.
            </param>
        </member>
        <member name="P:k8s.Models.V1Preconditions.ResourceVersion">
            <summary>
            Specifies the target ResourceVersion
            </summary>
        </member>
        <member name="P:k8s.Models.V1Preconditions.Uid">
            <summary>
            Specifies the target UID.
            </summary>
        </member>
        <member name="M:k8s.Models.V1Preconditions.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1ServerAddressByClientCIDR">
            <summary>
            ServerAddressByClientCIDR helps the client to determine the server address that
            they should use, depending on the clientCIDR that they match.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServerAddressByClientCIDR.#ctor">
            <summary>
            Initializes a new instance of the V1ServerAddressByClientCIDR class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServerAddressByClientCIDR.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the V1ServerAddressByClientCIDR class.
            </summary>
            <param name="clientCIDR">
            The CIDR with which clients can match their IP to figure out the server address
            that they should use.
            </param>
            <param name="serverAddress">
            Address of this server, suitable for a client that matches the above CIDR. This
            can be a hostname, hostname:port, IP or IP:port.
            </param>
        </member>
        <member name="P:k8s.Models.V1ServerAddressByClientCIDR.ClientCIDR">
            <summary>
            The CIDR with which clients can match their IP to figure out the server address
            that they should use.
            </summary>
        </member>
        <member name="P:k8s.Models.V1ServerAddressByClientCIDR.ServerAddress">
            <summary>
            Address of this server, suitable for a client that matches the above CIDR. This
            can be a hostname, hostname:port, IP or IP:port.
            </summary>
        </member>
        <member name="M:k8s.Models.V1ServerAddressByClientCIDR.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatusCause">
            <summary>
            StatusCause provides more information about an api.Status failure, including
            cases when multiple errors are encountered.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatusCause.#ctor">
            <summary>
            Initializes a new instance of the V1StatusCause class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatusCause.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the V1StatusCause class.
            </summary>
            <param name="field">
            The field of the resource that has caused this error, as named by its JSON
            serialization. May include dot and postfix notation for nested attributes.
            Arrays are zero-indexed.  Fields may appear more than once in an array of causes
            due to fields having multiple errors. Optional.
            
            Examples:
            &quot;name&quot; - the field &quot;name&quot; on the current resource
            &quot;items[0].name&quot; - the field &quot;name&quot; on the first array entry in &quot;items&quot;
            </param>
            <param name="message">
            A human-readable description of the cause of the error.  This field may be
            presented as-is to a reader.
            </param>
            <param name="reason">
            A machine-readable description of the cause of the error. If this value is empty
            there is no information available.
            </param>
        </member>
        <member name="P:k8s.Models.V1StatusCause.Field">
            <summary>
            The field of the resource that has caused this error, as named by its JSON
            serialization. May include dot and postfix notation for nested attributes.
            Arrays are zero-indexed.  Fields may appear more than once in an array of causes
            due to fields having multiple errors. Optional.
            
            Examples:
            &quot;name&quot; - the field &quot;name&quot; on the current resource
            &quot;items[0].name&quot; - the field &quot;name&quot; on the first array entry in &quot;items&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatusCause.Message">
            <summary>
            A human-readable description of the cause of the error.  This field may be
            presented as-is to a reader.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatusCause.Reason">
            <summary>
            A machine-readable description of the cause of the error. If this value is empty
            there is no information available.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatusCause.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1StatusDetails">
            <summary>
            StatusDetails is a set of additional properties that MAY be set by the server to
            provide additional information about a response. The Reason field of a Status
            object defines what attributes will be set. Clients must ignore fields that do
            not match the defined type of each attribute, and should assume that any
            attribute may be empty, invalid, or under defined.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatusDetails.#ctor">
            <summary>
            Initializes a new instance of the V1StatusDetails class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatusDetails.#ctor(System.Collections.Generic.IList{k8s.Models.V1StatusCause},System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the V1StatusDetails class.
            </summary>
            <param name="causes">
            The Causes array includes more details associated with the StatusReason failure.
            Not all StatusReasons may provide detailed causes.
            </param>
            <param name="group">
            The group attribute of the resource associated with the status StatusReason.
            </param>
            <param name="kind">
            The kind attribute of the resource associated with the status StatusReason. On
            some operations may differ from the requested resource Kind. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="name">
            The name attribute of the resource associated with the status StatusReason (when
            there is a single name which can be described).
            </param>
            <param name="retryAfterSeconds">
            If specified, the time in seconds before the operation should be retried. Some
            errors may indicate the client must take an alternate action - for those errors
            this field may indicate how long to wait before taking the alternate action.
            </param>
            <param name="uid">
            UID of the resource. (when there is a single resource which can be described).
            More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            </param>
        </member>
        <member name="P:k8s.Models.V1StatusDetails.Causes">
            <summary>
            The Causes array includes more details associated with the StatusReason failure.
            Not all StatusReasons may provide detailed causes.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatusDetails.Group">
            <summary>
            The group attribute of the resource associated with the status StatusReason.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatusDetails.Kind">
            <summary>
            The kind attribute of the resource associated with the status StatusReason. On
            some operations may differ from the requested resource Kind. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatusDetails.Name">
            <summary>
            The name attribute of the resource associated with the status StatusReason (when
            there is a single name which can be described).
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatusDetails.RetryAfterSeconds">
            <summary>
            If specified, the time in seconds before the operation should be retried. Some
            errors may indicate the client must take an alternate action - for those errors
            this field may indicate how long to wait before taking the alternate action.
            </summary>
        </member>
        <member name="P:k8s.Models.V1StatusDetails.Uid">
            <summary>
            UID of the resource. (when there is a single resource which can be described).
            More info:
            https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            </summary>
        </member>
        <member name="M:k8s.Models.V1StatusDetails.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1WatchEvent">
            <summary>
            Event represents a single event to a watched resource.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WatchEvent.#ctor">
            <summary>
            Initializes a new instance of the V1WatchEvent class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1WatchEvent.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the V1WatchEvent class.
            </summary>
            <param name="objectProperty">
            Object is:
            * If Type is Added or Modified: the new state of the object.
            * If Type is Deleted: the state of the object immediately before deletion.
            * If Type is Error: *Status is recommended; other types may make sense
            depending on context.
            </param>
            <param name="type">
            
            </param>
        </member>
        <member name="P:k8s.Models.V1WatchEvent.ObjectProperty">
            <summary>
            Object is:
            * If Type is Added or Modified: the new state of the object.
            * If Type is Deleted: the state of the object immediately before deletion.
            * If Type is Error: *Status is recommended; other types may make sense
            depending on context.
            </summary>
        </member>
        <member name="P:k8s.Models.V1WatchEvent.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.V1WatchEvent.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.VersionInfo">
            <summary>
            Info contains versioning information. how we&apos;ll want to distribute that
            information.
            </summary>
        </member>
        <member name="M:k8s.Models.VersionInfo.#ctor">
            <summary>
            Initializes a new instance of the VersionInfo class.
            </summary>
        </member>
        <member name="M:k8s.Models.VersionInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the VersionInfo class.
            </summary>
            <param name="buildDate">
            
            </param>
            <param name="compiler">
            
            </param>
            <param name="gitCommit">
            
            </param>
            <param name="gitTreeState">
            
            </param>
            <param name="gitVersion">
            
            </param>
            <param name="goVersion">
            
            </param>
            <param name="major">
            
            </param>
            <param name="minor">
            
            </param>
            <param name="platform">
            
            </param>
        </member>
        <member name="P:k8s.Models.VersionInfo.BuildDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.Compiler">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.GitCommit">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.GitTreeState">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.GitVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.GoVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.Major">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.Minor">
            <summary>
            
            </summary>
        </member>
        <member name="P:k8s.Models.VersionInfo.Platform">
            <summary>
            
            </summary>
        </member>
        <member name="M:k8s.Models.VersionInfo.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIService">
            <summary>
            APIService represents a server for a particular GroupVersion. Name must be
            &quot;version.group&quot;.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIService.#ctor">
            <summary>
            Initializes a new instance of the V1APIService class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIService.#ctor(System.String,System.String,k8s.Models.V1ObjectMeta,k8s.Models.V1APIServiceSpec,k8s.Models.V1APIServiceStatus)">
            <summary>
            Initializes a new instance of the V1APIService class.
            </summary>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
            <param name="spec">
            Spec contains information for locating and communicating with a server
            </param>
            <param name="status">
            Status contains derived information about an API server
            </param>
        </member>
        <member name="P:k8s.Models.V1APIService.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIService.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIService.Metadata">
            <summary>
            Standard object&apos;s metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIService.Spec">
            <summary>
            Spec contains information for locating and communicating with a server
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIService.Status">
            <summary>
            Status contains derived information about an API server
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIService.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIServiceCondition">
            <summary>
            APIServiceCondition describes the state of an APIService at a particular point
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceCondition.#ctor">
            <summary>
            Initializes a new instance of the V1APIServiceCondition class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceCondition.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the V1APIServiceCondition class.
            </summary>
            <param name="status">
            Status is the status of the condition. Can be True, False, Unknown.
            </param>
            <param name="type">
            Type is the type of the condition.
            </param>
            <param name="lastTransitionTime">
            Last time the condition transitioned from one status to another.
            </param>
            <param name="message">
            Human-readable message indicating details about last transition.
            </param>
            <param name="reason">
            Unique, one-word, CamelCase reason for the condition&apos;s last transition.
            </param>
        </member>
        <member name="P:k8s.Models.V1APIServiceCondition.LastTransitionTime">
            <summary>
            Last time the condition transitioned from one status to another.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceCondition.Message">
            <summary>
            Human-readable message indicating details about last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceCondition.Reason">
            <summary>
            Unique, one-word, CamelCase reason for the condition&apos;s last transition.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceCondition.Status">
            <summary>
            Status is the status of the condition. Can be True, False, Unknown.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceCondition.Type">
            <summary>
            Type is the type of the condition.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceCondition.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIServiceList">
            <summary>
            APIServiceList is a list of APIService objects.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceList.#ctor">
            <summary>
            Initializes a new instance of the V1APIServiceList class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceList.#ctor(System.Collections.Generic.IList{k8s.Models.V1APIService},System.String,System.String,k8s.Models.V1ListMeta)">
            <summary>
            Initializes a new instance of the V1APIServiceList class.
            </summary>
            <param name="items">
            Items is the list of APIService
            </param>
            <param name="apiVersion">
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </param>
            <param name="kind">
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </param>
            <param name="metadata">
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </param>
        </member>
        <member name="P:k8s.Models.V1APIServiceList.ApiVersion">
            <summary>
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and may
            reject unrecognized values. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceList.Items">
            <summary>
            Items is the list of APIService
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceList.Kind">
            <summary>
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to. Cannot
            be updated. In CamelCase. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceList.Metadata">
            <summary>
            Standard list metadata More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIServiceSpec">
            <summary>
            APIServiceSpec contains information for locating and communicating with a
            server. Only https is supported, though you are able to disable certificate
            verification.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceSpec.#ctor">
            <summary>
            Initializes a new instance of the V1APIServiceSpec class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceSpec.#ctor(System.Int32,System.Int32,System.Byte[],System.String,System.Nullable{System.Boolean},k8s.Models.Apiregistrationv1ServiceReference,System.String)">
            <summary>
            Initializes a new instance of the V1APIServiceSpec class.
            </summary>
            <param name="groupPriorityMinimum">
            GroupPriorityMininum is the priority this group should have at least. Higher
            priority means that the group is preferred by clients over lower priority ones.
            Note that other versions of this group might specify even higher
            GroupPriorityMininum values such that the whole group gets a higher priority.
            The primary sort is based on GroupPriorityMinimum, ordered highest number to
            lowest (20 before 10). The secondary sort is based on the alphabetical
            comparison of the name of the object.  (v1.bar before v1.foo) We&apos;d recommend
            something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift,
            Deis) are recommended to be in the 2000s
            </param>
            <param name="versionPriority">
            VersionPriority controls the ordering of this API version inside of its group. 
            Must be greater than zero. The primary sort is based on VersionPriority, ordered
            highest to lowest (20 before 10). Since it&apos;s inside of a group, the number can
            be small, probably in the 10s. In case of equal version priorities, the version
            string will be used to compute the order inside a group. If the version string
            is &quot;kube-like&quot;, it will sort above non &quot;kube-like&quot; version strings, which are
            ordered lexicographically. &quot;Kube-like&quot; versions start with a &quot;v&quot;, then are
            followed by a number (the major version), then optionally the string &quot;alpha&quot; or
            &quot;beta&quot; and another number (the minor version). These are sorted first by GA &gt;
            beta &gt; alpha (where GA is a version with no suffix such as beta or alpha), and
            then by comparing major version, then minor version. An example sorted list of
            versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1,
            foo10.
            </param>
            <param name="caBundle">
            CABundle is a PEM encoded CA bundle which will be used to validate an API
            server&apos;s serving certificate. If unspecified, system trust roots on the
            apiserver are used.
            </param>
            <param name="group">
            Group is the API group name this server hosts
            </param>
            <param name="insecureSkipTLSVerify">
            InsecureSkipTLSVerify disables TLS certificate verification when communicating
            with this server. This is strongly discouraged.  You should use the CABundle
            instead.
            </param>
            <param name="service">
            Service is a reference to the service for this API server.  It must communicate
            on port 443. If the Service is nil, that means the handling for the API
            groupversion is handled locally on this server. The call will simply delegate to
            the normal handler chain to be fulfilled.
            </param>
            <param name="version">
            Version is the API version this server hosts.  For example, &quot;v1&quot;
            </param>
        </member>
        <member name="P:k8s.Models.V1APIServiceSpec.CaBundle">
            <summary>
            CABundle is a PEM encoded CA bundle which will be used to validate an API
            server&apos;s serving certificate. If unspecified, system trust roots on the
            apiserver are used.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceSpec.Group">
            <summary>
            Group is the API group name this server hosts
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceSpec.GroupPriorityMinimum">
            <summary>
            GroupPriorityMininum is the priority this group should have at least. Higher
            priority means that the group is preferred by clients over lower priority ones.
            Note that other versions of this group might specify even higher
            GroupPriorityMininum values such that the whole group gets a higher priority.
            The primary sort is based on GroupPriorityMinimum, ordered highest number to
            lowest (20 before 10). The secondary sort is based on the alphabetical
            comparison of the name of the object.  (v1.bar before v1.foo) We&apos;d recommend
            something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift,
            Deis) are recommended to be in the 2000s
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceSpec.InsecureSkipTLSVerify">
            <summary>
            InsecureSkipTLSVerify disables TLS certificate verification when communicating
            with this server. This is strongly discouraged.  You should use the CABundle
            instead.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceSpec.Service">
            <summary>
            Service is a reference to the service for this API server.  It must communicate
            on port 443. If the Service is nil, that means the handling for the API
            groupversion is handled locally on this server. The call will simply delegate to
            the normal handler chain to be fulfilled.
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceSpec.Version">
            <summary>
            Version is the API version this server hosts.  For example, &quot;v1&quot;
            </summary>
        </member>
        <member name="P:k8s.Models.V1APIServiceSpec.VersionPriority">
            <summary>
            VersionPriority controls the ordering of this API version inside of its group. 
            Must be greater than zero. The primary sort is based on VersionPriority, ordered
            highest to lowest (20 before 10). Since it&apos;s inside of a group, the number can
            be small, probably in the 10s. In case of equal version priorities, the version
            string will be used to compute the order inside a group. If the version string
            is &quot;kube-like&quot;, it will sort above non &quot;kube-like&quot; version strings, which are
            ordered lexicographically. &quot;Kube-like&quot; versions start with a &quot;v&quot;, then are
            followed by a number (the major version), then optionally the string &quot;alpha&quot; or
            &quot;beta&quot; and another number (the minor version). These are sorted first by GA &gt;
            beta &gt; alpha (where GA is a version with no suffix such as beta or alpha), and
            then by comparing major version, then minor version. An example sorted list of
            versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1,
            foo10.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceSpec.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.V1APIServiceStatus">
            <summary>
            APIServiceStatus contains derived information about an API server
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceStatus.#ctor">
            <summary>
            Initializes a new instance of the V1APIServiceStatus class.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceStatus.#ctor(System.Collections.Generic.IList{k8s.Models.V1APIServiceCondition})">
            <summary>
            Initializes a new instance of the V1APIServiceStatus class.
            </summary>
            <param name="conditions">
            Current service state of apiService.
            </param>
        </member>
        <member name="P:k8s.Models.V1APIServiceStatus.Conditions">
            <summary>
            Current service state of apiService.
            </summary>
        </member>
        <member name="M:k8s.Models.V1APIServiceStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.Models.Apiregistrationv1ServiceReference">
            <summary>
            ServiceReference holds a reference to Service.legacy.k8s.io
            </summary>
        </member>
        <member name="M:k8s.Models.Apiregistrationv1ServiceReference.#ctor">
            <summary>
            Initializes a new instance of the Apiregistrationv1ServiceReference class.
            </summary>
        </member>
        <member name="M:k8s.Models.Apiregistrationv1ServiceReference.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the Apiregistrationv1ServiceReference class.
            </summary>
            <param name="name">
            Name is the name of the service
            </param>
            <param name="namespaceProperty">
            Namespace is the namespace of the service
            </param>
            <param name="port">
            If specified, the port on the service that hosting webhook. Default to 443 for
            backward compatibility. `port` should be a valid port number (1-65535,
            inclusive).
            </param>
        </member>
        <member name="P:k8s.Models.Apiregistrationv1ServiceReference.Name">
            <summary>
            Name is the name of the service
            </summary>
        </member>
        <member name="P:k8s.Models.Apiregistrationv1ServiceReference.NamespaceProperty">
            <summary>
            Namespace is the namespace of the service
            </summary>
        </member>
        <member name="P:k8s.Models.Apiregistrationv1ServiceReference.Port">
            <summary>
            If specified, the port on the service that hosting webhook. Default to 443 for
            backward compatibility. `port` should be a valid port number (1-65535,
            inclusive).
            </summary>
        </member>
        <member name="M:k8s.Models.Apiregistrationv1ServiceReference.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="!:ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:k8s.IItems`1">
            <summary>
            Kubernetes object that exposes list of objects
            </summary>
            <typeparam name="T">type of the objects</typeparam>
        </member>
        <member name="P:k8s.IItems`1.Items">
            <summary>
            Gets or sets list of objects. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
            </summary>
        </member>
        <member name="T:k8s.IKubernetesObject">
            <summary>
            Represents a generic Kubernetes object.
            </summary>
            <remarks>
            You can use the <see cref="T:k8s.KubernetesObject"/> if you receive JSON from a Kubernetes API server but
            are unsure which object the API server is about to return. You can parse the JSON as a <see cref="T:k8s.KubernetesObject"/>
            and use the <see cref="P:k8s.IKubernetesObject.ApiVersion"/> and <see cref="P:k8s.IKubernetesObject.Kind"/> properties to get basic metadata about any Kubernetes object.
            You can then
            </remarks>
        </member>
        <member name="P:k8s.IKubernetesObject.ApiVersion">
            <summary>
            Gets or sets aPIVersion defines the versioned schema of this
            representation of an object. Servers should convert recognized
            schemas to the latest internal value, and may reject unrecognized
            values. More info:
            https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.IKubernetesObject.Kind">
            <summary>
            Gets or sets kind is a string value representing the REST resource
            this object represents. Servers may infer this from the endpoint
            the client submits requests to. Cannot be updated. In CamelCase.
            More info:
            https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="T:k8s.IKubernetesObject`1">
            <summary>Represents a generic Kubernetes object that has an API version, a kind, and metadata.</summary>
            <typeparam name="TMetadata">type of metadata</typeparam>
        </member>
        <member name="T:k8s.IMetadata`1">
            <summary>
            Kubernetes object that exposes metadata
            </summary>
            <typeparam name="T">Type of metadata exposed. Usually this will be either
            <see cref="T:k8s.Models.V1ListMeta"/> for lists or <see cref="T:k8s.Models.V1ObjectMeta"/> for objects</typeparam>
        </member>
        <member name="P:k8s.IMetadata`1.Metadata">
            <summary>
            Gets or sets standard object's metadata. More info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            </summary>
        </member>
        <member name="T:k8s.ISpec`1">
            <summary>
            Represents a Kubernetes object that has a spec
            </summary>
            <typeparam name="T">type of Kubernetes object</typeparam>
        </member>
        <member name="P:k8s.ISpec`1.Spec">
            <summary>
            Gets or sets specification of the desired behavior of the entity. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="T:k8s.IStatus`1">
            <summary>
            Kubernetes object that exposes status
            </summary>
            <typeparam name="T">The type of status object</typeparam>
        </member>
        <member name="P:k8s.IStatus`1.Status">
            <summary>
            Gets or sets most recently observed status of the object. This data
            may not be up to date. Populated by the system. Read-only. More
            info:
            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            </summary>
        </member>
        <member name="T:k8s.IValidate">
            <summary>
            Object that allows self validation
            </summary>
        </member>
        <member name="M:k8s.IValidate.Validate">
            <summary>
            Validate the object.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.AuthProvider">
            <summary>
            Contains information that describes identity information.  This is use to tell the kubernetes cluster who you are.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.AuthProvider.Name">
            <summary>
            Gets or sets the nickname for this auth provider.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.AuthProvider.Config">
            <summary>
            Gets or sets the configuration for this auth provider
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.Cluster">
            <summary>
            Relates nicknames to cluster information.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.Cluster.ClusterEndpoint">
            <summary>
            Gets or sets the cluster information.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.Cluster.Name">
            <summary>
            Gets or sets the nickname for this Cluster.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.ClusterEndpoint">
            <summary>
            Contains information about how to communicate with a kubernetes cluster
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ClusterEndpoint.CertificateAuthority">
            <summary>
            Gets or sets the path to a cert file for the certificate authority.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ClusterEndpoint.CertificateAuthorityData">
            <summary>
            Gets or sets =PEM-encoded certificate authority certificates. Overrides <see cref="P:k8s.KubeConfigModels.ClusterEndpoint.CertificateAuthority"/>.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ClusterEndpoint.Server">
            <summary>
            Gets or sets the address of the kubernetes cluster (https://hostname:port).
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ClusterEndpoint.TlsServerName">
            <summary>
            Gets or sets a value to override the TLS server name.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ClusterEndpoint.SkipTlsVerify">
            <summary>
            Gets or sets a value indicating whether to skip the validity check for the server's certificate.
            This will make your HTTPS connections insecure.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ClusterEndpoint.Extensions">
            <summary>
            Gets or sets additional information. This is useful for extenders so that reads and writes don't clobber unknown fields.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.Context">
            <summary>
            Relates nicknames to context information.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.Context.ContextDetails">
            <summary>
            Gets or sets the context information.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.Context.Name">
            <summary>
            Gets or sets the nickname for this context.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.Context.Extensions">
            <summary>
            Gets or sets additional information. This is useful for extenders so that reads and writes don't clobber unknown fields.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.ContextDetails">
            <summary>
            Represents a tuple of references to a cluster (how do I communicate with a kubernetes cluster),
            a user (how do I identify myself), and a namespace (what subset of resources do I want to work with)
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ContextDetails.Cluster">
            <summary>
            Gets or sets the name of the cluster for this context.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ContextDetails.User">
            <summary>
            Gets or sets the name of the user for this context.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ContextDetails.Namespace">
            <summary>
            /Gets or sets the default namespace to use on unspecified requests.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ContextDetails.Extensions">
            <summary>
            Gets or sets additional information. This is useful for extenders so that reads and writes don't clobber unknown fields.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ExternalExecution.Command">
            <summary>
            The command to execute. Required.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ExternalExecution.EnvironmentVariables">
            <summary>
            Environment variables to set when executing the plugin. Optional.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ExternalExecution.Arguments">
            <summary>
            Arguments to pass when executing the plugin. Optional.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ExternalExecution.InstallHint">
            <summary>
            Text shown to the user when the executable doesn't seem to be present. Optional.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.ExternalExecution.ProvideClusterInfo">
            <summary>
            Whether or not to provide cluster information to this exec plugin as a part of
            the KUBERNETES_EXEC_INFO environment variable. Optional.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.K8SConfiguration">
            <summary>
            kubeconfig configuration model. Holds the information needed to build connect to remote
            Kubernetes clusters as a given user.
            </summary>
            <remarks>
            Should be kept in sync with https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/clientcmd/api/v1/types.go
            Should update MergeKubeConfig in KubernetesClientConfiguration.ConfigFile.cs if updated.
            </remarks>
        </member>
        <member name="P:k8s.KubeConfigModels.K8SConfiguration.Preferences">
            <summary>
            Gets or sets general information to be use for CLI interactions
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.K8SConfiguration.CurrentContext">
            <summary>
            Gets or sets the name of the context that you would like to use by default.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.K8SConfiguration.Contexts">
            <summary>
            Gets or sets a map of referencable names to context configs.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.K8SConfiguration.Clusters">
            <summary>
            Gets or sets a map of referencable names to cluster configs.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.K8SConfiguration.Users">
            <summary>
            Gets or sets a map of referencable names to user configs
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.K8SConfiguration.Extensions">
            <summary>
            Gets or sets additional information. This is useful for extenders so that reads and writes don't clobber unknown fields.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.K8SConfiguration.FileName">
            <summary>
            Gets or sets the name of the Kubernetes configuration file. This property is set only when the configuration
            was loaded from disk, and can be used to resolve relative paths.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.NamedExtension">
            <summary>
            <see cref="T:k8s.KubeConfigModels.NamedExtension"/> relates nicknames to extension information
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.NamedExtension.Name">
            <summary>
            Gets or sets the nickname for this extension.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.NamedExtension.Extension">
            <summary>
            Get or sets the extension information.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.User">
            <summary>
            Relates nicknames to auth information.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.User.UserCredentials">
            <summary>
            Gets or sets the auth information.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.User.Name">
            <summary>
            Gets or sets the nickname for this auth information.
            </summary>
        </member>
        <member name="T:k8s.KubeConfigModels.UserCredentials">
            <summary>
            Contains information that describes identity information.  This is use to tell the kubernetes cluster who you are.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.ClientCertificateData">
            <summary>
            Gets or sets PEM-encoded data from a client cert file for TLS. Overrides <see cref="P:k8s.KubeConfigModels.UserCredentials.ClientCertificate"/>.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.ClientCertificate">
            <summary>
            Gets or sets the path to a client cert file for TLS.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.ClientKeyData">
            <summary>
            Gets or sets PEM-encoded data from a client key file for TLS. Overrides <see cref="P:k8s.KubeConfigModels.UserCredentials.ClientKey"/>.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.ClientKey">
            <summary>
            Gets or sets the path to a client key file for TLS.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.Token">
            <summary>
            Gets or sets the bearer token for authentication to the kubernetes cluster.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.Impersonate">
            <summary>
            Gets or sets the username to impersonate. The name matches the flag.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.ImpersonateGroups">
            <summary>
            Gets or sets the groups to impersonate.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.ImpersonateUserExtra">
            <summary>
            Gets or sets additional information for impersonated user.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.UserName">
            <summary>
            Gets or sets the username for basic authentication to the kubernetes cluster.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.Password">
            <summary>
            Gets or sets the password for basic authentication to the kubernetes cluster.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.AuthProvider">
            <summary>
            Gets or sets custom authentication plugin for the kubernetes cluster.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.Extensions">
            <summary>
            Gets or sets additional information. This is useful for extenders so that reads and writes don't clobber unknown fields.
            </summary>
        </member>
        <member name="P:k8s.KubeConfigModels.UserCredentials.ExternalExecution">
            <summary>
            Gets or sets external command and its arguments to receive user credentials
            </summary>
        </member>
        <member name="M:k8s.KubernetesJson.AddJsonOptions(System.Action{System.Text.Json.JsonSerializerOptions})">
            <summary>
            Configures <see cref="F:k8s.KubernetesJson.JsonSerializerOptions"/> for the <see cref="T:System.Text.Json.JsonSerializer"/>.
            To override existing converters, add them to the top of the <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/> list
            e.g. as follows: <code>options.Converters.Insert(index: 0, new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));</code>
            </summary>
            <param name="configure">An <see cref="T:System.Action"/> to configure the <see cref="F:k8s.KubernetesJson.JsonSerializerOptions"/>.</param>
        </member>
        <member name="T:k8s.KubernetesObject">
            <summary>
            Represents a generic Kubernetes object.
            </summary>
            <remarks>
            You can use the <see cref="T:k8s.KubernetesObject"/> if you receive JSON from a Kubernetes API server but
            are unsure which object the API server is about to return. You can parse the JSON as a <see cref="T:k8s.KubernetesObject"/>
            and use the <see cref="P:k8s.KubernetesObject.ApiVersion"/> and <see cref="P:k8s.KubernetesObject.Kind"/> properties to get basic metadata about any Kubernetes object.
            You can then
            </remarks>
        </member>
        <member name="P:k8s.KubernetesObject.ApiVersion">
            <summary>
            Gets or sets aPIVersion defines the versioned schema of this
            representation of an object. Servers should convert recognized
            schemas to the latest internal value, and may reject unrecognized
            values. More info:
            https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
            </summary>
        </member>
        <member name="P:k8s.KubernetesObject.Kind">
            <summary>
            Gets or sets kind is a string value representing the REST resource
            this object represents. Servers may infer this from the endpoint
            the client submits requests to. Cannot be updated. In CamelCase.
            More info:
            https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
            </summary>
        </member>
        <member name="T:k8s.KubernetesYaml">
            <summary>
            This is a utility class that helps you load objects from YAML files.
            </summary>
        </member>
        <member name="M:k8s.KubernetesYaml.LoadAllFromStreamAsync(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Type},System.Boolean)">
             <summary>
             Load a collection of objects from a stream asynchronously
            
             caller is responsible for closing the stream
             </summary>
             <param name="stream">
             The stream to load the objects from.
             </param>
             <param name="typeMap">
             A map from apiVersion/kind to Type. For example "v1/Pod" -> typeof(V1Pod). If null, a default mapping will
             be used.
             </param>
             <param name="strict">true if a strict deserializer should be used (throwing exception on unknown properties), false otherwise</param>
             <returns>collection of objects</returns>
        </member>
        <member name="M:k8s.KubernetesYaml.LoadAllFromFileAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},System.Boolean)">
            <summary>
            Load a collection of objects from a file asynchronously
            </summary>
            <param name="fileName">The name of the file to load from.</param>
            <param name="typeMap">
            A map from apiVersion/kind to Type. For example "v1/Pod" -> typeof(V1Pod). If null, a default mapping will
            be used.
            </param>
            <param name="strict">true if a strict deserializer should be used (throwing exception on unknown properties), false otherwise</param>
            <returns>collection of objects</returns>
        </member>
        <member name="M:k8s.KubernetesYaml.LoadAllFromString(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},System.Boolean)">
            <summary>
            Load a collection of objects from a string
            </summary>
            <param name="content">
            The string to load the objects from.
            </param>
            <param name="typeMap">
            A map from apiVersion/kind to Type. For example "v1/Pod" -> typeof(V1Pod). If null, a default mapping will
            be used.
            </param>
            <param name="strict">true if a strict deserializer should be used (throwing exception on unknown properties), false otherwise</param>
            <returns>collection of objects</returns>
        </member>
        <member name="M:k8s.StringQuotingEmitter.Emit(YamlDotNet.Serialization.ScalarEventInfo,YamlDotNet.Core.IEmitter)">
            <inheritdoc/>
        </member>
    </members>
</doc>
